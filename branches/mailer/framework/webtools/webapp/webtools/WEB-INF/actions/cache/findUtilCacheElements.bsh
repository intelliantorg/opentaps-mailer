/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */

import org.ofbiz.base.util.cache.UtilCache;
import org.ofbiz.base.util.cache.CacheLine;
import org.ofbiz.base.util.UtilFormatOut;
import org.ofbiz.security.Security;
 
security = request.getAttribute("security");

if(security.hasEntityPermission("UTIL_CACHE", "_EDIT", session)) {
    context.put("hasUtilCacheEdit", Boolean.TRUE);
} 
else {
    context.put("hasUtilCacheEdit", Boolean.FALSE);
} 

String cacheName = request.getParameter("UTIL_CACHE_NAME");
context.put("cacheName", cacheName);
context.put("now", (new Date()).toString());

long totalSize = 0;

List cacheElementsList = new ArrayList();
if (cacheName != null) {
    UtilCache utilCache = (UtilCache)UtilCache.utilCacheTable.get(cacheName);
    if (utilCache != null) {
        Iterator iter = utilCache.cacheLineTable.keySet().iterator();
        if(iter != null && iter.hasNext()) {
            int keyNum = 0;
            while(iter.hasNext()) {
                Map cacheElement = new HashMap();
                Object key = iter.next();
                CacheLine line = (CacheLine) utilCache.cacheLineTable.get(key);
                String expireTime = "";
                if(line != null && line.loadTime > 0) {
                    expireTime = (new Date(line.loadTime + utilCache.getExpireTime())).toString();
                }
                long lineSize = line.getSizeInBytes(); 
                totalSize += lineSize;
                
                cacheElement.put("elementKey", key);
                cacheElement.put("expireTime", expireTime);
                cacheElement.put("lineSize", UtilFormatOut.formatQuantity(lineSize));
                cacheElement.put("keyNum", keyNum);
                
                cacheElementsList.add(cacheElement);
                
                keyNum++;
            }
        }
    }
}
context.put("totalSize", UtilFormatOut.formatQuantity(totalSize));
context.put("cacheElementsList", cacheElementsList);