/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.sql.Timestamp;

import org.ofbiz.base.util.Debug;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.service.ServiceDispatcher;
import org.ofbiz.service.DispatchContext;
import org.ofbiz.service.ModelService;
import org.ofbiz.service.ModelParam;
import org.ofbiz.service.RunningService;
import org.ofbiz.service.engine.GenericEngine;
import org.ofbiz.service.config.ServiceConfigUtil;

Map savedSyncResult = null;
if( null!=session.getAttribute("_SAVED_SYNC_RESULT_") ){
    savedSyncResult = (Map)session.getAttribute("_SAVED_SYNC_RESULT_");
}

String serviceName = request.getParameter("SERVICE_NAME");
context.put("POOL_NAME", ServiceConfigUtil.getSendPool());

List scheduleOptions = new ArrayList();
List serviceParameters = new ArrayList();
Enumeration e = request.getParameterNames();
while (e.hasMoreElements()) {
    String paramName = (String) e.nextElement();
    String paramValue = request.getParameter(paramName);
    scheduleOptions.add(UtilMisc.toMap("name", paramName, "value", paramValue));
}

context.put("scheduleOptions", scheduleOptions);

if (UtilValidate.isNotEmpty(serviceName)) {
    DispatchContext dctx = dispatcher.getDispatchContext();
    ModelService model = null;
    try {
        model = dctx.getModelService(serviceName);
    } catch(Exception exc) {
        context.put("errorMessageList", UtilMisc.toList(exc.getMessage()));
    }
    if (model != null) {
        Iterator params = model.getInParamNames().iterator();
        while (params.hasNext()) {
            ModelParam par = model.getParam((String) params.next());
            if (par.internal) {
                continue;
            }
            Map serviceParam = null;
            if(null != savedSyncResult && null != savedSyncResult.get(par.name)){
                serviceParam = UtilMisc.toMap("name", par.name, "type", par.type, "optional", (par.optional? "Y": "N"), "defaultValue", par.defaultValue, "value", savedSyncResult.get(par.name).toString());
            }else{
                serviceParam = UtilMisc.toMap("name", par.name, "type", par.type, "optional", (par.optional? "Y": "N"), "defaultValue", par.defaultValue);
            }
            serviceParameters.add(serviceParam);
        }
    }
}
context.put("serviceParameters", serviceParameters);
