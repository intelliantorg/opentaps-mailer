/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */

import org.ofbiz.entity.GenericDelegator;
import org.ofbiz.security.Security;
import org.ofbiz.entity.jdbc.DatabaseUtil;
import org.ofbiz.entity.model.ModelEntity;

delegator = request.getAttribute("delegator");
security = request.getAttribute("security");

String controlPath = (String)request.getAttribute("_CONTROL_PATH_");

if (security.hasPermission("ENTITY_MAINT", session)) {
    boolean addMissing = "true".equals(request.getParameter("addMissing"));
    boolean checkFkIdx = "true".equals(request.getParameter("checkFkIdx"));
    boolean checkFks = "true".equals(request.getParameter("checkFks"));
    boolean checkPks = "true".equals(request.getParameter("checkPks"));
    boolean repair = "true".equals(request.getParameter("repair"));
    String option = request.getParameter("option");
    String groupName = request.getParameter("groupName");    
    String entityName = request.getParameter("entityName");    
    
    Iterator miter = null;
    if (groupName != null && groupName.length() > 0) {
        String helperName = delegator.getGroupHelperName(groupName);

        List messages = new LinkedList();
        //GenericHelper helper = GenericHelperFactory.getHelper(helperName);
        DatabaseUtil dbUtil = new DatabaseUtil(helperName);
        Map modelEntities = delegator.getModelEntityMapByGroup(groupName);
        Set modelEntityNames = new TreeSet(modelEntities.keySet());
    
        if ("checkupdatetables".equals(option)) {
            List fieldsToRepair = null;
            if (repair) {
                fieldsToRepair = new ArrayList();
            }
            dbUtil.checkDb(modelEntities, fieldsToRepair, messages, checkPks, checkFks, checkFkIdx, addMissing);
            if (fieldsToRepair != null && fieldsToRepair.size() > 0) {
                dbUtil.repairColumnSizeChanges(modelEntities, fieldsToRepair, messages);
            }
        } else if ("removetables".equals(option)) {
            Iterator modelEntityNameIter = modelEntityNames.iterator();
            while (modelEntityNameIter.hasNext()) {
                String modelEntityName = (String) modelEntityNameIter.next();
                ModelEntity modelEntity = (ModelEntity) modelEntities.get(modelEntityName);
                dbUtil.deleteTable(modelEntity, messages);
            }
        } else if ("removetable".equals(option)) {
            ModelEntity modelEntity = (ModelEntity) modelEntities.get(entityName);
            dbUtil.deleteTable(modelEntity, messages);
        } else if ("removepks".equals(option)) {
            Iterator modelEntityNameIter = modelEntityNames.iterator();
            while (modelEntityNameIter.hasNext()) {
                String modelEntityName = (String) modelEntityNameIter.next();
                ModelEntity modelEntity = (ModelEntity) modelEntities.get(modelEntityName);
                dbUtil.deletePrimaryKey(modelEntity, messages);
            }
        } else if ("removepk".equals(option)) {
            ModelEntity modelEntity = (ModelEntity) modelEntities.get(entityName);
            dbUtil.deletePrimaryKey(modelEntity, messages);
        } else if ("createpks".equals(option)) {
            Iterator modelEntityNameIter = modelEntityNames.iterator();
            while (modelEntityNameIter.hasNext()) {
                String modelEntityName = (String) modelEntityNameIter.next();
                ModelEntity modelEntity = (ModelEntity) modelEntities.get(modelEntityName);
                dbUtil.createPrimaryKey(modelEntity, messages);
            }
        } else if ("createpk".equals(option)) {
            ModelEntity modelEntity = (ModelEntity) modelEntities.get(entityName);
            dbUtil.createPrimaryKey(modelEntity, messages);
        } else if ("createfkidxs".equals(option)) {
            Iterator modelEntityNameIter = modelEntityNames.iterator();
            while (modelEntityNameIter.hasNext()) {
                  String modelEntityName = (String) modelEntityNameIter.next();
                  ModelEntity modelEntity = (ModelEntity) modelEntities.get(modelEntityName);
                dbUtil.createForeignKeyIndices(modelEntity, messages);
            }
        } else if ("removefkidxs".equals(option)) {
            Iterator modelEntityNameIter = modelEntityNames.iterator();
            while (modelEntityNameIter.hasNext()) {
                  String modelEntityName = (String) modelEntityNameIter.next();
                  ModelEntity modelEntity = (ModelEntity) modelEntities.get(modelEntityName);
                dbUtil.deleteForeignKeyIndices(modelEntity, messages);
            }
        } else if ("createfks".equals(option)) {
            Iterator modelEntityNameIter = modelEntityNames.iterator();
            while (modelEntityNameIter.hasNext()) {
                  String modelEntityName = (String) modelEntityNameIter.next();
                  ModelEntity modelEntity = (ModelEntity) modelEntities.get(modelEntityName);
                dbUtil.createForeignKeys(modelEntity, modelEntities, messages);
            }
        } else if ("removefks".equals(option)) {
            Iterator modelEntityNameIter = modelEntityNames.iterator();
            while (modelEntityNameIter.hasNext()) {
                  String modelEntityName = (String) modelEntityNameIter.next();
                  ModelEntity modelEntity = (ModelEntity) modelEntities.get(modelEntityName);
                dbUtil.deleteForeignKeys(modelEntity, modelEntities, messages);
            }
        } else if ("createidx".equals(option)) {
            Iterator modelEntityNameIter = modelEntityNames.iterator();
            while (modelEntityNameIter.hasNext()) {
                String modelEntityName = (String) modelEntityNameIter.next();
                  ModelEntity modelEntity = (ModelEntity) modelEntities.get(modelEntityName);
                dbUtil.createDeclaredIndices(modelEntity, messages);
            }
        } else if ("removeidx".equals(option)) {
            Iterator modelEntityNameIter = modelEntityNames.iterator();
            while (modelEntityNameIter.hasNext()) {
                String modelEntityName = (String) modelEntityNameIter.next();
                  ModelEntity modelEntity = (ModelEntity) modelEntities.get(modelEntityName);
                dbUtil.deleteDeclaredIndices(modelEntity, messages);
            }
        } else if ("updateCharsetCollate".equals(option)) {
            Iterator modelEntityNameIter = modelEntityNames.iterator();
            while (modelEntityNameIter.hasNext()) {
                String modelEntityName = (String) modelEntityNameIter.next();
                  ModelEntity modelEntity = (ModelEntity) modelEntities.get(modelEntityName);
                dbUtil.updateCharacterSetAndCollation(modelEntity, messages);
            }
        }
        miter = messages.iterator();
        context.put("miters", miter);
    }
    context.put("encodeURLCheckDb", response.encodeURL(controlPath + "/view/checkdb"));
    context.put("groupName", (groupName != null) ? groupName : "org.ofbiz");
    context.put("entityName", (entityName != null) ? entityName : "");
}
