/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.*;
import java.net.*;
import org.ofbiz.security.*;
import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;

String findOrganizationPartyId = request.getParameter("findOrganizationPartyId");
if (UtilValidate.isNotEmpty(findOrganizationPartyId)) {
    context.put("findOrganizationPartyId", findOrganizationPartyId);
}

String currentCustomTimePeriodId = request.getParameter("currentCustomTimePeriodId");
if (UtilValidate.isNotEmpty(currentCustomTimePeriodId)) {
    context.put("currentCustomTimePeriodId", currentCustomTimePeriodId);
}

GenericValue currentCustomTimePeriod = currentCustomTimePeriodId == null ? null : delegator.findByPrimaryKey("CustomTimePeriod", UtilMisc.toMap("customTimePeriodId", currentCustomTimePeriodId));
if (currentCustomTimePeriod != null) {
    context.put("currentCustomTimePeriod", currentCustomTimePeriod);
}

GenericValue currentPeriodType = currentCustomTimePeriod == null ? null : currentCustomTimePeriod.getRelatedOneCache("PeriodType");
if (currentPeriodType != null) {
    context.put("currentPeriodType", currentPeriodType);
}

Map findMap = UtilMisc.toMap("organizationPartyId", findOrganizationPartyId);
if (UtilValidate.isNotEmpty(currentCustomTimePeriodId)) {
    findMap.put("parentPeriodId", currentCustomTimePeriodId);
}

List customTimePeriods = delegator.findByAnd("CustomTimePeriod", findMap,
    UtilMisc.toList("periodTypeId", "periodNum", "fromDate"));
if (customTimePeriods != null) {
    context.put("customTimePeriods", customTimePeriods);
}

List allCustomTimePeriods = delegator.findAll("CustomTimePeriod", UtilMisc.toList("organizationPartyId", "parentPeriodId", "periodTypeId", "periodNum", "fromDate"));
if (allCustomTimePeriods != null) {
    context.put("allCustomTimePeriods", allCustomTimePeriods);
}

List periodTypes = delegator.findAllCache("PeriodType", UtilMisc.toList("description"));
if (periodTypes != null) {
    context.put("periodTypes", periodTypes);
}

String newPeriodTypeId = "FISCAL_YEAR";
if (currentCustomTimePeriod != null && "FISCAL_YEAR".equals(currentCustomTimePeriod.getString("periodTypeId"))) {
    newPeriodTypeId = "FISCAL_QUARTER";
}
if (currentCustomTimePeriod != null && "FISCAL_QUARTER".equals(currentCustomTimePeriod.getString("periodTypeId"))) {
    newPeriodTypeId = "FISCAL_MONTH";
}
if (currentCustomTimePeriod != null && "FISCAL_MONTH".equals(currentCustomTimePeriod.getString("periodTypeId"))) {
    newPeriodTypeId = "FISCAL_WEEK";
}
if (currentCustomTimePeriod != null && "FISCAL_BIWEEK".equals(currentCustomTimePeriod.getString("periodTypeId"))) {
    newPeriodTypeId = "FISCAL_WEEK";
}
if (currentCustomTimePeriod != null && "FISCAL_WEEK".equals(currentCustomTimePeriod.getString("periodTypeId"))) {
    newPeriodTypeId = "";
}

context.put("newPeriodTypeId", newPeriodTypeId);
