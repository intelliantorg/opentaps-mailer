/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */

import org.ofbiz.base.util.cache.UtilCache;
import org.ofbiz.base.util.UtilFormatOut;
import org.ofbiz.security.Security;
 
security = request.getAttribute("security");

if(security.hasEntityPermission("UTIL_CACHE", "_EDIT", session)) {
    context.put("hasUtilCacheEdit", Boolean.TRUE);
} 
else {
    context.put("hasUtilCacheEdit", Boolean.FALSE);
} 

Runtime rt = Runtime.getRuntime();
context.put("memory", UtilFormatOut.formatQuantity(rt.totalMemory()));
context.put("freeMemory", UtilFormatOut.formatQuantity(rt.freeMemory()));
context.put("usedMemory", UtilFormatOut.formatQuantity((rt.totalMemory() - rt.freeMemory())));
context.put("maxMemory", UtilFormatOut.formatQuantity(rt.maxMemory()));

List cacheList = new ArrayList();
TreeSet names = new TreeSet(UtilCache.utilCacheTable.keySet());
Iterator nameIter = names.iterator();
if(nameIter != null && nameIter.hasNext()) {
    while(nameIter.hasNext()) {
        String cacheName = (String)nameIter.next();
        UtilCache utilCache = (UtilCache)UtilCache.utilCacheTable.get(cacheName);
        Map cache = new HashMap();
        
        cache.put("cacheName", utilCache.getName());
        cache.put("cacheSize", UtilFormatOut.formatQuantity(utilCache.size()));
        cache.put("hitCount", UtilFormatOut.formatQuantity(utilCache.getHitCount()));
        cache.put("missCountTot", UtilFormatOut.formatQuantity(utilCache.getMissCountTotal()));
        cache.put("missCountNotFound", UtilFormatOut.formatQuantity(utilCache.getMissCountNotFound()));
        cache.put("missCountExpired", UtilFormatOut.formatQuantity(utilCache.getMissCountExpired()));
        cache.put("missCountSoftRef", UtilFormatOut.formatQuantity(utilCache.getMissCountSoftRef()));
        cache.put("removeHitCount", UtilFormatOut.formatQuantity(utilCache.getRemoveHitCount()));
        cache.put("removeMissCount", UtilFormatOut.formatQuantity(utilCache.getRemoveMissCount()));
        cache.put("maxSize", UtilFormatOut.formatQuantity(utilCache.getMaxSize()));
        cache.put("expireTime", UtilFormatOut.formatQuantity(utilCache.getExpireTime()));
        cache.put("useSoftReference", (new Boolean(utilCache.getUseSoftReference())).toString());
        cache.put("useFileSystemStore", (new Boolean(utilCache.getUseFileSystemStore())).toString());
        
        cacheList.add(cache);
    }
}
context.put("cacheList", cacheList);