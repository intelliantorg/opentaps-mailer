/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.sql.Timestamp;

import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.service.ServiceDispatcher;
import org.ofbiz.service.RunningService;
import org.ofbiz.service.engine.GenericEngine;
import org.ofbiz.base.util.UtilHttp;
import org.ofbiz.base.util.UtilProperties;

locale = UtilHttp.getLocale(request);
request.setAttribute("locale",locale);
uiLabelMap = UtilProperties.getResourceBundleMap("WebtoolsUiLabels", locale);
uiLabelMap.addBottomResourceBundle("CommonUiLabels");

List threads = new ArrayList();
List jobs = dispatcher.getJobManager().processList();
if (jobs != null) {
    Iterator i = jobs.iterator();
    while (i.hasNext()) {
        Map job = (Map) i.next();
        String status = uiLabelMap.get("WebtoolsStatusInvalid");
        int state = ((Integer) job.get("status")).intValue();
        switch (state) {
            case 0 : status = uiLabelMap.get("WebtoolsStatusSleeping"); break;
            case 1 : status = uiLabelMap.get("WebtoolsStatusRunning"); break;
            case -1: status = uiLabelMap.get("WebtoolsStatusShuttingDown"); break;
            default: status = uiLabelMap.get("WebtoolsStatusInvalid"); break;
        }
        threads.add(UtilMisc.toMap("serviceName", job.get("serviceName"), "threadName", job.get("threadName"), "jobName", job.get("jobName"), "status", status));
    }
}
context.put("threads", threads);

// Some stuff for general threads on the server
currentThread = Thread.currentThread();
currentThreadGroup = currentThread.getThreadGroup();
topThreadGroup = currentThreadGroup;
while (topThreadGroup.getParent() != null) {
    topThreadGroup = topThreadGroup.getParent();
}

Thread[] allThreadArray = new Thread[1000];
topThreadGroup.enumerate(allThreadArray);
allThreadList = Arrays.asList(allThreadArray);

context.put("allThreadList", allThreadList);
