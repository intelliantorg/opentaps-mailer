<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<!-- This file has been modified by Open Source Strategies, Inc. -->


<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:noNamespaceSchemaLocation="http://www.ofbiz.org/dtds/simple-methods.xsd">
    <simple-method method-name="commonGenericPermission" short-description="Main permission logic">
        <set field="mainAction" from-field="parameters.mainAction"/>
        <if-empty field-name="mainAction">
            <add-error><fail-message message="In the permission-service element for the commonGenericPermission service the main-action attribute was missing but is required"/></add-error>
            <check-errors/>
        </if-empty>
        <if-has-permission permission="COMMON" action="_${parameters.mainAction}">
            <set field="hasPermission" type="Boolean" value="true"/>
            <field-to-result field-name="hasPermission"/>
            <else>
                <property-to-field resource="CommonUiLabels" property="CommonPermissionErrorMessage" field-name="failMessage"/>
                <set field="hasPermission" type="Boolean" value="false"/>
                <field-to-result field-name="hasPermission"/>
                <field-to-result field-name="failMessage"/>
            </else>
        </if-has-permission>
    </simple-method>
    
    <simple-method method-name="createKeywordThesaurus" short-description="Create a KeywordThesaurus">
        <check-permission permission="CATALOG" action="_CREATE"><fail-message message="Security Error: to run createKeywordThesaurus you must have the CATALOG_CREATE or CATALOG_ADMIN permission"/></check-permission>
        <check-errors/>
        <make-value value-name="newEntity" entity-name="KeywordThesaurus"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <call-object-method obj-field-name="newEntity.enteredKeyword" method-name="toLowerCase" ret-field-name="newEntity.enteredKeyword"/>
        <call-object-method obj-field-name="newEntity.alternateKeyword" method-name="toLowerCase" ret-field-name="newEntity.alternateKeyword"/>
        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateKeywordThesaurus" short-description="Update a KeywordThesaurus">
        <check-permission permission="CATALOG" action="_UPDATE"><fail-message message="Security Error: to run updateKeywordThesaurus you must have the CATALOG_UPDATE or CATALOG_ADMIN permission"/></check-permission>
        <check-errors/>
        <make-value value-name="newEntity" entity-name="KeywordThesaurus"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <store-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="deleteKeywordThesaurus" short-description="Delete a KeywordThesaurus">
        <check-permission permission="CATALOG" action="_DELETE"><fail-message message="Security Error: to run deleteKeywordThesaurus you must have the CATALOG_DELETE or CATALOG_ADMIN permission"/></check-permission>
        <check-errors/>
        <make-value value-name="newEntity" entity-name="KeywordThesaurus"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <remove-by-and entity-name="KeywordThesaurus" map-name="newEntity"/>
    </simple-method>
    
    <!-- Uom Conversion service -->
    <simple-method method-name="createUomConversionDated" short-description="Create a new dated UOM conversion entity">
        <make-value value-name="newEntity" entity-name="UomConversionDated"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <create-value value-name="newEntity"/>
    </simple-method>
        
    <simple-method method-name="convertUom" short-description="Convert UOM values" login-required="false">
        <!-- base case: if both uomIds are the same, return the original value -->
        <if-compare-field field-name="parameters.uomId" operator="equals" to-field-name="parameters.uomIdTo">
            <field-to-result field-name="parameters.originalValue" result-name="convertedValue"/>
            <return/>
        </if-compare-field>

        <if-empty field-name="parameters.asOfDate">
            <now-timestamp-to-env env-name="nowTimestamp"/>
            <set field="asOfDate" from-field="nowTimestamp"/>
            <else>
                <set field="asOfDate" from-field="parameters.asOfDate"/>
            </else>
        </if-empty>
        
        <!-- first try the regular UomConversion entity (no dates) -->
        <entity-one entity-name="UomConversion" value-name="uomConversion" auto-field-map="true" use-cache="true"/>
        
        <!-- if not found, try the dated uom conversion entity -->
        <if-empty field-name="uomConversion">
            <entity-condition entity-name="UomConversionDated" list-name="uomConversions" use-cache="true">
                <condition-list combine="and">
                    <condition-expr field-name="uomId" env-name="parameters.uomId"/>
                    <condition-expr field-name="uomIdTo" env-name="parameters.uomIdTo"/>
                    <condition-expr field-name="fromDate" operator="less-equals" env-name="asOfDate"/>
                    <condition-list combine="or">
                        <condition-expr field-name="thruDate" operator="greater-equals" env-name="asOfDate"/>
                        <condition-expr field-name="thruDate" operator="equals" env-name="nullField"/>
                    </condition-list>
                </condition-list>
                    <!-- sort by descending fromDate to get newest (biggest) first -->
                <order-by field-name="-fromDate"/>
            </entity-condition>
            <first-from-list list-name="uomConversions" entry-name="uomConversion"/>
        </if-empty>
        <log level="verbose" message="using conversion factor=${uomConversion.conversionFactor}"/>
    
        <if-empty field-name="uomConversion">
            <!-- if still no uom conversion entity, then no conversion is possible -->
            <add-error><fail-property property="NoUomConversionFound" resource="CommonUiLabels"/></add-error>
            <check-errors/>        
        <else>
	         <!-- Do custom conversion, if we have customMethodId -->
	        <if-not-empty field-name="uomConversion.customMethodId">  <!-- custom conversion? -->
	            <log level="verbose" message="using custom conversion customMethodId=${uomConversion.customMethodId}"/>
	            <set field="customParms" from-field="parameters"/>
	            <set field="customParms.uomConversion" from-field="uomConversion"/>
	            <call-service service-name="convertUomCustom" in-map-name="customParms">
	                <result-to-field result-name="convertedValue"/>
	            </call-service>
	            <log level="verbose" message="Custom UoM conversion returning convertedValue=${convertedValue}"/>
	        <else>  <!-- not custom conversion -->
	            <!-- do the conversion -->
	            <calculate field-name="convertedValue" type="Double" decimal-scale="15">
	                <calcop operator="multiply">
	                    <calcop operator="get" field-name="parameters.originalValue"/>
	                    <calcop operator="get" field-name="uomConversion.conversionFactor"/>
	                </calcop> 
	            </calculate>
	        </else>
	        </if-not-empty>  <!-- custom conversion? -->
	        
	        <!-- round result, if UomConversion[Dated] so specifies -->
	        <if-not-empty field-name="uomConversion.roundingMode">
	            <calculate field-name="roundedValue" type="Double" decimal-scale="${uomConversion.decimalScale}" rounding-mode="${uomConversion.roundingMode}">
	                <calcop operator="get" field-name="convertedValue"/>
	            </calculate>
	            <set field="convertedValue" from-field="roundedValue"/>
	        </if-not-empty>
        </else>
        </if-empty>  <!-- no UomConversion or UomConversionDated found -->
        
        <!-- all done -->
        <field-to-result field-name="convertedValue"/>
        
        <log level="verbose" message="Uom conversion of [${parameters.originalValue}] from [${parameters.uomId}] to [${parameters.uomIdTo}] using conversion factor [${uomConversion.conversionFactor}], result is [${convertedValue}]"/>
    </simple-method>

    <!-- convertUomCustom: Dispatcher for calling Custom Method for UoM conversion -->
    <simple-method method-name="convertUomCustom" short-description="Convert UOM values using CustomMethod" login-required="false">
        <set field="customMethodId" from-field="parameters.uomConversion.customMethodId"/>
        <entity-one entity-name="CustomMethod" value-name="customMethod" auto-field-map="true" use-cache="true"/>
        
        <if-empty field-name="customMethod.customMethodName">
            <add-error> <fail-property property="NoCustomMethodName" resource="CommonUiLabels"/> </add-error>
            <check-errors/>
        <else>
            <log level="verbose" message="calling custom method ${customMethod.customMethodName}"/>
            <set field="args.arguments" from-field="parameters"/>
            <call-service service-name="${customMethod.customMethodName}" in-map-name="args">
                <result-to-result result-name="convertedValue"/>
            </call-service>
        </else>
        </if-empty>
    </simple-method>
</simple-methods>
