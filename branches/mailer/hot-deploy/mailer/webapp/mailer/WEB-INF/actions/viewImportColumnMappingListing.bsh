/*
 * Copyright (c) Intelliant
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  @author Intelliant (iaerp@intelliant.net)
 */
import net.intelliant.util.UtilImport;

import javolution.util.FastList;
import javolution.util.FastMap;

import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.entity.GenericValue;

importMapperId = parameters.get("importMapperId");
nameOfEntity = context.get("nameOfEntity");

importMapperGV = delegator.findByPrimaryKey("MailerImportMapper", UtilMisc.toMap("importMapperId", importMapperId));
if (importMapperGV == null) {
    context.put("validView", false);
    return;
}
context.put("importMapping", importMapperGV);
isFirstRowHeader = importMapperGV.get("isFirstRowHeader"); 
mailerImportColumnMapperList = importMapperGV.getRelated("MailerImportColumnMapper");

selectedColumnIndexMap = FastMap.newInstance();
for (GenericValue mailerImportColumnMapper : mailerImportColumnMapperList) {
	selectedColumnIndexMap.put(mailerImportColumnMapper.get("entityColName"), mailerImportColumnMapper.get("importFileColIdx"));
}

dataResourceGV = importMapperGV.getRelatedOne("Content").getRelatedOne("DataResource");
filePath = null;
if (UtilValidate.isNotEmpty(dataResourceGV)) {
	filePath = dataResourceGV.get("objectInfo");
}

if (UtilValidate.isNotEmpty(filePath)) {
	entityColumnsToIgnore = UtilMisc.toList("lastUpdatedStamp", "lastUpdatedTxStamp", "createdStamp", "createdTxStamp", "importedOnDateTime", "importedByUserLogin");
	lhsColumns = UtilImport.getEntityColumns(nameOfEntity, entityColumnsToIgnore);
	
	context.put("lhsColumns", lhsColumns);

	selectedIndexes = FastList.newInstance();
	for (Map colName : lhsColumns) {
		index = selectedColumnIndexMap.get(colName.get("entityColName"));
		selectedIndexes.add((index != null) ? index : -1);
	}
	context.put("selectedIndex", selectedIndexes);
	
	if(isFirstRowHeader != null && isFirstRowHeader.equals("Y")){
		rhsColumns = UtilImport.readExcelHeaderValues(filePath, 0);
	}else{
		rhsColumns = UtilImport.readExcelHeaderIndices(filePath, 0);
	}
	context.put("rhsColumns", rhsColumns);
}
