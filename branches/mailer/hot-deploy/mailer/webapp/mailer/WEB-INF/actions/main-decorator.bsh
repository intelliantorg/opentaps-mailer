/*
 * Copyright (c) Intelliant
 *
 * Opentaps is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Opentaps is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Opentaps.  If not, see <http://www.gnu.org/licenses/>.
 *
 *  @author Intelliant (iaerp@intelliant.net)
 */
/* main-decorator.bsh populates the global context with objects used by mailer application */
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.base.util.UtilHttp;
import org.opentaps.common.util.UtilMessage;
import org.opentaps.foundation.infrastructure.User;

if (userLogin != null) {
    globalContext.put("user", new User(userLogin, delegator));
}

// Instead of using screens to define the uiLabelMap, grab it from UtilMessage
uiLabelMap = UtilMessage.getUiLabels(locale);

// Add any uiLabels defined upstream to the top of the map
existingUiLabelMap = globalContext.get("uiLabelMap");
if (existingUiLabelMap != null) uiLabelMap.pushResourceBundle(existingUiLabelMap.getInitialResourceBundle());

globalContext.put("uiLabelMap", uiLabelMap); 

// Place the opentapsErrors map in the global context
opentapsErrors = UtilMessage.getOpentapsErrors(request);
globalContext.put("opentapsErrors", opentapsErrors);

// Add the import and include transforms
// These will enable Freemarker include loading and global macros from a remote file.
// Note that globalContext will allow access from all sections of the screen widget
loader = Thread.currentThread().getContextClassLoader();
globalContext.put("import", loader.loadClass("org.opentaps.common.template.freemarker.transform.ImportTransform").newInstance());
globalContext.put("include", loader.loadClass("org.opentaps.common.template.freemarker.transform.IncludeTransform").newInstance());
globalContext.put("paginateTransform", loader.loadClass("org.opentaps.common.webapp.transform.PaginateTransform").newInstance());

//TODO: oandreyev. This should not be here
globalContext.put("timeZone", UtilHttp.getTimeZone(request));

// Add the current state of all foldable screen areas for the user and the current screen/application combination
foldedStates = new HashMap();
if (userLogin != null) {
    screenName = parameters.get("thisRequestUri");
    prefMap = UtilMisc.toMap("application", opentapsApplicationName, "screenName", screenName, "userLoginId", userLogin.getString("userLoginId"));
    viewPrefs = delegator.findByAnd("ViewPrefAndLocation", prefMap);
    vpit = viewPrefs.iterator();
    while (vpit.hasNext()) {
        viewPref = vpit.next();
        foldedStates.put(viewPref.get("domId"), viewPref.getString("viewPrefString"));
    }
}
globalContext.put("foldedStates", foldedStates);

// Miscellaneous properties
globalContext.put("validatePostalAddresses", "true".equals(configProperties.get("opentaps.validatePostalAddresses")));
globalContext.put("enableInternalMessaging", "true".equals(configProperties.get("opentaps.enableInternalMessaging")));
globalContext.put("internalMessageCheckFrequencySeconds", configProperties.get("opentaps.internalMessageCheckFrequencySeconds"));
