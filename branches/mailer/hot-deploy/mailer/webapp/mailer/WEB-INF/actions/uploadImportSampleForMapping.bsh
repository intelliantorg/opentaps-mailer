import java.io.File;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javolution.util.FastMap;
import org.apache.commons.fileupload.DiskFileUpload;
import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileUpload;
import org.apache.commons.fileupload.FileUploadException;
import org.ofbiz.base.util.Debug;
import org.ofbiz.entity.util.ByteWrapper;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.base.util.UtilDateTime;
import org.ofbiz.base.util.UtilValidate;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.ofbiz.entity.model.ModelReader;
import org.ofbiz.entity.model.ModelEntity;
import org.ofbiz.entity.model.ModelField;

module = "uploadImportSampleForMapping.bsh";
dispatcher = request.getAttribute("dispatcher");
delegator = request.getAttribute("delegator");
userLogin = session.getAttribute("userLogin");
encoding = request.getCharacterEncoding();
isMultiPart = FileUpload.isMultipartContent(request);
fileAndPath = "";
multiPartMap = FastMap.newInstance();
/****
 * Ideally this enitre uploaded data file extraction should have been picked from org.ofbiz.content.layout.LayoutWorker()
 * The need to extract entity name prevents taking this approach.   
 */
if (isMultiPart) {
    DiskFileUpload upload = new DiskFileUpload();
    if (encoding != null) {
        upload.setHeaderEncoding(encoding);
    }
    upload.setSizeMax(-1);

    uploadedItems = null;
    try {
        uploadedItems = upload.parseRequest(request);
    } catch (FileUploadException e) {
        throw new EventHandlerException("Problems reading uploaded data", e);
    }
    if (uploadedItems != null) {
        Iterator i = uploadedItems.iterator();
        while (i.hasNext()) {
            FileItem item = (FileItem) i.next();
            String fieldName = item.getFieldName();
            if (item.isFormField() || item.getName() == null) {
                if (multiPartMap.containsKey(fieldName)) {
                    Object mapValue = multiPartMap.get(fieldName);
                    if (mapValue instanceof List) {
                        ((List) mapValue).add(item.getString());
                    } else if (mapValue instanceof String) {
                        List newList = new ArrayList();
                        newList.add((String) mapValue);
                        newList.add(item.getString());
                        multiPartMap.put(fieldName, newList);
                    } else {
                        Debug.logWarning("Form field found [" + fieldName + "] which was not handled!", module);
                    }
                } else {
                    if (encoding != null) {
                        try {
                            multiPartMap.put(fieldName, item.getString(encoding));
                        } catch (java.io.UnsupportedEncodingException uee){
                            Debug.logError(uee, "Unsupported Encoding, using deafault", module);
                            multiPartMap.put(fieldName, item.getString());
                        }
                    } else {
                        multiPartMap.put(fieldName, item.getString());
                    }
                }
            } else {
                String fileName = item.getName();
                if (fileName.indexOf('\\') > -1 || fileName.indexOf('/') > -1) {
                    // get just the file name IE and other browsers also pass in the local path
                    int lastIndex = fileName.lastIndexOf('\\');
                    if (lastIndex == -1) {
                        lastIndex = fileName.lastIndexOf('/');
                    }
                    if (lastIndex > -1) {
                        fileName = fileName.substring(lastIndex + 1);
                    }
                }
                input = UtilMisc.toMap("dataResourceId", delegator.getNextSeqId("DataResource"), "statusId", "CTNT_PUBLISHED");
        		input.put("createdDate", UtilDateTime.nowTimestamp());
        		input.put("createdByUserLogin", userLogin.get("userLoginId"));
        		dataResourceGV = delegator.makeValue("DataResource", input);
                dataResourceId = dataResourceGV.getString("dataResourceId");
                fileAndPath = org.ofbiz.content.data.DataResourceWorker.getDataResourceContentUploadPath();
                fileAndPath += File.separatorChar + dataResourceId;
                File parent = new File(fileAndPath);
        		if (!parent.exists()) {
        			parent.mkdir();
        		}
                fileAndPath += File.separatorChar + fileName;
                dataResourceGV.put("objectInfo", fileAndPath);
                dataResourceGV.create();
                input = UtilMisc.toMap("dataResourceId", dataResourceId, "binData", new ByteWrapper(item.get()), "dataResourceTypeId", "LOCAL_FILE", "objectInfo", fileAndPath);
            	results = dispatcher.runSync("createAnonFile", input);
		        contentId = delegator.getNextSeqId("Content");
            	input = UtilMisc.toMap("contentId", contentId, "createdDate", dataResourceGV.get("createdDate"));
		        input.put("createdDate", dataResourceGV.get("createdDate"));
		        input.put("dataResourceId", dataResourceGV.get("dataResourceId"));
		        input.put("statusId", dataResourceGV.get("statusId"));
		        input.put("contentName", dataResourceGV.get("dataResourceName"));
		        input.put("mimeTypeId", dataResourceGV.get("mimeTypeId"));
		        input.put("contentTypeId", "FILE");
		        input.put("contentName", fileName);
		        input.put("createdByUserLogin", dataResourceGV.get("createdByUserLogin"));
            	delegator.makeValue("Content", input).create();
            	context.put("contentId", contentId);
             }
        }
    }
}
if (UtilValidate.isNotEmpty(fileAndPath)) {
	ModelReader reader = delegator.getModelReader();
	ModelEntity modelEntity = reader.getModelEntity(multiPartMap.get("entityName"));
	Iterator fieldIterator = modelEntity.getFieldsIterator();
	lhsColumns = new ArrayList();
	colsToIgnore = context.get("entityColumnsToIgnore"); 
	while (fieldIterator.hasNext()) {
	    ModelField field = fieldIterator.next();
	    fieldDesc = field.getDescription();
	    if (UtilValidate.isEmpty(fieldDesc)) {
	    	fieldDesc = field.getName();
	    }
	    if (!colsToIgnore.contains(field.getName()) && !field.getIsPk()) {
	    	lhsColumns.add(UtilMisc.toMap("entityColName", field.getName(), "entityColDesc", fieldDesc));
	    }
	}
	context.put("lhsColumns", lhsColumns);
	
	File file = new File(fileAndPath);
	if (file != null && file.canRead()) {
		POIFSFileSystem fs = new POIFSFileSystem(new FileInputStream(file));
		HSSFWorkbook wb = new HSSFWorkbook(fs);
//		HSSFSheet sheet = wb.getSheet(wb.getActiveSheetIndex());
		HSSFSheet sheet = wb.getSheetAt(0);
		rhsColumns = new ArrayList();
		if (sheet != null) {
			HSSFRow firstRow = sheet.getRow(sheet.getFirstRowNum());
			if (firstRow != null) {
				firstRow.getPhysicalNumberOfCells();
				Iterator cells = firstRow.cellIterator();
				while (cells.hasNext()) {
					HSSFCell cell = (HSSFCell) cells.next();
					rhsColumns.add(cell.getCellNum()); // this gives the cells with data.
				}
			}
		}
		context.put("rhsColumns", rhsColumns);
	}
} else {
	Debug.logWarning("fileAndPath was empty !", module);
}