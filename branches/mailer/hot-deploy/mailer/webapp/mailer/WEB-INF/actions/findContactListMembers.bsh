
import java.util.StringTokenizer;
import java.text.SimpleDateFormat;
import java.util.GregorianCalendar;

import net.intelliant.imports.UtilImport;

import org.ofbiz.entity.GenericValue;
import org.ofbiz.entity.condition.EntityComparisonOperator;
import org.ofbiz.entity.condition.EntityConditionList;
import org.ofbiz.entity.condition.EntityExpr;
import org.ofbiz.entity.condition.EntityJoinOperator;
import org.ofbiz.entity.condition.EntityFieldValue;
import org.ofbiz.entity.condition.EntityFunction;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.base.util.UtilProperties;
import org.ofbiz.base.util.UtilHttp;
import org.ofbiz.entity.model.ModelEntity;
import org.ofbiz.entity.model.ModelReader;

import org.opentaps.common.util.UtilCommon;
import org.opentaps.common.util.UtilDate;

timeZone = UtilHttp.getTimeZone(request);
locale = UtilHttp.getLocale(request);

modelReader = ModelReader.getModelReader("default");
modelEntity = modelReader.getModelEntity("MailerRecipientAndContactListView");

searchConditionList = new ArrayList();

parametersMap = UtilHttp.getParameterMap(request);
parametersMap.remove("contactListId");
parametersMapKeys = parametersMap.keySet();

columsToIgnore = UtilMisc.toList("lastUpdatedStamp","lastUpdatedTxStamp","createdStamp","createdTxStamp");
entityColumns = UtilImport.getEntityColumns("MailerRecipient", columsToIgnore);
context.put("entityColumns", entityColumns);

for(String key : parametersMapKeys) {
	if(modelEntity.isField(key)) {
		value = parametersMap.get(key);
		modelField = modelEntity.getField(key);
		fieldType = modelField.getType();
		
		if(!UtilValidate.isEmpty(value)) {
			if("name".equals(fieldType) || "email".equals(fieldType)) {
				searchConditionList.add(new EntityExpr(new EntityFunction.UPPER(new EntityFieldValue(key)), EntityComparisonOperator.LIKE, new EntityFunction.UPPER("%"+value+"%")));
			} else {
				if("date".equals(fieldType) || "date-time".equals(fieldType)) {
					date = new SimpleDateFormat("dd/MM/yy").parse(value);
					calender = GregorianCalendar.getInstance();
					calender.setTime(date);
					searchConditionList.add(new EntityExpr(key, EntityComparisonOperator.GREATER_THAN_EQUAL_TO, calender.getTime()));
					calender.add(Calendar.DAY_OF_YEAR, 1);
					searchConditionList.add(new EntityExpr(key, EntityComparisonOperator.LESS_THAN_EQUAL_TO, calender.getTime()));					
				} else {
					searchConditionList.add(new EntityExpr(key, EntityComparisonOperator.EQUALS, value));				
				}
			}
		}
	}
}
entityCondition = new EntityConditionList(searchConditionList, EntityJoinOperator.AND);

contactListMembers = delegator.findByCondition("MailerRecipientAndContactListView", entityCondition, null, null);
context.put("contactListMembers", contactListMembers);

fieldsToSelect = new ArrayList();
fieldsToSelectHeader = new ArrayList();
tokenizer = new StringTokenizer(UtilProperties.getPropertyValue("mailer", "findcampaignListingColumns"), ", ");
modelEntity = modelReader.getModelEntity("MailerRecipient");
while(tokenizer.hasMoreTokens()) {
	modelField = modelEntity.getField(tokenizer.nextToken());
	fieldsToSelect.add(modelField.getName());
	fieldsToSelectHeader.add(modelField.getDescription());
}
context.put("contactListFields", fieldsToSelect);
context.put("contactListHeaders", fieldsToSelectHeader);
System.out.println("#### - Condition : "+entityCondition);