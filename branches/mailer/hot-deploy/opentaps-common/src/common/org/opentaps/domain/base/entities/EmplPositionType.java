package org.opentaps.domain.base.entities;

/*
* Copyright (c) 2008 - 2009 Open Source Strategies, Inc.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the Honest Public License.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* Honest Public License for more details.
*
* You should have received a copy of the Honest Public License
* along with this program; if not, write to Funambol,
* 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
*/

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity EmplPositionType.
 */
@javax.persistence.Entity
@Table(name="EMPL_POSITION_TYPE")
public class EmplPositionType extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("emplPositionTypeId", "EMPL_POSITION_TYPE_ID");
        fields.put("partyId", "PARTY_ID");
        fields.put("roleTypeId", "ROLE_TYPE_ID");
        fields.put("description", "DESCRIPTION");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
fieldMapColumns.put("EmplPositionType", fields);
}
  public static enum Fields implements EntityFieldInterface<EmplPositionType> {
    emplPositionTypeId("emplPositionTypeId"),
    partyId("partyId"),
    roleTypeId("roleTypeId"),
    description("description"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @org.hibernate.annotations.GenericGenerator(name="EmplPositionType_GEN",  strategy="org.opentaps.foundation.entity.hibernate.OpentapsIdentifierGenerator")
    @GeneratedValue(generator="EmplPositionType_GEN")   
    @Id
    
    @Column(name="EMPL_POSITION_TYPE_ID")
    private String emplPositionTypeId;
    
    @Column(name="PARTY_ID")
    private String partyId;
    
    @Column(name="ROLE_TYPE_ID")
    private String roleTypeId;
    
    @Column(name="DESCRIPTION")
    private String description;
    
    @Column(name="LAST_UPDATED_STAMP")
    private Timestamp lastUpdatedStamp;
    
    @Column(name="LAST_UPDATED_TX_STAMP")
    private Timestamp lastUpdatedTxStamp;
    
    @Column(name="CREATED_STAMP")
    private Timestamp createdStamp;
    
    @Column(name="CREATED_TX_STAMP")
    private Timestamp createdTxStamp;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="PARTY_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private Party party = null;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private RoleType roleType = null;
    private transient PartyRole partyRole = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="EMPL_POSITION_TYPE_ID")
    private List<EmplPosition> emplPositions = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="emplPositionType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="EMPL_POSITION_TYPE_ID")
    private List<EmplPositionTypeClass> emplPositionTypeClasses = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="emplPositionType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="EMPL_POSITION_TYPE_ID")
    private List<ValidResponsibility> validResponsibilitys = null;

  /**
   * Default constructor.
   */
  public EmplPositionType() {
      super();
      this.baseEntityName = "EmplPositionType";
      this.isView = false;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("emplPositionTypeId");
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public EmplPositionType(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param emplPositionTypeId the emplPositionTypeId to set
     */
    public void setEmplPositionTypeId(String emplPositionTypeId) {
        this.emplPositionTypeId = emplPositionTypeId;
    }
    /**
     * Auto generated value setter.
     * @param partyId the partyId to set
     */
    public void setPartyId(String partyId) {
        this.partyId = partyId;
    }
    /**
     * Auto generated value setter.
     * @param roleTypeId the roleTypeId to set
     */
    public void setRoleTypeId(String roleTypeId) {
        this.roleTypeId = roleTypeId;
    }
    /**
     * Auto generated value setter.
     * @param description the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getEmplPositionTypeId() {
        return this.emplPositionTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPartyId() {
        return this.partyId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getRoleTypeId() {
        return this.roleTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDescription() {
        return this.description;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }

    /**
     * Auto generated method that gets the related <code>Party</code> by the relation named <code>Party</code>.
     * @return the <code>Party</code>
     * @throws RepositoryException if an error occurs
     */
    public Party getParty() throws RepositoryException {
        if (this.party == null) {
            this.party = getRelatedOne(Party.class, "Party");
        }
        return this.party;
    }
    /**
     * Auto generated method that gets the related <code>RoleType</code> by the relation named <code>RoleType</code>.
     * @return the <code>RoleType</code>
     * @throws RepositoryException if an error occurs
     */
    public RoleType getRoleType() throws RepositoryException {
        if (this.roleType == null) {
            this.roleType = getRelatedOne(RoleType.class, "RoleType");
        }
        return this.roleType;
    }
    /**
     * Auto generated method that gets the related <code>PartyRole</code> by the relation named <code>PartyRole</code>.
     * @return the <code>PartyRole</code>
     * @throws RepositoryException if an error occurs
     */
    public PartyRole getPartyRole() throws RepositoryException {
        if (this.partyRole == null) {
            this.partyRole = getRelatedOne(PartyRole.class, "PartyRole");
        }
        return this.partyRole;
    }
    /**
     * Auto generated method that gets the related <code>EmplPosition</code> by the relation named <code>EmplPosition</code>.
     * @return the list of <code>EmplPosition</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends EmplPosition> getEmplPositions() throws RepositoryException {
        if (this.emplPositions == null) {
            this.emplPositions = getRelated(EmplPosition.class, "EmplPosition");
        }
        return this.emplPositions;
    }
    /**
     * Auto generated method that gets the related <code>EmplPositionTypeClass</code> by the relation named <code>EmplPositionTypeClass</code>.
     * @return the list of <code>EmplPositionTypeClass</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends EmplPositionTypeClass> getEmplPositionTypeClasses() throws RepositoryException {
        if (this.emplPositionTypeClasses == null) {
            this.emplPositionTypeClasses = getRelated(EmplPositionTypeClass.class, "EmplPositionTypeClass");
        }
        return this.emplPositionTypeClasses;
    }
    /**
     * Auto generated method that gets the related <code>ValidResponsibility</code> by the relation named <code>ValidResponsibility</code>.
     * @return the list of <code>ValidResponsibility</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ValidResponsibility> getValidResponsibilitys() throws RepositoryException {
        if (this.validResponsibilitys == null) {
            this.validResponsibilitys = getRelated(ValidResponsibility.class, "ValidResponsibility");
        }
        return this.validResponsibilitys;
    }

    /**
     * Auto generated value setter.
     * @param party the party to set
    */
    public void setParty(Party party) {
        this.party = party;
    }
    /**
     * Auto generated value setter.
     * @param roleType the roleType to set
    */
    public void setRoleType(RoleType roleType) {
        this.roleType = roleType;
    }
    /**
     * Auto generated value setter.
     * @param partyRole the partyRole to set
    */
    public void setPartyRole(PartyRole partyRole) {
        this.partyRole = partyRole;
    }
    /**
     * Auto generated value setter.
     * @param emplPositions the emplPositions to set
    */
    public void setEmplPositions(List<EmplPosition> emplPositions) {
        this.emplPositions = emplPositions;
    }
    /**
     * Auto generated value setter.
     * @param emplPositionTypeClasses the emplPositionTypeClasses to set
    */
    public void setEmplPositionTypeClasses(List<EmplPositionTypeClass> emplPositionTypeClasses) {
        this.emplPositionTypeClasses = emplPositionTypeClasses;
    }
    /**
     * Auto generated value setter.
     * @param validResponsibilitys the validResponsibilitys to set
    */
    public void setValidResponsibilitys(List<ValidResponsibility> validResponsibilitys) {
        this.validResponsibilitys = validResponsibilitys;
    }

    /**
     * Auto generated method that add item to collection.
     */
    public void addEmplPositionTypeClasse(EmplPositionTypeClass emplPositionTypeClasse) {
        if (this.emplPositionTypeClasses == null) {
            this.emplPositionTypeClasses = new ArrayList<EmplPositionTypeClass>();
        }
        this.emplPositionTypeClasses.add(emplPositionTypeClasse);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeEmplPositionTypeClasse(EmplPositionTypeClass emplPositionTypeClasse) {
        if (this.emplPositionTypeClasses == null) {
            return;
        }
        this.emplPositionTypeClasses.remove(emplPositionTypeClasse);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearEmplPositionTypeClasse() {
        if (this.emplPositionTypeClasses == null) {
            return;
        }
        this.emplPositionTypeClasses.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addValidResponsibility(ValidResponsibility validResponsibility) {
        if (this.validResponsibilitys == null) {
            this.validResponsibilitys = new ArrayList<ValidResponsibility>();
        }
        this.validResponsibilitys.add(validResponsibility);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeValidResponsibility(ValidResponsibility validResponsibility) {
        if (this.validResponsibilitys == null) {
            return;
        }
        this.validResponsibilitys.remove(validResponsibility);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearValidResponsibility() {
        if (this.validResponsibilitys == null) {
            return;
        }
        this.validResponsibilitys.clear();
    }

    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setEmplPositionTypeId((String) mapValue.get("emplPositionTypeId"));
        setPartyId((String) mapValue.get("partyId"));
        setRoleTypeId((String) mapValue.get("roleTypeId"));
        setDescription((String) mapValue.get("description"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("emplPositionTypeId", getEmplPositionTypeId());
        mapValue.put("partyId", getPartyId());
        mapValue.put("roleTypeId", getRoleTypeId());
        mapValue.put("description", getDescription());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        return mapValue;
    }


}
