package org.opentaps.domain.base.entities;

/*
* Copyright (c) 2008 - 2009 Open Source Strategies, Inc.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the Honest Public License.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* Honest Public License for more details.
*
* You should have received a copy of the Honest Public License
* along with this program; if not, write to Funambol,
* 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
*/

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity PartyClassificationGroup.
 */
@javax.persistence.Entity
@Table(name="PARTY_CLASSIFICATION_GROUP")
public class PartyClassificationGroup extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("partyClassificationGroupId", "PARTY_CLASSIFICATION_GROUP_ID");
        fields.put("partyClassificationTypeId", "PARTY_CLASSIFICATION_TYPE_ID");
        fields.put("parentGroupId", "PARENT_GROUP_ID");
        fields.put("description", "DESCRIPTION");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
fieldMapColumns.put("PartyClassificationGroup", fields);
}
  public static enum Fields implements EntityFieldInterface<PartyClassificationGroup> {
    partyClassificationGroupId("partyClassificationGroupId"),
    partyClassificationTypeId("partyClassificationTypeId"),
    parentGroupId("parentGroupId"),
    description("description"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @org.hibernate.annotations.GenericGenerator(name="PartyClassificationGroup_GEN",  strategy="org.opentaps.foundation.entity.hibernate.OpentapsIdentifierGenerator")
    @GeneratedValue(generator="PartyClassificationGroup_GEN")   
    @Id
    
    @Column(name="PARTY_CLASSIFICATION_GROUP_ID")
    private String partyClassificationGroupId;
    
    @Column(name="PARTY_CLASSIFICATION_TYPE_ID")
    private String partyClassificationTypeId;
    
    @Column(name="PARENT_GROUP_ID")
    private String parentGroupId;
    
    @Column(name="DESCRIPTION")
    private String description;
    
    @Column(name="LAST_UPDATED_STAMP")
    private Timestamp lastUpdatedStamp;
    
    @Column(name="LAST_UPDATED_TX_STAMP")
    private Timestamp lastUpdatedTxStamp;
    
    @Column(name="CREATED_STAMP")
    private Timestamp createdStamp;
    
    @Column(name="CREATED_TX_STAMP")
    private Timestamp createdTxStamp;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="PARENT_GROUP_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private PartyClassificationGroup parentPartyClassificationGroup = null;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="PARTY_CLASSIFICATION_TYPE_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private PartyClassificationType partyClassificationType = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="FROM_PARTY_CLASS_GROUP_ID")
    private List<Agreement> fromAgreements = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="TO_PARTY_CLASS_GROUP_ID")
    private List<Agreement> toAgreements = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="PARTY_CLASSIFICATION_GROUP_ID")
    private List<AgreementTerm> agreementTerms = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="partyClassificationGroup", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="PARTY_CLASSIFICATION_GROUP_ID")
    private List<MarketInterest> marketInterests = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="partyClassificationGroup", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="PARTY_CLASSIFICATION_GROUP_ID")
    private List<PartyClassification> partyClassifications = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="PARENT_GROUP_ID")
    private List<PartyClassificationGroup> childPartyClassificationGroups = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="partyClassificationGroup", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="PARTY_CLASSIFICATION_GROUP_ID")
    private List<SegmentGroupClassification> segmentGroupClassifications = null;

  /**
   * Default constructor.
   */
  public PartyClassificationGroup() {
      super();
      this.baseEntityName = "PartyClassificationGroup";
      this.isView = false;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("partyClassificationGroupId");
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public PartyClassificationGroup(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param partyClassificationGroupId the partyClassificationGroupId to set
     */
    public void setPartyClassificationGroupId(String partyClassificationGroupId) {
        this.partyClassificationGroupId = partyClassificationGroupId;
    }
    /**
     * Auto generated value setter.
     * @param partyClassificationTypeId the partyClassificationTypeId to set
     */
    public void setPartyClassificationTypeId(String partyClassificationTypeId) {
        this.partyClassificationTypeId = partyClassificationTypeId;
    }
    /**
     * Auto generated value setter.
     * @param parentGroupId the parentGroupId to set
     */
    public void setParentGroupId(String parentGroupId) {
        this.parentGroupId = parentGroupId;
    }
    /**
     * Auto generated value setter.
     * @param description the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPartyClassificationGroupId() {
        return this.partyClassificationGroupId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPartyClassificationTypeId() {
        return this.partyClassificationTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getParentGroupId() {
        return this.parentGroupId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDescription() {
        return this.description;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }

    /**
     * Auto generated method that gets the related <code>PartyClassificationGroup</code> by the relation named <code>ParentPartyClassificationGroup</code>.
     * @return the <code>PartyClassificationGroup</code>
     * @throws RepositoryException if an error occurs
     */
    public PartyClassificationGroup getParentPartyClassificationGroup() throws RepositoryException {
        if (this.parentPartyClassificationGroup == null) {
            this.parentPartyClassificationGroup = getRelatedOne(PartyClassificationGroup.class, "ParentPartyClassificationGroup");
        }
        return this.parentPartyClassificationGroup;
    }
    /**
     * Auto generated method that gets the related <code>PartyClassificationType</code> by the relation named <code>PartyClassificationType</code>.
     * @return the <code>PartyClassificationType</code>
     * @throws RepositoryException if an error occurs
     */
    public PartyClassificationType getPartyClassificationType() throws RepositoryException {
        if (this.partyClassificationType == null) {
            this.partyClassificationType = getRelatedOne(PartyClassificationType.class, "PartyClassificationType");
        }
        return this.partyClassificationType;
    }
    /**
     * Auto generated method that gets the related <code>Agreement</code> by the relation named <code>FromAgreement</code>.
     * @return the list of <code>Agreement</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Agreement> getFromAgreements() throws RepositoryException {
        if (this.fromAgreements == null) {
            this.fromAgreements = getRelated(Agreement.class, "FromAgreement");
        }
        return this.fromAgreements;
    }
    /**
     * Auto generated method that gets the related <code>Agreement</code> by the relation named <code>ToAgreement</code>.
     * @return the list of <code>Agreement</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Agreement> getToAgreements() throws RepositoryException {
        if (this.toAgreements == null) {
            this.toAgreements = getRelated(Agreement.class, "ToAgreement");
        }
        return this.toAgreements;
    }
    /**
     * Auto generated method that gets the related <code>AgreementTerm</code> by the relation named <code>AgreementTerm</code>.
     * @return the list of <code>AgreementTerm</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AgreementTerm> getAgreementTerms() throws RepositoryException {
        if (this.agreementTerms == null) {
            this.agreementTerms = getRelated(AgreementTerm.class, "AgreementTerm");
        }
        return this.agreementTerms;
    }
    /**
     * Auto generated method that gets the related <code>MarketInterest</code> by the relation named <code>MarketInterest</code>.
     * @return the list of <code>MarketInterest</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends MarketInterest> getMarketInterests() throws RepositoryException {
        if (this.marketInterests == null) {
            this.marketInterests = getRelated(MarketInterest.class, "MarketInterest");
        }
        return this.marketInterests;
    }
    /**
     * Auto generated method that gets the related <code>PartyClassification</code> by the relation named <code>PartyClassification</code>.
     * @return the list of <code>PartyClassification</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyClassification> getPartyClassifications() throws RepositoryException {
        if (this.partyClassifications == null) {
            this.partyClassifications = getRelated(PartyClassification.class, "PartyClassification");
        }
        return this.partyClassifications;
    }
    /**
     * Auto generated method that gets the related <code>PartyClassificationGroup</code> by the relation named <code>ChildPartyClassificationGroup</code>.
     * @return the list of <code>PartyClassificationGroup</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyClassificationGroup> getChildPartyClassificationGroups() throws RepositoryException {
        if (this.childPartyClassificationGroups == null) {
            this.childPartyClassificationGroups = getRelated(PartyClassificationGroup.class, "ChildPartyClassificationGroup");
        }
        return this.childPartyClassificationGroups;
    }
    /**
     * Auto generated method that gets the related <code>SegmentGroupClassification</code> by the relation named <code>SegmentGroupClassification</code>.
     * @return the list of <code>SegmentGroupClassification</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SegmentGroupClassification> getSegmentGroupClassifications() throws RepositoryException {
        if (this.segmentGroupClassifications == null) {
            this.segmentGroupClassifications = getRelated(SegmentGroupClassification.class, "SegmentGroupClassification");
        }
        return this.segmentGroupClassifications;
    }

    /**
     * Auto generated value setter.
     * @param parentPartyClassificationGroup the parentPartyClassificationGroup to set
    */
    public void setParentPartyClassificationGroup(PartyClassificationGroup parentPartyClassificationGroup) {
        this.parentPartyClassificationGroup = parentPartyClassificationGroup;
    }
    /**
     * Auto generated value setter.
     * @param partyClassificationType the partyClassificationType to set
    */
    public void setPartyClassificationType(PartyClassificationType partyClassificationType) {
        this.partyClassificationType = partyClassificationType;
    }
    /**
     * Auto generated value setter.
     * @param fromAgreements the fromAgreements to set
    */
    public void setFromAgreements(List<Agreement> fromAgreements) {
        this.fromAgreements = fromAgreements;
    }
    /**
     * Auto generated value setter.
     * @param toAgreements the toAgreements to set
    */
    public void setToAgreements(List<Agreement> toAgreements) {
        this.toAgreements = toAgreements;
    }
    /**
     * Auto generated value setter.
     * @param agreementTerms the agreementTerms to set
    */
    public void setAgreementTerms(List<AgreementTerm> agreementTerms) {
        this.agreementTerms = agreementTerms;
    }
    /**
     * Auto generated value setter.
     * @param marketInterests the marketInterests to set
    */
    public void setMarketInterests(List<MarketInterest> marketInterests) {
        this.marketInterests = marketInterests;
    }
    /**
     * Auto generated value setter.
     * @param partyClassifications the partyClassifications to set
    */
    public void setPartyClassifications(List<PartyClassification> partyClassifications) {
        this.partyClassifications = partyClassifications;
    }
    /**
     * Auto generated value setter.
     * @param childPartyClassificationGroups the childPartyClassificationGroups to set
    */
    public void setChildPartyClassificationGroups(List<PartyClassificationGroup> childPartyClassificationGroups) {
        this.childPartyClassificationGroups = childPartyClassificationGroups;
    }
    /**
     * Auto generated value setter.
     * @param segmentGroupClassifications the segmentGroupClassifications to set
    */
    public void setSegmentGroupClassifications(List<SegmentGroupClassification> segmentGroupClassifications) {
        this.segmentGroupClassifications = segmentGroupClassifications;
    }

    /**
     * Auto generated method that add item to collection.
     */
    public void addMarketInterest(MarketInterest marketInterest) {
        if (this.marketInterests == null) {
            this.marketInterests = new ArrayList<MarketInterest>();
        }
        this.marketInterests.add(marketInterest);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeMarketInterest(MarketInterest marketInterest) {
        if (this.marketInterests == null) {
            return;
        }
        this.marketInterests.remove(marketInterest);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearMarketInterest() {
        if (this.marketInterests == null) {
            return;
        }
        this.marketInterests.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyClassification(PartyClassification partyClassification) {
        if (this.partyClassifications == null) {
            this.partyClassifications = new ArrayList<PartyClassification>();
        }
        this.partyClassifications.add(partyClassification);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyClassification(PartyClassification partyClassification) {
        if (this.partyClassifications == null) {
            return;
        }
        this.partyClassifications.remove(partyClassification);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyClassification() {
        if (this.partyClassifications == null) {
            return;
        }
        this.partyClassifications.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addSegmentGroupClassification(SegmentGroupClassification segmentGroupClassification) {
        if (this.segmentGroupClassifications == null) {
            this.segmentGroupClassifications = new ArrayList<SegmentGroupClassification>();
        }
        this.segmentGroupClassifications.add(segmentGroupClassification);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeSegmentGroupClassification(SegmentGroupClassification segmentGroupClassification) {
        if (this.segmentGroupClassifications == null) {
            return;
        }
        this.segmentGroupClassifications.remove(segmentGroupClassification);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearSegmentGroupClassification() {
        if (this.segmentGroupClassifications == null) {
            return;
        }
        this.segmentGroupClassifications.clear();
    }

    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setPartyClassificationGroupId((String) mapValue.get("partyClassificationGroupId"));
        setPartyClassificationTypeId((String) mapValue.get("partyClassificationTypeId"));
        setParentGroupId((String) mapValue.get("parentGroupId"));
        setDescription((String) mapValue.get("description"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("partyClassificationGroupId", getPartyClassificationGroupId());
        mapValue.put("partyClassificationTypeId", getPartyClassificationTypeId());
        mapValue.put("parentGroupId", getParentGroupId());
        mapValue.put("description", getDescription());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        return mapValue;
    }


}
