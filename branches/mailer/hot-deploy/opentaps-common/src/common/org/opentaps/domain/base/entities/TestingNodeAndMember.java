package org.opentaps.domain.base.entities;

/*
* Copyright (c) 2008 - 2009 Open Source Strategies, Inc.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the Honest Public License.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* Honest Public License for more details.
*
* You should have received a copy of the Honest Public License
* along with this program; if not, write to Funambol,
* 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
*/

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity TestingNodeAndMember.
 */
@javax.persistence.Entity
@NamedNativeQuery(name="selectTestingNodeAndMembers", query="SELECT TN.TESTING_NODE_ID AS \"testingNodeId\",TN.PRIMARY_PARENT_NODE_ID AS \"primaryParentNodeId\",TN.DESCRIPTION AS \"description\",TNM.TESTING_ID AS \"testingId\",TNM.FROM_DATE AS \"fromDate\",TNM.THRU_DATE AS \"thruDate\" FROM TESTING_NODE TN INNER JOIN TESTING_NODE_MEMBER TNM ON TN.TESTING_NODE_ID = TNM.TESTING_NODE_ID", resultSetMapping="TestingNodeAndMemberMapping")
@SqlResultSetMapping(name="TestingNodeAndMemberMapping", entities={
@EntityResult(entityClass=TestingNodeAndMember.class, fields = {
@FieldResult(name="testingNodeId", column="testingNodeId")
,@FieldResult(name="primaryParentNodeId", column="primaryParentNodeId")
,@FieldResult(name="description", column="description")
,@FieldResult(name="testingId", column="testingId")
,@FieldResult(name="fromDate", column="fromDate")
,@FieldResult(name="thruDate", column="thruDate")
})})
@org.hibernate.annotations.Entity(mutable = false)
@org.hibernate.annotations.AccessType("field")
public class TestingNodeAndMember extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("testingNodeId", "TN.TESTING_NODE_ID");
        fields.put("primaryParentNodeId", "TN.PRIMARY_PARENT_NODE_ID");
        fields.put("description", "TN.DESCRIPTION");
        fields.put("testingId", "TNM.TESTING_ID");
        fields.put("fromDate", "TNM.FROM_DATE");
        fields.put("thruDate", "TNM.THRU_DATE");
fieldMapColumns.put("TestingNodeAndMember", fields);
}
  public static enum Fields implements EntityFieldInterface<TestingNodeAndMember> {
    testingNodeId("testingNodeId"),
    primaryParentNodeId("primaryParentNodeId"),
    description("description"),
    testingId("testingId"),
    fromDate("fromDate"),
    thruDate("thruDate");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @Id
    
    private String testingNodeId;
    
    
    private String primaryParentNodeId;
    
    
    private String description;
    
    
    private String testingId;
    
    
    private Timestamp fromDate;
    
    
    private Timestamp thruDate;
    private transient TestingNodeMember testingNodeMember = null;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="TESTING_NODE_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private TestingNode testingNode = null;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="TESTING_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private Testing testing = null;

  /**
   * Default constructor.
   */
  public TestingNodeAndMember() {
      super();
      this.baseEntityName = "TestingNodeAndMember";
      this.isView = true;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("testingNodeId");this.primaryKeyNames.add("testingId");this.primaryKeyNames.add("fromDate");
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public TestingNodeAndMember(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * This is a view-entity, so the setter methods will be private to this class and for use in its fromMap constructor only
     */
    /**
     * Auto generated value setter.
     * @param testingNodeId the testingNodeId to set
     */
    private void setTestingNodeId(String testingNodeId) {
        this.testingNodeId = testingNodeId;
    }
    /**
     * Auto generated value setter.
     * @param primaryParentNodeId the primaryParentNodeId to set
     */
    private void setPrimaryParentNodeId(String primaryParentNodeId) {
        this.primaryParentNodeId = primaryParentNodeId;
    }
    /**
     * Auto generated value setter.
     * @param description the description to set
     */
    private void setDescription(String description) {
        this.description = description;
    }
    /**
     * Auto generated value setter.
     * @param testingId the testingId to set
     */
    private void setTestingId(String testingId) {
        this.testingId = testingId;
    }
    /**
     * Auto generated value setter.
     * @param fromDate the fromDate to set
     */
    private void setFromDate(Timestamp fromDate) {
        this.fromDate = fromDate;
    }
    /**
     * Auto generated value setter.
     * @param thruDate the thruDate to set
     */
    private void setThruDate(Timestamp thruDate) {
        this.thruDate = thruDate;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getTestingNodeId() {
        return this.testingNodeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPrimaryParentNodeId() {
        return this.primaryParentNodeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDescription() {
        return this.description;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getTestingId() {
        return this.testingId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getFromDate() {
        return this.fromDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getThruDate() {
        return this.thruDate;
    }

    /**
     * Auto generated method that gets the related <code>TestingNodeMember</code> by the relation named <code>TestingNodeMember</code>.
     * @return the <code>TestingNodeMember</code>
     * @throws RepositoryException if an error occurs
     */
    public TestingNodeMember getTestingNodeMember() throws RepositoryException {
        if (this.testingNodeMember == null) {
            this.testingNodeMember = getRelatedOne(TestingNodeMember.class, "TestingNodeMember");
        }
        return this.testingNodeMember;
    }
    /**
     * Auto generated method that gets the related <code>TestingNode</code> by the relation named <code>TestingNode</code>.
     * @return the <code>TestingNode</code>
     * @throws RepositoryException if an error occurs
     */
    public TestingNode getTestingNode() throws RepositoryException {
        if (this.testingNode == null) {
            this.testingNode = getRelatedOne(TestingNode.class, "TestingNode");
        }
        return this.testingNode;
    }
    /**
     * Auto generated method that gets the related <code>Testing</code> by the relation named <code>Testing</code>.
     * @return the <code>Testing</code>
     * @throws RepositoryException if an error occurs
     */
    public Testing getTesting() throws RepositoryException {
        if (this.testing == null) {
            this.testing = getRelatedOne(Testing.class, "Testing");
        }
        return this.testing;
    }

    /**
     * Auto generated value setter.
     * @param testingNodeMember the testingNodeMember to set
    */
    public void setTestingNodeMember(TestingNodeMember testingNodeMember) {
        this.testingNodeMember = testingNodeMember;
    }
    /**
     * Auto generated value setter.
     * @param testingNode the testingNode to set
    */
    public void setTestingNode(TestingNode testingNode) {
        this.testingNode = testingNode;
    }
    /**
     * Auto generated value setter.
     * @param testing the testing to set
    */
    public void setTesting(Testing testing) {
        this.testing = testing;
    }


    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setTestingNodeId((String) mapValue.get("testingNodeId"));
        setPrimaryParentNodeId((String) mapValue.get("primaryParentNodeId"));
        setDescription((String) mapValue.get("description"));
        setTestingId((String) mapValue.get("testingId"));
        setFromDate((Timestamp) mapValue.get("fromDate"));
        setThruDate((Timestamp) mapValue.get("thruDate"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("testingNodeId", getTestingNodeId());
        mapValue.put("primaryParentNodeId", getPrimaryParentNodeId());
        mapValue.put("description", getDescription());
        mapValue.put("testingId", getTestingId());
        mapValue.put("fromDate", getFromDate());
        mapValue.put("thruDate", getThruDate());
        return mapValue;
    }


}
