package org.opentaps.domain.base.entities;

/*
* Copyright (c) 2008 - 2009 Open Source Strategies, Inc.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the Honest Public License.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* Honest Public License for more details.
*
* You should have received a copy of the Honest Public License
* along with this program; if not, write to Funambol,
* 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
*/

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity Survey.
 */
@javax.persistence.Entity
@Table(name="SURVEY")
public class Survey extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("surveyId", "SURVEY_ID");
        fields.put("surveyName", "SURVEY_NAME");
        fields.put("description", "DESCRIPTION");
        fields.put("comments", "COMMENTS");
        fields.put("submitCaption", "SUBMIT_CAPTION");
        fields.put("responseService", "RESPONSE_SERVICE");
        fields.put("isAnonymous", "IS_ANONYMOUS");
        fields.put("allowMultiple", "ALLOW_MULTIPLE");
        fields.put("allowUpdate", "ALLOW_UPDATE");
        fields.put("acroFormContentId", "ACRO_FORM_CONTENT_ID");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
fieldMapColumns.put("Survey", fields);
}
  public static enum Fields implements EntityFieldInterface<Survey> {
    surveyId("surveyId"),
    surveyName("surveyName"),
    description("description"),
    comments("comments"),
    submitCaption("submitCaption"),
    responseService("responseService"),
    isAnonymous("isAnonymous"),
    allowMultiple("allowMultiple"),
    allowUpdate("allowUpdate"),
    acroFormContentId("acroFormContentId"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @org.hibernate.annotations.GenericGenerator(name="Survey_GEN",  strategy="org.opentaps.foundation.entity.hibernate.OpentapsIdentifierGenerator")
    @GeneratedValue(generator="Survey_GEN")   
    @Id
    
    @Column(name="SURVEY_ID")
    private String surveyId;
    
    @Column(name="SURVEY_NAME")
    private String surveyName;
    
    @Column(name="DESCRIPTION")
    private String description;
    
    @Column(name="COMMENTS")
    private String comments;
    
    @Column(name="SUBMIT_CAPTION")
    private String submitCaption;
    
    @Column(name="RESPONSE_SERVICE")
    private String responseService;
    
    @Column(name="IS_ANONYMOUS")
    private String isAnonymous;
    
    @Column(name="ALLOW_MULTIPLE")
    private String allowMultiple;
    
    @Column(name="ALLOW_UPDATE")
    private String allowUpdate;
    
    @Column(name="ACRO_FORM_CONTENT_ID")
    private String acroFormContentId;
    
    @Column(name="LAST_UPDATED_STAMP")
    private Timestamp lastUpdatedStamp;
    
    @Column(name="LAST_UPDATED_TX_STAMP")
    private Timestamp lastUpdatedTxStamp;
    
    @Column(name="CREATED_STAMP")
    private Timestamp createdStamp;
    
    @Column(name="CREATED_TX_STAMP")
    private Timestamp createdTxStamp;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="PURCHASE_SURVEY_ID")
    private List<ProductStoreFinActSetting> productStoreFinActSettings = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="SURVEY_ID")
    private List<ProductStoreSurveyAppl> productStoreSurveyAppls = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="survey", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="SURVEY_ID")
    private List<SurveyMultiResp> surveyMultiResps = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="survey", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="SURVEY_ID")
    private List<SurveyPage> surveyPages = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="survey", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="SURVEY_ID")
    private List<SurveyQuestionAppl> surveyQuestionAppls = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="SURVEY_ID")
    private List<SurveyResponse> surveyResponses = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="survey", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="SURVEY_ID")
    private List<SurveyTrigger> surveyTriggers = null;

  /**
   * Default constructor.
   */
  public Survey() {
      super();
      this.baseEntityName = "Survey";
      this.isView = false;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("surveyId");
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public Survey(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param surveyId the surveyId to set
     */
    public void setSurveyId(String surveyId) {
        this.surveyId = surveyId;
    }
    /**
     * Auto generated value setter.
     * @param surveyName the surveyName to set
     */
    public void setSurveyName(String surveyName) {
        this.surveyName = surveyName;
    }
    /**
     * Auto generated value setter.
     * @param description the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }
    /**
     * Auto generated value setter.
     * @param comments the comments to set
     */
    public void setComments(String comments) {
        this.comments = comments;
    }
    /**
     * Auto generated value setter.
     * @param submitCaption the submitCaption to set
     */
    public void setSubmitCaption(String submitCaption) {
        this.submitCaption = submitCaption;
    }
    /**
     * Auto generated value setter.
     * @param responseService the responseService to set
     */
    public void setResponseService(String responseService) {
        this.responseService = responseService;
    }
    /**
     * Auto generated value setter.
     * @param isAnonymous the isAnonymous to set
     */
    public void setIsAnonymous(String isAnonymous) {
        this.isAnonymous = isAnonymous;
    }
    /**
     * Auto generated value setter.
     * @param allowMultiple the allowMultiple to set
     */
    public void setAllowMultiple(String allowMultiple) {
        this.allowMultiple = allowMultiple;
    }
    /**
     * Auto generated value setter.
     * @param allowUpdate the allowUpdate to set
     */
    public void setAllowUpdate(String allowUpdate) {
        this.allowUpdate = allowUpdate;
    }
    /**
     * Auto generated value setter.
     * @param acroFormContentId the acroFormContentId to set
     */
    public void setAcroFormContentId(String acroFormContentId) {
        this.acroFormContentId = acroFormContentId;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getSurveyId() {
        return this.surveyId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getSurveyName() {
        return this.surveyName;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDescription() {
        return this.description;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getComments() {
        return this.comments;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getSubmitCaption() {
        return this.submitCaption;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getResponseService() {
        return this.responseService;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getIsAnonymous() {
        return this.isAnonymous;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getAllowMultiple() {
        return this.allowMultiple;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getAllowUpdate() {
        return this.allowUpdate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getAcroFormContentId() {
        return this.acroFormContentId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }

    /**
     * Auto generated method that gets the related <code>ProductStoreFinActSetting</code> by the relation named <code>ProductStoreFinActSetting</code>.
     * @return the list of <code>ProductStoreFinActSetting</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductStoreFinActSetting> getProductStoreFinActSettings() throws RepositoryException {
        if (this.productStoreFinActSettings == null) {
            this.productStoreFinActSettings = getRelated(ProductStoreFinActSetting.class, "ProductStoreFinActSetting");
        }
        return this.productStoreFinActSettings;
    }
    /**
     * Auto generated method that gets the related <code>ProductStoreSurveyAppl</code> by the relation named <code>ProductStoreSurveyAppl</code>.
     * @return the list of <code>ProductStoreSurveyAppl</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductStoreSurveyAppl> getProductStoreSurveyAppls() throws RepositoryException {
        if (this.productStoreSurveyAppls == null) {
            this.productStoreSurveyAppls = getRelated(ProductStoreSurveyAppl.class, "ProductStoreSurveyAppl");
        }
        return this.productStoreSurveyAppls;
    }
    /**
     * Auto generated method that gets the related <code>SurveyMultiResp</code> by the relation named <code>SurveyMultiResp</code>.
     * @return the list of <code>SurveyMultiResp</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SurveyMultiResp> getSurveyMultiResps() throws RepositoryException {
        if (this.surveyMultiResps == null) {
            this.surveyMultiResps = getRelated(SurveyMultiResp.class, "SurveyMultiResp");
        }
        return this.surveyMultiResps;
    }
    /**
     * Auto generated method that gets the related <code>SurveyPage</code> by the relation named <code>SurveyPage</code>.
     * @return the list of <code>SurveyPage</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SurveyPage> getSurveyPages() throws RepositoryException {
        if (this.surveyPages == null) {
            this.surveyPages = getRelated(SurveyPage.class, "SurveyPage");
        }
        return this.surveyPages;
    }
    /**
     * Auto generated method that gets the related <code>SurveyQuestionAppl</code> by the relation named <code>SurveyQuestionAppl</code>.
     * @return the list of <code>SurveyQuestionAppl</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SurveyQuestionAppl> getSurveyQuestionAppls() throws RepositoryException {
        if (this.surveyQuestionAppls == null) {
            this.surveyQuestionAppls = getRelated(SurveyQuestionAppl.class, "SurveyQuestionAppl");
        }
        return this.surveyQuestionAppls;
    }
    /**
     * Auto generated method that gets the related <code>SurveyResponse</code> by the relation named <code>SurveyResponse</code>.
     * @return the list of <code>SurveyResponse</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SurveyResponse> getSurveyResponses() throws RepositoryException {
        if (this.surveyResponses == null) {
            this.surveyResponses = getRelated(SurveyResponse.class, "SurveyResponse");
        }
        return this.surveyResponses;
    }
    /**
     * Auto generated method that gets the related <code>SurveyTrigger</code> by the relation named <code>SurveyTrigger</code>.
     * @return the list of <code>SurveyTrigger</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SurveyTrigger> getSurveyTriggers() throws RepositoryException {
        if (this.surveyTriggers == null) {
            this.surveyTriggers = getRelated(SurveyTrigger.class, "SurveyTrigger");
        }
        return this.surveyTriggers;
    }

    /**
     * Auto generated value setter.
     * @param productStoreFinActSettings the productStoreFinActSettings to set
    */
    public void setProductStoreFinActSettings(List<ProductStoreFinActSetting> productStoreFinActSettings) {
        this.productStoreFinActSettings = productStoreFinActSettings;
    }
    /**
     * Auto generated value setter.
     * @param productStoreSurveyAppls the productStoreSurveyAppls to set
    */
    public void setProductStoreSurveyAppls(List<ProductStoreSurveyAppl> productStoreSurveyAppls) {
        this.productStoreSurveyAppls = productStoreSurveyAppls;
    }
    /**
     * Auto generated value setter.
     * @param surveyMultiResps the surveyMultiResps to set
    */
    public void setSurveyMultiResps(List<SurveyMultiResp> surveyMultiResps) {
        this.surveyMultiResps = surveyMultiResps;
    }
    /**
     * Auto generated value setter.
     * @param surveyPages the surveyPages to set
    */
    public void setSurveyPages(List<SurveyPage> surveyPages) {
        this.surveyPages = surveyPages;
    }
    /**
     * Auto generated value setter.
     * @param surveyQuestionAppls the surveyQuestionAppls to set
    */
    public void setSurveyQuestionAppls(List<SurveyQuestionAppl> surveyQuestionAppls) {
        this.surveyQuestionAppls = surveyQuestionAppls;
    }
    /**
     * Auto generated value setter.
     * @param surveyResponses the surveyResponses to set
    */
    public void setSurveyResponses(List<SurveyResponse> surveyResponses) {
        this.surveyResponses = surveyResponses;
    }
    /**
     * Auto generated value setter.
     * @param surveyTriggers the surveyTriggers to set
    */
    public void setSurveyTriggers(List<SurveyTrigger> surveyTriggers) {
        this.surveyTriggers = surveyTriggers;
    }

    /**
     * Auto generated method that add item to collection.
     */
    public void addSurveyMultiResp(SurveyMultiResp surveyMultiResp) {
        if (this.surveyMultiResps == null) {
            this.surveyMultiResps = new ArrayList<SurveyMultiResp>();
        }
        this.surveyMultiResps.add(surveyMultiResp);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeSurveyMultiResp(SurveyMultiResp surveyMultiResp) {
        if (this.surveyMultiResps == null) {
            return;
        }
        this.surveyMultiResps.remove(surveyMultiResp);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearSurveyMultiResp() {
        if (this.surveyMultiResps == null) {
            return;
        }
        this.surveyMultiResps.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addSurveyPage(SurveyPage surveyPage) {
        if (this.surveyPages == null) {
            this.surveyPages = new ArrayList<SurveyPage>();
        }
        this.surveyPages.add(surveyPage);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeSurveyPage(SurveyPage surveyPage) {
        if (this.surveyPages == null) {
            return;
        }
        this.surveyPages.remove(surveyPage);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearSurveyPage() {
        if (this.surveyPages == null) {
            return;
        }
        this.surveyPages.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addSurveyQuestionAppl(SurveyQuestionAppl surveyQuestionAppl) {
        if (this.surveyQuestionAppls == null) {
            this.surveyQuestionAppls = new ArrayList<SurveyQuestionAppl>();
        }
        this.surveyQuestionAppls.add(surveyQuestionAppl);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeSurveyQuestionAppl(SurveyQuestionAppl surveyQuestionAppl) {
        if (this.surveyQuestionAppls == null) {
            return;
        }
        this.surveyQuestionAppls.remove(surveyQuestionAppl);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearSurveyQuestionAppl() {
        if (this.surveyQuestionAppls == null) {
            return;
        }
        this.surveyQuestionAppls.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addSurveyTrigger(SurveyTrigger surveyTrigger) {
        if (this.surveyTriggers == null) {
            this.surveyTriggers = new ArrayList<SurveyTrigger>();
        }
        this.surveyTriggers.add(surveyTrigger);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeSurveyTrigger(SurveyTrigger surveyTrigger) {
        if (this.surveyTriggers == null) {
            return;
        }
        this.surveyTriggers.remove(surveyTrigger);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearSurveyTrigger() {
        if (this.surveyTriggers == null) {
            return;
        }
        this.surveyTriggers.clear();
    }

    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setSurveyId((String) mapValue.get("surveyId"));
        setSurveyName((String) mapValue.get("surveyName"));
        setDescription((String) mapValue.get("description"));
        setComments((String) mapValue.get("comments"));
        setSubmitCaption((String) mapValue.get("submitCaption"));
        setResponseService((String) mapValue.get("responseService"));
        setIsAnonymous((String) mapValue.get("isAnonymous"));
        setAllowMultiple((String) mapValue.get("allowMultiple"));
        setAllowUpdate((String) mapValue.get("allowUpdate"));
        setAcroFormContentId((String) mapValue.get("acroFormContentId"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("surveyId", getSurveyId());
        mapValue.put("surveyName", getSurveyName());
        mapValue.put("description", getDescription());
        mapValue.put("comments", getComments());
        mapValue.put("submitCaption", getSubmitCaption());
        mapValue.put("responseService", getResponseService());
        mapValue.put("isAnonymous", getIsAnonymous());
        mapValue.put("allowMultiple", getAllowMultiple());
        mapValue.put("allowUpdate", getAllowUpdate());
        mapValue.put("acroFormContentId", getAcroFormContentId());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        return mapValue;
    }


}
