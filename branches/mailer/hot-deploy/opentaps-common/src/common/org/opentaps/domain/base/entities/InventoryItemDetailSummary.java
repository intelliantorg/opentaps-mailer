package org.opentaps.domain.base.entities;

/*
* Copyright (c) 2008 - 2009 Open Source Strategies, Inc.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the Honest Public License.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* Honest Public License for more details.
*
* You should have received a copy of the Honest Public License
* along with this program; if not, write to Funambol,
* 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
*/

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import java.lang.String;
import java.math.BigDecimal;

/**
 * Auto generated base entity InventoryItemDetailSummary.
 */
@javax.persistence.Entity
@NamedNativeQuery(name="selectInventoryItemDetailSummarys", query="SELECT IID.INVENTORY_ITEM_ID AS \"inventoryItemId\",IID.AVAILABLE_TO_PROMISE_DIFF AS \"availableToPromiseDiff\",IID.QUANTITY_ON_HAND_DIFF AS \"quantityOnHandDiff\" FROM INVENTORY_ITEM_DETAIL IID", resultSetMapping="InventoryItemDetailSummaryMapping")
@SqlResultSetMapping(name="InventoryItemDetailSummaryMapping", entities={
@EntityResult(entityClass=InventoryItemDetailSummary.class, fields = {
@FieldResult(name="inventoryItemId", column="inventoryItemId")
,@FieldResult(name="availableToPromiseTotal", column="availableToPromiseTotal")
,@FieldResult(name="quantityOnHandTotal", column="quantityOnHandTotal")
})})
@org.hibernate.annotations.Entity(mutable = false)
@org.hibernate.annotations.AccessType("field")
public class InventoryItemDetailSummary extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("inventoryItemId", "IID.INVENTORY_ITEM_ID");
        fields.put("availableToPromiseTotal", "IID.AVAILABLE_TO_PROMISE_DIFF");
        fields.put("quantityOnHandTotal", "IID.QUANTITY_ON_HAND_DIFF");
fieldMapColumns.put("InventoryItemDetailSummary", fields);
}
  public static enum Fields implements EntityFieldInterface<InventoryItemDetailSummary> {
    inventoryItemId("inventoryItemId"),
    availableToPromiseTotal("availableToPromiseTotal"),
    quantityOnHandTotal("quantityOnHandTotal");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @Id
    
    private String inventoryItemId;
    
    
    private BigDecimal availableToPromiseTotal;
    
    
    private BigDecimal quantityOnHandTotal;

  /**
   * Default constructor.
   */
  public InventoryItemDetailSummary() {
      super();
      this.baseEntityName = "InventoryItemDetailSummary";
      this.isView = true;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("inventoryItemId");
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public InventoryItemDetailSummary(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * This is a view-entity, so the setter methods will be private to this class and for use in its fromMap constructor only
     */
    /**
     * Auto generated value setter.
     * @param inventoryItemId the inventoryItemId to set
     */
    private void setInventoryItemId(String inventoryItemId) {
        this.inventoryItemId = inventoryItemId;
    }
    /**
     * Auto generated value setter.
     * @param availableToPromiseTotal the availableToPromiseTotal to set
     */
    private void setAvailableToPromiseTotal(BigDecimal availableToPromiseTotal) {
        this.availableToPromiseTotal = availableToPromiseTotal;
    }
    /**
     * Auto generated value setter.
     * @param quantityOnHandTotal the quantityOnHandTotal to set
     */
    private void setQuantityOnHandTotal(BigDecimal quantityOnHandTotal) {
        this.quantityOnHandTotal = quantityOnHandTotal;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getInventoryItemId() {
        return this.inventoryItemId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getAvailableToPromiseTotal() {
        return this.availableToPromiseTotal;
    }
    /**
     * Auto generated value accessor.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getQuantityOnHandTotal() {
        return this.quantityOnHandTotal;
    }




    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setInventoryItemId((String) mapValue.get("inventoryItemId"));
        setAvailableToPromiseTotal(convertToBigDecimal(mapValue.get("availableToPromiseTotal")));
        setQuantityOnHandTotal(convertToBigDecimal(mapValue.get("quantityOnHandTotal")));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("inventoryItemId", getInventoryItemId());
        mapValue.put("availableToPromiseTotal", getAvailableToPromiseTotal());
        mapValue.put("quantityOnHandTotal", getQuantityOnHandTotal());
        return mapValue;
    }


}
