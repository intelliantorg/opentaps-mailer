package org.opentaps.domain.base.entities;

/*
* Copyright (c) 2008 - 2009 Open Source Strategies, Inc.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the Honest Public License.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* Honest Public License for more details.
*
* You should have received a copy of the Honest Public License
* along with this program; if not, write to Funambol,
* 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
*/

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;

/**
 * Auto generated base entity PartyAdditionalInformation.
 */
@javax.persistence.Entity
@Table(name="PARTY_ADDITIONAL_INFORMATION")
public class PartyAdditionalInformation extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("partyId", "PARTY_ID");
        fields.put("newHondaPurchased", "NEW_HONDA_PURCHASED");
        fields.put("dateOfContract", "DATE_OF_CONTRACT");
        fields.put("chassisNumber", "CHASSIS_NUMBER");
        fields.put("testDriveBeforePurchase", "TEST_DRIVE_BEFORE_PURCHASE");
        fields.put("whetherFirstCar", "WHETHER_FIRST_CAR");
        fields.put("carOwned1", "CAR_OWNED1");
        fields.put("carOwned2", "CAR_OWNED2");
        fields.put("carOwned3", "CAR_OWNED3");
        fields.put("carOwned4", "CAR_OWNED4");
        fields.put("replacedToBuyHonda", "REPLACE_TO_BUY_HONDA");
        fields.put("carReplaced", "CAR_REPLACED");
        fields.put("replacedCarYear", "REPLACED_CAR_YEAR");
        fields.put("avgKMDrivenPD", "AVG_K_M_DRIVEN_P_D");
        fields.put("drivenBy", "DRIVEN_BY");
        fields.put("modeOfReplacement", "MODE_OF_REPLACEMENT");
        fields.put("newHondaBroughtFor", "NEW_HONDA_BROUGHT_FOR");
        fields.put("hondaPurchaseDecision", "HONDA_PURCHASE_DECISION");
        fields.put("newspaperRead", "NEWSPAPER_READ");
        fields.put("magazineRead", "MAGAZINE_READ");
        fields.put("favouriteTVChannel", "FAVOURITE_TV_CHANNEL");
        fields.put("carConsidered1", "CAR_CONSIDERED1");
        fields.put("carConsidered2", "CAR_CONSIDERED2");
        fields.put("whyChooseHonda", "WHY_CHOOSE_HONDA");
        fields.put("internetUsage", "INTERNET_USAGE");
        fields.put("favouriteSites", "FAVOURITE_SITES");
        fields.put("searchEngines", "SEARCH_ENGINES");
        fields.put("spendYourWeekends", "SPEND_YOUR_WEEKENDS");
        fields.put("modeOfPurchase", "MODE_OF_PURCHASED");
        fields.put("earningMember", "EARNING_MEMBER");
        fields.put("mhIncomeBand", "MONTHLY_INCOME");
        fields.put("friendName", "FRIEND_NAME");
        fields.put("friendMobileNumber", "FRIEND_MOBILE_NO");
        fields.put("rating", "RATING");
        fields.put("accountType", "ACCOUNT_TYPE");
        
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
fieldMapColumns.put("PartyAdditionalInformation", fields);
}
  public static enum Fields implements EntityFieldInterface<PartySupplementalData> {
    partyId("partyId"),
    newHondaPurchased("newHondaPurchased"),
    dateOfContract("dateOfContract"),
    chassisNumber("chassisNumber"),
    testDriveBeforePurchase("testDriveBeforePurchase"),
    whetherFirstCar("whetherFirstCar"),
    carOwned1("carOwned1"),
    carOwned2("carOwned2"),
    carOwned3("carOwned3"),
    carOwned4("carOwned4"),
    replacedToBuyHonda("replacedToBuyHonda"),
    carReplaced("carReplaced"),
    drivenBy("drivenBy"),
    avgKMDrivenPD("avgKMDrivenPD"),
    replacedCarYear("replacedCarYear"),
    modeOfReplacement("modeOfReplacement"),
    newHondaBroughtFor("newHondaBroughtFor"),
    hondaPurchaseDecision("hondaPurchaseDecision"),
    newspaperRead("newspaperRead"),
    magazineRead("magazineRead"),
    favouriteTVChannel("favouriteTVChannel"),
    carConsidered1("carConsidered1"),
    carConsidered2("carConsidered2"),
    whyChooseHonda("whyChooseHonda"),
    internetUsage("internetUsage"),
    favouriteSites("favouriteSites"),
    searchEngines("searchEngines"),
    spendYourWeekends("spendYourWeekends"),
    modeOfPurchase("modeOfPurchase"),
    earningMember("earningMember"),
    mhIncomeBand("mhIncomeBand"),
    friendName("friendName"),
    friendMobileNumber("friendMobileNumber"),
    rating("rating"),
    accountType("accountType"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @org.hibernate.annotations.GenericGenerator(name="PartyAdditionalInformation_GEN",  strategy="org.opentaps.foundation.entity.hibernate.OpentapsIdentifierGenerator")
    @GeneratedValue(generator="PartyAdditionalInformation_GEN")   
    @Id
    
    @Column(name="PARTY_ID")
    private String partyId;
    
    @Column(name="RATING")
    private String rating;
    
    @Column(name="ACCOUNT_TYPE")
    private String accountType;
    
    @Column(name="LAST_UPDATED_STAMP")
    private Timestamp lastUpdatedStamp;
    
    @Column(name="LAST_UPDATED_TX_STAMP")
    private Timestamp lastUpdatedTxStamp;
    
    @Column(name="CREATED_STAMP")
    private Timestamp createdStamp;
    
    @Column(name="CREATED_TX_STAMP")
    private Timestamp createdTxStamp;
    
    
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="ACCOUNT_TYPE", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private Enumeration accountTypeEnumeration = null;
    
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="PARTY_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private Party party = null;    
   

  /**
   * Default constructor.
   */
  public PartyAdditionalInformation() {
      super();
      this.baseEntityName = "PartyAdditionalInformation";
      this.isView = false;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("partyId");
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public PartyAdditionalInformation(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param partyId the partyId to set
     */
    public void setPartyId(String partyId) {
        this.partyId = partyId;
    }
    
    /**
     * Auto generated value setter.
     * @param rating the rating to set
     */
    public void setRating(String rating) {
        this.rating = rating;
    }
    /**
     * Auto generated value setter.
     * @param accountType the accountType to set
     */
    public void setAccountType(String accountType) {
        this.accountType = accountType;
    }
    
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPartyId() {
        return this.partyId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getRating() {
        return this.rating;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getAccountType() {
        return this.accountType;
    }
   
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }
    
    /**
     * Auto generated method that gets the related <code>Enumeration</code> by the relation named <code>AccountTypeEnumeration</code>.
     * @return the <code>Enumeration</code>
     * @throws RepositoryException if an error occurs
     */
    public Enumeration getAccountTypeEnumeration() throws RepositoryException {
        if (this.accountTypeEnumeration == null) {
            this.accountTypeEnumeration = getRelatedOne(Enumeration.class, "AccountTypeEnumeration");
        }
        return this.accountTypeEnumeration;
    }
    /**
     * Auto generated method that gets the related <code>Party</code> by the relation named <code>Party</code>.
     * @return the <code>Party</code>
     * @throws RepositoryException if an error occurs
     */
    public Party getParty() throws RepositoryException {
        if (this.party == null) {
            this.party = getRelatedOne(Party.class, "Party");
        }
        return this.party;
    }
    /**
     * Auto generated value setter.
     * @param accountTypeEnumeration the accountTypeEnumeration to set
    */
    public void setAccountTypeEnumeration(Enumeration accountTypeEnumeration) {
        this.accountTypeEnumeration = accountTypeEnumeration;
    }
   
    /**
     * Auto generated value setter.
     * @param party the party to set
    */
    public void setParty(Party party) {
        this.party = party;
    }

    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setPartyId((String) mapValue.get("partyId"));
        setRating((String) mapValue.get("rating"));
        setAccountType((String) mapValue.get("accountType"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("partyId", getPartyId());
        mapValue.put("rating", getRating());
        mapValue.put("accountType", getAccountType());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        return mapValue;
    }


}
