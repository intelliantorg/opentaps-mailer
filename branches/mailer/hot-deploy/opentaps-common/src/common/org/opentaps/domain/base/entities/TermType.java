package org.opentaps.domain.base.entities;

/*
* Copyright (c) 2008 - 2009 Open Source Strategies, Inc.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the Honest Public License.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* Honest Public License for more details.
*
* You should have received a copy of the Honest Public License
* along with this program; if not, write to Funambol,
* 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
*/

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity TermType.
 */
@javax.persistence.Entity
@Table(name="TERM_TYPE")
public class TermType extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("termTypeId", "TERM_TYPE_ID");
        fields.put("parentTypeId", "PARENT_TYPE_ID");
        fields.put("hasTable", "HAS_TABLE");
        fields.put("description", "DESCRIPTION");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
fieldMapColumns.put("TermType", fields);
}
  public static enum Fields implements EntityFieldInterface<TermType> {
    termTypeId("termTypeId"),
    parentTypeId("parentTypeId"),
    hasTable("hasTable"),
    description("description"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @org.hibernate.annotations.GenericGenerator(name="TermType_GEN",  strategy="org.opentaps.foundation.entity.hibernate.OpentapsIdentifierGenerator")
    @GeneratedValue(generator="TermType_GEN")   
    @Id
    
    @Column(name="TERM_TYPE_ID")
    private String termTypeId;
    
    @Column(name="PARENT_TYPE_ID")
    private String parentTypeId;
    
    @Column(name="HAS_TABLE")
    private String hasTable;
    
    @Column(name="DESCRIPTION")
    private String description;
    
    @Column(name="LAST_UPDATED_STAMP")
    private Timestamp lastUpdatedStamp;
    
    @Column(name="LAST_UPDATED_TX_STAMP")
    private Timestamp lastUpdatedTxStamp;
    
    @Column(name="CREATED_STAMP")
    private Timestamp createdStamp;
    
    @Column(name="CREATED_TX_STAMP")
    private Timestamp createdTxStamp;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="PARENT_TYPE_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private TermType parentTermType = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="termType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="TERM_TYPE_ID")
    private List<AgreementItemToTermMap> agreementItemToTermMaps = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="TERM_TYPE_ID")
    private List<AgreementTerm> agreementTerms = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="TERM_TYPE_ID")
    private List<BillingAccountTerm> billingAccountTerms = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="TERM_TYPE_ID")
    private List<InvoiceTerm> invoiceTerms = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="termType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="TERM_TYPE_ID")
    private List<OrderTerm> orderTerms = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="termType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="TERM_TYPE_ID")
    private List<QuoteTerm> quoteTerms = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="PARENT_TYPE_ID")
    private List<TermType> childTermTypes = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="termType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="TERM_TYPE_ID")
    private List<TermTypeAttr> termTypeAttrs = null;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="TERM_TYPE_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private TermTypeFields termTypeFields = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="termType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="TERM_TYPE_ID")
    private List<TermTypeToEnumTypeMap> termTypeToEnumTypeMaps = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="termType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="TERM_TYPE_ID")
    private List<TermTypeToUomTypeMap> termTypeToUomTypeMaps = null;

  /**
   * Default constructor.
   */
  public TermType() {
      super();
      this.baseEntityName = "TermType";
      this.isView = false;
      this.resourceName = "PartyEntityLabels";
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("termTypeId");
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public TermType(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param termTypeId the termTypeId to set
     */
    public void setTermTypeId(String termTypeId) {
        this.termTypeId = termTypeId;
    }
    /**
     * Auto generated value setter.
     * @param parentTypeId the parentTypeId to set
     */
    public void setParentTypeId(String parentTypeId) {
        this.parentTypeId = parentTypeId;
    }
    /**
     * Auto generated value setter.
     * @param hasTable the hasTable to set
     */
    public void setHasTable(String hasTable) {
        this.hasTable = hasTable;
    }
    /**
     * Auto generated value setter.
     * @param description the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getTermTypeId() {
        return this.termTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getParentTypeId() {
        return this.parentTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getHasTable() {
        return this.hasTable;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDescription() {
        return this.description;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }

    /**
     * Auto generated method that gets the related <code>TermType</code> by the relation named <code>ParentTermType</code>.
     * @return the <code>TermType</code>
     * @throws RepositoryException if an error occurs
     */
    public TermType getParentTermType() throws RepositoryException {
        if (this.parentTermType == null) {
            this.parentTermType = getRelatedOne(TermType.class, "ParentTermType");
        }
        return this.parentTermType;
    }
    /**
     * Auto generated method that gets the related <code>AgreementItemToTermMap</code> by the relation named <code>AgreementItemToTermMap</code>.
     * @return the list of <code>AgreementItemToTermMap</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AgreementItemToTermMap> getAgreementItemToTermMaps() throws RepositoryException {
        if (this.agreementItemToTermMaps == null) {
            this.agreementItemToTermMaps = getRelated(AgreementItemToTermMap.class, "AgreementItemToTermMap");
        }
        return this.agreementItemToTermMaps;
    }
    /**
     * Auto generated method that gets the related <code>AgreementTerm</code> by the relation named <code>AgreementTerm</code>.
     * @return the list of <code>AgreementTerm</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AgreementTerm> getAgreementTerms() throws RepositoryException {
        if (this.agreementTerms == null) {
            this.agreementTerms = getRelated(AgreementTerm.class, "AgreementTerm");
        }
        return this.agreementTerms;
    }
    /**
     * Auto generated method that gets the related <code>BillingAccountTerm</code> by the relation named <code>BillingAccountTerm</code>.
     * @return the list of <code>BillingAccountTerm</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends BillingAccountTerm> getBillingAccountTerms() throws RepositoryException {
        if (this.billingAccountTerms == null) {
            this.billingAccountTerms = getRelated(BillingAccountTerm.class, "BillingAccountTerm");
        }
        return this.billingAccountTerms;
    }
    /**
     * Auto generated method that gets the related <code>InvoiceTerm</code> by the relation named <code>InvoiceTerm</code>.
     * @return the list of <code>InvoiceTerm</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends InvoiceTerm> getInvoiceTerms() throws RepositoryException {
        if (this.invoiceTerms == null) {
            this.invoiceTerms = getRelated(InvoiceTerm.class, "InvoiceTerm");
        }
        return this.invoiceTerms;
    }
    /**
     * Auto generated method that gets the related <code>OrderTerm</code> by the relation named <code>OrderTerm</code>.
     * @return the list of <code>OrderTerm</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OrderTerm> getOrderTerms() throws RepositoryException {
        if (this.orderTerms == null) {
            this.orderTerms = getRelated(OrderTerm.class, "OrderTerm");
        }
        return this.orderTerms;
    }
    /**
     * Auto generated method that gets the related <code>QuoteTerm</code> by the relation named <code>QuoteTerm</code>.
     * @return the list of <code>QuoteTerm</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends QuoteTerm> getQuoteTerms() throws RepositoryException {
        if (this.quoteTerms == null) {
            this.quoteTerms = getRelated(QuoteTerm.class, "QuoteTerm");
        }
        return this.quoteTerms;
    }
    /**
     * Auto generated method that gets the related <code>TermType</code> by the relation named <code>ChildTermType</code>.
     * @return the list of <code>TermType</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends TermType> getChildTermTypes() throws RepositoryException {
        if (this.childTermTypes == null) {
            this.childTermTypes = getRelated(TermType.class, "ChildTermType");
        }
        return this.childTermTypes;
    }
    /**
     * Auto generated method that gets the related <code>TermTypeAttr</code> by the relation named <code>TermTypeAttr</code>.
     * @return the list of <code>TermTypeAttr</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends TermTypeAttr> getTermTypeAttrs() throws RepositoryException {
        if (this.termTypeAttrs == null) {
            this.termTypeAttrs = getRelated(TermTypeAttr.class, "TermTypeAttr");
        }
        return this.termTypeAttrs;
    }
    /**
     * Auto generated method that gets the related <code>TermTypeFields</code> by the relation named <code>TermTypeFields</code>.
     * @return the <code>TermTypeFields</code>
     * @throws RepositoryException if an error occurs
     */
    public TermTypeFields getTermTypeFields() throws RepositoryException {
        if (this.termTypeFields == null) {
            this.termTypeFields = getRelatedOne(TermTypeFields.class, "TermTypeFields");
        }
        return this.termTypeFields;
    }
    /**
     * Auto generated method that gets the related <code>TermTypeToEnumTypeMap</code> by the relation named <code>TermTypeToEnumTypeMap</code>.
     * @return the list of <code>TermTypeToEnumTypeMap</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends TermTypeToEnumTypeMap> getTermTypeToEnumTypeMaps() throws RepositoryException {
        if (this.termTypeToEnumTypeMaps == null) {
            this.termTypeToEnumTypeMaps = getRelated(TermTypeToEnumTypeMap.class, "TermTypeToEnumTypeMap");
        }
        return this.termTypeToEnumTypeMaps;
    }
    /**
     * Auto generated method that gets the related <code>TermTypeToUomTypeMap</code> by the relation named <code>TermTypeToUomTypeMap</code>.
     * @return the list of <code>TermTypeToUomTypeMap</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends TermTypeToUomTypeMap> getTermTypeToUomTypeMaps() throws RepositoryException {
        if (this.termTypeToUomTypeMaps == null) {
            this.termTypeToUomTypeMaps = getRelated(TermTypeToUomTypeMap.class, "TermTypeToUomTypeMap");
        }
        return this.termTypeToUomTypeMaps;
    }

    /**
     * Auto generated value setter.
     * @param parentTermType the parentTermType to set
    */
    public void setParentTermType(TermType parentTermType) {
        this.parentTermType = parentTermType;
    }
    /**
     * Auto generated value setter.
     * @param agreementItemToTermMaps the agreementItemToTermMaps to set
    */
    public void setAgreementItemToTermMaps(List<AgreementItemToTermMap> agreementItemToTermMaps) {
        this.agreementItemToTermMaps = agreementItemToTermMaps;
    }
    /**
     * Auto generated value setter.
     * @param agreementTerms the agreementTerms to set
    */
    public void setAgreementTerms(List<AgreementTerm> agreementTerms) {
        this.agreementTerms = agreementTerms;
    }
    /**
     * Auto generated value setter.
     * @param billingAccountTerms the billingAccountTerms to set
    */
    public void setBillingAccountTerms(List<BillingAccountTerm> billingAccountTerms) {
        this.billingAccountTerms = billingAccountTerms;
    }
    /**
     * Auto generated value setter.
     * @param invoiceTerms the invoiceTerms to set
    */
    public void setInvoiceTerms(List<InvoiceTerm> invoiceTerms) {
        this.invoiceTerms = invoiceTerms;
    }
    /**
     * Auto generated value setter.
     * @param orderTerms the orderTerms to set
    */
    public void setOrderTerms(List<OrderTerm> orderTerms) {
        this.orderTerms = orderTerms;
    }
    /**
     * Auto generated value setter.
     * @param quoteTerms the quoteTerms to set
    */
    public void setQuoteTerms(List<QuoteTerm> quoteTerms) {
        this.quoteTerms = quoteTerms;
    }
    /**
     * Auto generated value setter.
     * @param childTermTypes the childTermTypes to set
    */
    public void setChildTermTypes(List<TermType> childTermTypes) {
        this.childTermTypes = childTermTypes;
    }
    /**
     * Auto generated value setter.
     * @param termTypeAttrs the termTypeAttrs to set
    */
    public void setTermTypeAttrs(List<TermTypeAttr> termTypeAttrs) {
        this.termTypeAttrs = termTypeAttrs;
    }
    /**
     * Auto generated value setter.
     * @param termTypeFields the termTypeFields to set
    */
    public void setTermTypeFields(TermTypeFields termTypeFields) {
        this.termTypeFields = termTypeFields;
    }
    /**
     * Auto generated value setter.
     * @param termTypeToEnumTypeMaps the termTypeToEnumTypeMaps to set
    */
    public void setTermTypeToEnumTypeMaps(List<TermTypeToEnumTypeMap> termTypeToEnumTypeMaps) {
        this.termTypeToEnumTypeMaps = termTypeToEnumTypeMaps;
    }
    /**
     * Auto generated value setter.
     * @param termTypeToUomTypeMaps the termTypeToUomTypeMaps to set
    */
    public void setTermTypeToUomTypeMaps(List<TermTypeToUomTypeMap> termTypeToUomTypeMaps) {
        this.termTypeToUomTypeMaps = termTypeToUomTypeMaps;
    }

    /**
     * Auto generated method that add item to collection.
     */
    public void addAgreementItemToTermMap(AgreementItemToTermMap agreementItemToTermMap) {
        if (this.agreementItemToTermMaps == null) {
            this.agreementItemToTermMaps = new ArrayList<AgreementItemToTermMap>();
        }
        this.agreementItemToTermMaps.add(agreementItemToTermMap);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeAgreementItemToTermMap(AgreementItemToTermMap agreementItemToTermMap) {
        if (this.agreementItemToTermMaps == null) {
            return;
        }
        this.agreementItemToTermMaps.remove(agreementItemToTermMap);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearAgreementItemToTermMap() {
        if (this.agreementItemToTermMaps == null) {
            return;
        }
        this.agreementItemToTermMaps.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addOrderTerm(OrderTerm orderTerm) {
        if (this.orderTerms == null) {
            this.orderTerms = new ArrayList<OrderTerm>();
        }
        this.orderTerms.add(orderTerm);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeOrderTerm(OrderTerm orderTerm) {
        if (this.orderTerms == null) {
            return;
        }
        this.orderTerms.remove(orderTerm);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearOrderTerm() {
        if (this.orderTerms == null) {
            return;
        }
        this.orderTerms.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addQuoteTerm(QuoteTerm quoteTerm) {
        if (this.quoteTerms == null) {
            this.quoteTerms = new ArrayList<QuoteTerm>();
        }
        this.quoteTerms.add(quoteTerm);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeQuoteTerm(QuoteTerm quoteTerm) {
        if (this.quoteTerms == null) {
            return;
        }
        this.quoteTerms.remove(quoteTerm);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearQuoteTerm() {
        if (this.quoteTerms == null) {
            return;
        }
        this.quoteTerms.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addTermTypeAttr(TermTypeAttr termTypeAttr) {
        if (this.termTypeAttrs == null) {
            this.termTypeAttrs = new ArrayList<TermTypeAttr>();
        }
        this.termTypeAttrs.add(termTypeAttr);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeTermTypeAttr(TermTypeAttr termTypeAttr) {
        if (this.termTypeAttrs == null) {
            return;
        }
        this.termTypeAttrs.remove(termTypeAttr);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearTermTypeAttr() {
        if (this.termTypeAttrs == null) {
            return;
        }
        this.termTypeAttrs.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addTermTypeToEnumTypeMap(TermTypeToEnumTypeMap termTypeToEnumTypeMap) {
        if (this.termTypeToEnumTypeMaps == null) {
            this.termTypeToEnumTypeMaps = new ArrayList<TermTypeToEnumTypeMap>();
        }
        this.termTypeToEnumTypeMaps.add(termTypeToEnumTypeMap);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeTermTypeToEnumTypeMap(TermTypeToEnumTypeMap termTypeToEnumTypeMap) {
        if (this.termTypeToEnumTypeMaps == null) {
            return;
        }
        this.termTypeToEnumTypeMaps.remove(termTypeToEnumTypeMap);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearTermTypeToEnumTypeMap() {
        if (this.termTypeToEnumTypeMaps == null) {
            return;
        }
        this.termTypeToEnumTypeMaps.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addTermTypeToUomTypeMap(TermTypeToUomTypeMap termTypeToUomTypeMap) {
        if (this.termTypeToUomTypeMaps == null) {
            this.termTypeToUomTypeMaps = new ArrayList<TermTypeToUomTypeMap>();
        }
        this.termTypeToUomTypeMaps.add(termTypeToUomTypeMap);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeTermTypeToUomTypeMap(TermTypeToUomTypeMap termTypeToUomTypeMap) {
        if (this.termTypeToUomTypeMaps == null) {
            return;
        }
        this.termTypeToUomTypeMaps.remove(termTypeToUomTypeMap);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearTermTypeToUomTypeMap() {
        if (this.termTypeToUomTypeMaps == null) {
            return;
        }
        this.termTypeToUomTypeMaps.clear();
    }

    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setTermTypeId((String) mapValue.get("termTypeId"));
        setParentTypeId((String) mapValue.get("parentTypeId"));
        setHasTable((String) mapValue.get("hasTable"));
        setDescription((String) mapValue.get("description"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("termTypeId", getTermTypeId());
        mapValue.put("parentTypeId", getParentTypeId());
        mapValue.put("hasTable", getHasTable());
        mapValue.put("description", getDescription());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        return mapValue;
    }


}
