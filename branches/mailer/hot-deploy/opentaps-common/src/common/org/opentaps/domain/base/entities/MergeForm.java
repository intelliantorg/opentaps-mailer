package org.opentaps.domain.base.entities;

/*
* Copyright (c) 2008 - 2009 Open Source Strategies, Inc.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the Honest Public License.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* Honest Public License for more details.
*
* You should have received a copy of the Honest Public License
* along with this program; if not, write to Funambol,
* 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
*/

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity MergeForm.
 */
@javax.persistence.Entity
@Table(name="MERGE_FORM")
public class MergeForm extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("mergeFormId", "MERGE_FORM_ID");
        fields.put("partyId", "PARTY_ID");
        fields.put("mergeFormName", "MERGE_FORM_NAME");
        fields.put("subject", "SUBJECT");
        fields.put("description", "DESCRIPTION");
        fields.put("mergeFormText", "MERGE_FORM_TEXT");
        fields.put("showInSelect", "SHOW_IN_SELECT");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
fieldMapColumns.put("MergeForm", fields);
}
  public static enum Fields implements EntityFieldInterface<MergeForm> {
    mergeFormId("mergeFormId"),
    partyId("partyId"),
    mergeFormName("mergeFormName"),
    subject("subject"),
    description("description"),
    mergeFormText("mergeFormText"),
    showInSelect("showInSelect"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @org.hibernate.annotations.GenericGenerator(name="MergeForm_GEN",  strategy="org.opentaps.foundation.entity.hibernate.OpentapsIdentifierGenerator")
    @GeneratedValue(generator="MergeForm_GEN")   
    @Id
    
    @Column(name="MERGE_FORM_ID")
    private String mergeFormId;
    
    @Column(name="PARTY_ID")
    private String partyId;
    
    @Column(name="MERGE_FORM_NAME")
    private String mergeFormName;
    
    @Column(name="SUBJECT")
    private String subject;
    
    @Column(name="DESCRIPTION")
    private String description;
    
    @Column(name="MERGE_FORM_TEXT")
    private String mergeFormText;
    
    @Column(name="SHOW_IN_SELECT")
    private String showInSelect;
    
    @Column(name="LAST_UPDATED_STAMP")
    private Timestamp lastUpdatedStamp;
    
    @Column(name="LAST_UPDATED_TX_STAMP")
    private Timestamp lastUpdatedTxStamp;
    
    @Column(name="CREATED_STAMP")
    private Timestamp createdStamp;
    
    @Column(name="CREATED_TX_STAMP")
    private Timestamp createdTxStamp;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="PARTY_ID")
    private List<Party> partys = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="mergeForm", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="MERGE_FORM_ID")
    private List<MergeFormToCategory> mergeFormToCategorys = null;

  /**
   * Default constructor.
   */
  public MergeForm() {
      super();
      this.baseEntityName = "MergeForm";
      this.isView = false;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("mergeFormId");
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public MergeForm(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param mergeFormId the mergeFormId to set
     */
    public void setMergeFormId(String mergeFormId) {
        this.mergeFormId = mergeFormId;
    }
    /**
     * Auto generated value setter.
     * @param partyId the partyId to set
     */
    public void setPartyId(String partyId) {
        this.partyId = partyId;
    }
    /**
     * Auto generated value setter.
     * @param mergeFormName the mergeFormName to set
     */
    public void setMergeFormName(String mergeFormName) {
        this.mergeFormName = mergeFormName;
    }
    /**
     * Auto generated value setter.
     * @param subject the subject to set
     */
    public void setSubject(String subject) {
        this.subject = subject;
    }
    /**
     * Auto generated value setter.
     * @param description the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }
    /**
     * Auto generated value setter.
     * @param mergeFormText the mergeFormText to set
     */
    public void setMergeFormText(String mergeFormText) {
        this.mergeFormText = mergeFormText;
    }
    /**
     * Auto generated value setter.
     * @param showInSelect the showInSelect to set
     */
    public void setShowInSelect(String showInSelect) {
        this.showInSelect = showInSelect;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getMergeFormId() {
        return this.mergeFormId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPartyId() {
        return this.partyId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getMergeFormName() {
        return this.mergeFormName;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getSubject() {
        return this.subject;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDescription() {
        return this.description;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getMergeFormText() {
        return this.mergeFormText;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getShowInSelect() {
        return this.showInSelect;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }

    /**
     * Auto generated method that gets the related <code>Party</code> by the relation named <code>Party</code>.
     * @return the list of <code>Party</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Party> getPartys() throws RepositoryException {
        if (this.partys == null) {
            this.partys = getRelated(Party.class, "Party");
        }
        return this.partys;
    }
    /**
     * Auto generated method that gets the related <code>MergeFormToCategory</code> by the relation named <code>MergeFormToCategory</code>.
     * @return the list of <code>MergeFormToCategory</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends MergeFormToCategory> getMergeFormToCategorys() throws RepositoryException {
        if (this.mergeFormToCategorys == null) {
            this.mergeFormToCategorys = getRelated(MergeFormToCategory.class, "MergeFormToCategory");
        }
        return this.mergeFormToCategorys;
    }

    /**
     * Auto generated value setter.
     * @param partys the partys to set
    */
    public void setPartys(List<Party> partys) {
        this.partys = partys;
    }
    /**
     * Auto generated value setter.
     * @param mergeFormToCategorys the mergeFormToCategorys to set
    */
    public void setMergeFormToCategorys(List<MergeFormToCategory> mergeFormToCategorys) {
        this.mergeFormToCategorys = mergeFormToCategorys;
    }

    /**
     * Auto generated method that add item to collection.
     */
    public void addMergeFormToCategory(MergeFormToCategory mergeFormToCategory) {
        if (this.mergeFormToCategorys == null) {
            this.mergeFormToCategorys = new ArrayList<MergeFormToCategory>();
        }
        this.mergeFormToCategorys.add(mergeFormToCategory);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeMergeFormToCategory(MergeFormToCategory mergeFormToCategory) {
        if (this.mergeFormToCategorys == null) {
            return;
        }
        this.mergeFormToCategorys.remove(mergeFormToCategory);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearMergeFormToCategory() {
        if (this.mergeFormToCategorys == null) {
            return;
        }
        this.mergeFormToCategorys.clear();
    }

    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setMergeFormId((String) mapValue.get("mergeFormId"));
        setPartyId((String) mapValue.get("partyId"));
        setMergeFormName((String) mapValue.get("mergeFormName"));
        setSubject((String) mapValue.get("subject"));
        setDescription((String) mapValue.get("description"));
        setMergeFormText((String) mapValue.get("mergeFormText"));
        setShowInSelect((String) mapValue.get("showInSelect"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("mergeFormId", getMergeFormId());
        mapValue.put("partyId", getPartyId());
        mapValue.put("mergeFormName", getMergeFormName());
        mapValue.put("subject", getSubject());
        mapValue.put("description", getDescription());
        mapValue.put("mergeFormText", getMergeFormText());
        mapValue.put("showInSelect", getShowInSelect());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        return mapValue;
    }


}
