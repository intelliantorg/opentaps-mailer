package org.opentaps.domain.base.entities;

/*
* Copyright (c) 2008 - 2009 Open Source Strategies, Inc.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the Honest Public License.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* Honest Public License for more details.
*
* You should have received a copy of the Honest Public License
* along with this program; if not, write to Funambol,
* 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
*/

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import java.lang.String;
import java.math.BigDecimal;
import java.sql.Timestamp;

/**
 * Auto generated base entity AcctgTransEntryProdSum.
 */
@javax.persistence.Entity
@NamedNativeQuery(name="selectAcctgTransEntryProdSums", query="SELECT P.PRODUCT_ID AS \"productId\",P.INTERNAL_NAME AS \"internalName\",P.BRAND_NAME AS \"brandName\",ATE.AMOUNT AS \"amount\",ATE.CURRENCY_UOM_ID AS \"currencyUomId\",ATE.DEBIT_CREDIT_FLAG AS \"debitCreditFlag\",ATR.TRANSACTION_DATE AS \"transactionDate\",GA.GL_ACCOUNT_CLASS_ID AS \"glAccountClassId\" FROM PRODUCT P INNER JOIN ACCTG_TRANS_ENTRY ATE ON P.PRODUCT_ID = ATE.PRODUCT_ID INNER JOIN ACCTG_TRANS ATR ON ATE.ACCTG_TRANS_ID = ATR.ACCTG_TRANS_ID INNER JOIN GL_ACCOUNT GA ON ATE.GL_ACCOUNT_ID = GA.GL_ACCOUNT_ID", resultSetMapping="AcctgTransEntryProdSumMapping")
@SqlResultSetMapping(name="AcctgTransEntryProdSumMapping", entities={
@EntityResult(entityClass=AcctgTransEntryProdSum.class, fields = {
@FieldResult(name="productId", column="productId")
,@FieldResult(name="internalName", column="internalName")
,@FieldResult(name="brandName", column="brandName")
,@FieldResult(name="amount", column="amount")
,@FieldResult(name="currencyUomId", column="currencyUomId")
,@FieldResult(name="debitCreditFlag", column="debitCreditFlag")
,@FieldResult(name="transactionDate", column="transactionDate")
,@FieldResult(name="glAccountClassId", column="glAccountClassId")
})})
@org.hibernate.annotations.Entity(mutable = false)
@org.hibernate.annotations.AccessType("field")
public class AcctgTransEntryProdSum extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("productId", "P.PRODUCT_ID");
        fields.put("internalName", "P.INTERNAL_NAME");
        fields.put("brandName", "P.BRAND_NAME");
        fields.put("amount", "ATE.AMOUNT");
        fields.put("currencyUomId", "ATE.CURRENCY_UOM_ID");
        fields.put("debitCreditFlag", "ATE.DEBIT_CREDIT_FLAG");
        fields.put("transactionDate", "ATR.TRANSACTION_DATE");
        fields.put("glAccountClassId", "GA.GL_ACCOUNT_CLASS_ID");
fieldMapColumns.put("AcctgTransEntryProdSum", fields);
}
  public static enum Fields implements EntityFieldInterface<AcctgTransEntryProdSum> {
    productId("productId"),
    internalName("internalName"),
    brandName("brandName"),
    amount("amount"),
    currencyUomId("currencyUomId"),
    debitCreditFlag("debitCreditFlag"),
    transactionDate("transactionDate"),
    glAccountClassId("glAccountClassId");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @Id
    
    private String productId;
    
    
    private String internalName;
    
    
    private String brandName;
    
    
    private BigDecimal amount;
    
    
    private String currencyUomId;
    
    
    private String debitCreditFlag;
    
    
    private Timestamp transactionDate;
    
    
    private String glAccountClassId;

  /**
   * Default constructor.
   */
  public AcctgTransEntryProdSum() {
      super();
      this.baseEntityName = "AcctgTransEntryProdSum";
      this.isView = true;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("productId");
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public AcctgTransEntryProdSum(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * This is a view-entity, so the setter methods will be private to this class and for use in its fromMap constructor only
     */
    /**
     * Auto generated value setter.
     * @param productId the productId to set
     */
    private void setProductId(String productId) {
        this.productId = productId;
    }
    /**
     * Auto generated value setter.
     * @param internalName the internalName to set
     */
    private void setInternalName(String internalName) {
        this.internalName = internalName;
    }
    /**
     * Auto generated value setter.
     * @param brandName the brandName to set
     */
    private void setBrandName(String brandName) {
        this.brandName = brandName;
    }
    /**
     * Auto generated value setter.
     * @param amount the amount to set
     */
    private void setAmount(BigDecimal amount) {
        this.amount = amount;
    }
    /**
     * Auto generated value setter.
     * @param currencyUomId the currencyUomId to set
     */
    private void setCurrencyUomId(String currencyUomId) {
        this.currencyUomId = currencyUomId;
    }
    /**
     * Auto generated value setter.
     * @param debitCreditFlag the debitCreditFlag to set
     */
    private void setDebitCreditFlag(String debitCreditFlag) {
        this.debitCreditFlag = debitCreditFlag;
    }
    /**
     * Auto generated value setter.
     * @param transactionDate the transactionDate to set
     */
    private void setTransactionDate(Timestamp transactionDate) {
        this.transactionDate = transactionDate;
    }
    /**
     * Auto generated value setter.
     * @param glAccountClassId the glAccountClassId to set
     */
    private void setGlAccountClassId(String glAccountClassId) {
        this.glAccountClassId = glAccountClassId;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getProductId() {
        return this.productId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getInternalName() {
        return this.internalName;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getBrandName() {
        return this.brandName;
    }
    /**
     * Auto generated value accessor.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getAmount() {
        return this.amount;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getCurrencyUomId() {
        return this.currencyUomId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDebitCreditFlag() {
        return this.debitCreditFlag;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getTransactionDate() {
        return this.transactionDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getGlAccountClassId() {
        return this.glAccountClassId;
    }




    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setProductId((String) mapValue.get("productId"));
        setInternalName((String) mapValue.get("internalName"));
        setBrandName((String) mapValue.get("brandName"));
        setAmount(convertToBigDecimal(mapValue.get("amount")));
        setCurrencyUomId((String) mapValue.get("currencyUomId"));
        setDebitCreditFlag((String) mapValue.get("debitCreditFlag"));
        setTransactionDate((Timestamp) mapValue.get("transactionDate"));
        setGlAccountClassId((String) mapValue.get("glAccountClassId"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("productId", getProductId());
        mapValue.put("internalName", getInternalName());
        mapValue.put("brandName", getBrandName());
        mapValue.put("amount", getAmount());
        mapValue.put("currencyUomId", getCurrencyUomId());
        mapValue.put("debitCreditFlag", getDebitCreditFlag());
        mapValue.put("transactionDate", getTransactionDate());
        mapValue.put("glAccountClassId", getGlAccountClassId());
        return mapValue;
    }


}
