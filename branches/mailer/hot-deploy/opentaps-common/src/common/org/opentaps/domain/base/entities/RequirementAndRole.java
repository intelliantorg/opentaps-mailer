package org.opentaps.domain.base.entities;

/*
* Copyright (c) 2008 - 2009 Open Source Strategies, Inc.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the Honest Public License.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* Honest Public License for more details.
*
* You should have received a copy of the Honest Public License
* along with this program; if not, write to Funambol,
* 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
*/

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import java.lang.String;
import java.math.BigDecimal;
import java.sql.Timestamp;

/**
 * Auto generated base entity RequirementAndRole.
 */
@javax.persistence.Entity
@NamedNativeQuery(name="selectRequirementAndRoles", query="SELECT RQ.REQUIREMENT_ID AS \"requirementId\",RQ.REQUIREMENT_TYPE_ID AS \"requirementTypeId\",RQ.STATUS_ID AS \"statusId\",RQ.FACILITY_ID AS \"facilityId\",RQ.DELIVERABLE_ID AS \"deliverableId\",RQ.FIXED_ASSET_ID AS \"fixedAssetId\",RQ.PRODUCT_ID AS \"productId\",RQ.DESCRIPTION AS \"description\",RQ.REQUIREMENT_START_DATE AS \"requirementStartDate\",RQ.REQUIRED_BY_DATE AS \"requiredByDate\",RQ.ESTIMATED_BUDGET AS \"estimatedBudget\",RQ.QUANTITY AS \"quantity\",RQ.REASON AS \"reason\",RQ.LAST_MODIFIED_DATE AS \"lastModifiedDate\",RQ.LAST_MODIFIED_BY_USER_LOGIN AS \"lastModifiedByUserLogin\",RQR.PARTY_ID AS \"partyId\",RQR.ROLE_TYPE_ID AS \"roleTypeId\",RQR.FROM_DATE AS \"fromDate\",RQR.THRU_DATE AS \"thruDate\" FROM REQUIREMENT RQ LEFT JOIN REQUIREMENT_ROLE RQR ON RQ.REQUIREMENT_ID = RQR.REQUIREMENT_ID", resultSetMapping="RequirementAndRoleMapping")
@SqlResultSetMapping(name="RequirementAndRoleMapping", entities={
@EntityResult(entityClass=RequirementAndRole.class, fields = {
@FieldResult(name="requirementId", column="requirementId")
,@FieldResult(name="requirementTypeId", column="requirementTypeId")
,@FieldResult(name="statusId", column="statusId")
,@FieldResult(name="facilityId", column="facilityId")
,@FieldResult(name="deliverableId", column="deliverableId")
,@FieldResult(name="fixedAssetId", column="fixedAssetId")
,@FieldResult(name="productId", column="productId")
,@FieldResult(name="description", column="description")
,@FieldResult(name="requirementStartDate", column="requirementStartDate")
,@FieldResult(name="requiredByDate", column="requiredByDate")
,@FieldResult(name="estimatedBudget", column="estimatedBudget")
,@FieldResult(name="quantity", column="quantity")
,@FieldResult(name="reason", column="reason")
,@FieldResult(name="lastModifiedDate", column="lastModifiedDate")
,@FieldResult(name="lastModifiedByUserLogin", column="lastModifiedByUserLogin")
,@FieldResult(name="partyId", column="partyId")
,@FieldResult(name="roleTypeId", column="roleTypeId")
,@FieldResult(name="fromDate", column="fromDate")
,@FieldResult(name="thruDate", column="thruDate")
})})
@org.hibernate.annotations.Entity(mutable = false)
@org.hibernate.annotations.AccessType("field")
public class RequirementAndRole extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("requirementId", "RQ.REQUIREMENT_ID");
        fields.put("requirementTypeId", "RQ.REQUIREMENT_TYPE_ID");
        fields.put("statusId", "RQ.STATUS_ID");
        fields.put("facilityId", "RQ.FACILITY_ID");
        fields.put("deliverableId", "RQ.DELIVERABLE_ID");
        fields.put("fixedAssetId", "RQ.FIXED_ASSET_ID");
        fields.put("productId", "RQ.PRODUCT_ID");
        fields.put("description", "RQ.DESCRIPTION");
        fields.put("requirementStartDate", "RQ.REQUIREMENT_START_DATE");
        fields.put("requiredByDate", "RQ.REQUIRED_BY_DATE");
        fields.put("estimatedBudget", "RQ.ESTIMATED_BUDGET");
        fields.put("quantity", "RQ.QUANTITY");
        fields.put("reason", "RQ.REASON");
        fields.put("lastModifiedDate", "RQ.LAST_MODIFIED_DATE");
        fields.put("lastModifiedByUserLogin", "RQ.LAST_MODIFIED_BY_USER_LOGIN");
        fields.put("partyId", "RQR.PARTY_ID");
        fields.put("roleTypeId", "RQR.ROLE_TYPE_ID");
        fields.put("fromDate", "RQR.FROM_DATE");
        fields.put("thruDate", "RQR.THRU_DATE");
fieldMapColumns.put("RequirementAndRole", fields);
}
  public static enum Fields implements EntityFieldInterface<RequirementAndRole> {
    requirementId("requirementId"),
    requirementTypeId("requirementTypeId"),
    statusId("statusId"),
    facilityId("facilityId"),
    deliverableId("deliverableId"),
    fixedAssetId("fixedAssetId"),
    productId("productId"),
    description("description"),
    requirementStartDate("requirementStartDate"),
    requiredByDate("requiredByDate"),
    estimatedBudget("estimatedBudget"),
    quantity("quantity"),
    reason("reason"),
    lastModifiedDate("lastModifiedDate"),
    lastModifiedByUserLogin("lastModifiedByUserLogin"),
    partyId("partyId"),
    roleTypeId("roleTypeId"),
    fromDate("fromDate"),
    thruDate("thruDate");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @Id
    
    private String requirementId;
    
    
    private String requirementTypeId;
    
    
    private String statusId;
    
    
    private String facilityId;
    
    
    private String deliverableId;
    
    
    private String fixedAssetId;
    
    
    private String productId;
    
    
    private String description;
    
    
    private Timestamp requirementStartDate;
    
    
    private Timestamp requiredByDate;
    
    
    private BigDecimal estimatedBudget;
    
    
    private BigDecimal quantity;
    
    
    private String reason;
    
    
    private Timestamp lastModifiedDate;
    
    
    private String lastModifiedByUserLogin;
    
    
    private String partyId;
    
    
    private String roleTypeId;
    
    
    private Timestamp fromDate;
    
    
    private Timestamp thruDate;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="REQUIREMENT_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private Requirement requirement = null;
    private transient RequirementRole requirementRole = null;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="PARTY_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private Party party = null;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="PARTY_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private Person person = null;
    private transient PartyRole partyRole = null;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private RoleType roleType = null;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="STATUS_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private StatusItem statusItem = null;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="REQUIREMENT_TYPE_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private RequirementType requirementType = null;

  /**
   * Default constructor.
   */
  public RequirementAndRole() {
      super();
      this.baseEntityName = "RequirementAndRole";
      this.isView = true;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("requirementId");this.primaryKeyNames.add("partyId");this.primaryKeyNames.add("roleTypeId");this.primaryKeyNames.add("fromDate");
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public RequirementAndRole(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * This is a view-entity, so the setter methods will be private to this class and for use in its fromMap constructor only
     */
    /**
     * Auto generated value setter.
     * @param requirementId the requirementId to set
     */
    private void setRequirementId(String requirementId) {
        this.requirementId = requirementId;
    }
    /**
     * Auto generated value setter.
     * @param requirementTypeId the requirementTypeId to set
     */
    private void setRequirementTypeId(String requirementTypeId) {
        this.requirementTypeId = requirementTypeId;
    }
    /**
     * Auto generated value setter.
     * @param statusId the statusId to set
     */
    private void setStatusId(String statusId) {
        this.statusId = statusId;
    }
    /**
     * Auto generated value setter.
     * @param facilityId the facilityId to set
     */
    private void setFacilityId(String facilityId) {
        this.facilityId = facilityId;
    }
    /**
     * Auto generated value setter.
     * @param deliverableId the deliverableId to set
     */
    private void setDeliverableId(String deliverableId) {
        this.deliverableId = deliverableId;
    }
    /**
     * Auto generated value setter.
     * @param fixedAssetId the fixedAssetId to set
     */
    private void setFixedAssetId(String fixedAssetId) {
        this.fixedAssetId = fixedAssetId;
    }
    /**
     * Auto generated value setter.
     * @param productId the productId to set
     */
    private void setProductId(String productId) {
        this.productId = productId;
    }
    /**
     * Auto generated value setter.
     * @param description the description to set
     */
    private void setDescription(String description) {
        this.description = description;
    }
    /**
     * Auto generated value setter.
     * @param requirementStartDate the requirementStartDate to set
     */
    private void setRequirementStartDate(Timestamp requirementStartDate) {
        this.requirementStartDate = requirementStartDate;
    }
    /**
     * Auto generated value setter.
     * @param requiredByDate the requiredByDate to set
     */
    private void setRequiredByDate(Timestamp requiredByDate) {
        this.requiredByDate = requiredByDate;
    }
    /**
     * Auto generated value setter.
     * @param estimatedBudget the estimatedBudget to set
     */
    private void setEstimatedBudget(BigDecimal estimatedBudget) {
        this.estimatedBudget = estimatedBudget;
    }
    /**
     * Auto generated value setter.
     * @param quantity the quantity to set
     */
    private void setQuantity(BigDecimal quantity) {
        this.quantity = quantity;
    }
    /**
     * Auto generated value setter.
     * @param reason the reason to set
     */
    private void setReason(String reason) {
        this.reason = reason;
    }
    /**
     * Auto generated value setter.
     * @param lastModifiedDate the lastModifiedDate to set
     */
    private void setLastModifiedDate(Timestamp lastModifiedDate) {
        this.lastModifiedDate = lastModifiedDate;
    }
    /**
     * Auto generated value setter.
     * @param lastModifiedByUserLogin the lastModifiedByUserLogin to set
     */
    private void setLastModifiedByUserLogin(String lastModifiedByUserLogin) {
        this.lastModifiedByUserLogin = lastModifiedByUserLogin;
    }
    /**
     * Auto generated value setter.
     * @param partyId the partyId to set
     */
    private void setPartyId(String partyId) {
        this.partyId = partyId;
    }
    /**
     * Auto generated value setter.
     * @param roleTypeId the roleTypeId to set
     */
    private void setRoleTypeId(String roleTypeId) {
        this.roleTypeId = roleTypeId;
    }
    /**
     * Auto generated value setter.
     * @param fromDate the fromDate to set
     */
    private void setFromDate(Timestamp fromDate) {
        this.fromDate = fromDate;
    }
    /**
     * Auto generated value setter.
     * @param thruDate the thruDate to set
     */
    private void setThruDate(Timestamp thruDate) {
        this.thruDate = thruDate;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getRequirementId() {
        return this.requirementId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getRequirementTypeId() {
        return this.requirementTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getStatusId() {
        return this.statusId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getFacilityId() {
        return this.facilityId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDeliverableId() {
        return this.deliverableId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getFixedAssetId() {
        return this.fixedAssetId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getProductId() {
        return this.productId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDescription() {
        return this.description;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getRequirementStartDate() {
        return this.requirementStartDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getRequiredByDate() {
        return this.requiredByDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getEstimatedBudget() {
        return this.estimatedBudget;
    }
    /**
     * Auto generated value accessor.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getQuantity() {
        return this.quantity;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getReason() {
        return this.reason;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastModifiedDate() {
        return this.lastModifiedDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getLastModifiedByUserLogin() {
        return this.lastModifiedByUserLogin;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPartyId() {
        return this.partyId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getRoleTypeId() {
        return this.roleTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getFromDate() {
        return this.fromDate;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getThruDate() {
        return this.thruDate;
    }

    /**
     * Auto generated method that gets the related <code>Requirement</code> by the relation named <code>Requirement</code>.
     * @return the <code>Requirement</code>
     * @throws RepositoryException if an error occurs
     */
    public Requirement getRequirement() throws RepositoryException {
        if (this.requirement == null) {
            this.requirement = getRelatedOne(Requirement.class, "Requirement");
        }
        return this.requirement;
    }
    /**
     * Auto generated method that gets the related <code>RequirementRole</code> by the relation named <code>RequirementRole</code>.
     * @return the <code>RequirementRole</code>
     * @throws RepositoryException if an error occurs
     */
    public RequirementRole getRequirementRole() throws RepositoryException {
        if (this.requirementRole == null) {
            this.requirementRole = getRelatedOne(RequirementRole.class, "RequirementRole");
        }
        return this.requirementRole;
    }
    /**
     * Auto generated method that gets the related <code>Party</code> by the relation named <code>Party</code>.
     * @return the <code>Party</code>
     * @throws RepositoryException if an error occurs
     */
    public Party getParty() throws RepositoryException {
        if (this.party == null) {
            this.party = getRelatedOne(Party.class, "Party");
        }
        return this.party;
    }
    /**
     * Auto generated method that gets the related <code>Person</code> by the relation named <code>Person</code>.
     * @return the <code>Person</code>
     * @throws RepositoryException if an error occurs
     */
    public Person getPerson() throws RepositoryException {
        if (this.person == null) {
            this.person = getRelatedOne(Person.class, "Person");
        }
        return this.person;
    }
    /**
     * Auto generated method that gets the related <code>PartyRole</code> by the relation named <code>PartyRole</code>.
     * @return the <code>PartyRole</code>
     * @throws RepositoryException if an error occurs
     */
    public PartyRole getPartyRole() throws RepositoryException {
        if (this.partyRole == null) {
            this.partyRole = getRelatedOne(PartyRole.class, "PartyRole");
        }
        return this.partyRole;
    }
    /**
     * Auto generated method that gets the related <code>RoleType</code> by the relation named <code>RoleType</code>.
     * @return the <code>RoleType</code>
     * @throws RepositoryException if an error occurs
     */
    public RoleType getRoleType() throws RepositoryException {
        if (this.roleType == null) {
            this.roleType = getRelatedOne(RoleType.class, "RoleType");
        }
        return this.roleType;
    }
    /**
     * Auto generated method that gets the related <code>StatusItem</code> by the relation named <code>StatusItem</code>.
     * @return the <code>StatusItem</code>
     * @throws RepositoryException if an error occurs
     */
    public StatusItem getStatusItem() throws RepositoryException {
        if (this.statusItem == null) {
            this.statusItem = getRelatedOne(StatusItem.class, "StatusItem");
        }
        return this.statusItem;
    }
    /**
     * Auto generated method that gets the related <code>RequirementType</code> by the relation named <code>RequirementType</code>.
     * @return the <code>RequirementType</code>
     * @throws RepositoryException if an error occurs
     */
    public RequirementType getRequirementType() throws RepositoryException {
        if (this.requirementType == null) {
            this.requirementType = getRelatedOne(RequirementType.class, "RequirementType");
        }
        return this.requirementType;
    }

    /**
     * Auto generated value setter.
     * @param requirement the requirement to set
    */
    public void setRequirement(Requirement requirement) {
        this.requirement = requirement;
    }
    /**
     * Auto generated value setter.
     * @param requirementRole the requirementRole to set
    */
    public void setRequirementRole(RequirementRole requirementRole) {
        this.requirementRole = requirementRole;
    }
    /**
     * Auto generated value setter.
     * @param party the party to set
    */
    public void setParty(Party party) {
        this.party = party;
    }
    /**
     * Auto generated value setter.
     * @param person the person to set
    */
    public void setPerson(Person person) {
        this.person = person;
    }
    /**
     * Auto generated value setter.
     * @param partyRole the partyRole to set
    */
    public void setPartyRole(PartyRole partyRole) {
        this.partyRole = partyRole;
    }
    /**
     * Auto generated value setter.
     * @param roleType the roleType to set
    */
    public void setRoleType(RoleType roleType) {
        this.roleType = roleType;
    }
    /**
     * Auto generated value setter.
     * @param statusItem the statusItem to set
    */
    public void setStatusItem(StatusItem statusItem) {
        this.statusItem = statusItem;
    }
    /**
     * Auto generated value setter.
     * @param requirementType the requirementType to set
    */
    public void setRequirementType(RequirementType requirementType) {
        this.requirementType = requirementType;
    }


    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setRequirementId((String) mapValue.get("requirementId"));
        setRequirementTypeId((String) mapValue.get("requirementTypeId"));
        setStatusId((String) mapValue.get("statusId"));
        setFacilityId((String) mapValue.get("facilityId"));
        setDeliverableId((String) mapValue.get("deliverableId"));
        setFixedAssetId((String) mapValue.get("fixedAssetId"));
        setProductId((String) mapValue.get("productId"));
        setDescription((String) mapValue.get("description"));
        setRequirementStartDate((Timestamp) mapValue.get("requirementStartDate"));
        setRequiredByDate((Timestamp) mapValue.get("requiredByDate"));
        setEstimatedBudget(convertToBigDecimal(mapValue.get("estimatedBudget")));
        setQuantity(convertToBigDecimal(mapValue.get("quantity")));
        setReason((String) mapValue.get("reason"));
        setLastModifiedDate((Timestamp) mapValue.get("lastModifiedDate"));
        setLastModifiedByUserLogin((String) mapValue.get("lastModifiedByUserLogin"));
        setPartyId((String) mapValue.get("partyId"));
        setRoleTypeId((String) mapValue.get("roleTypeId"));
        setFromDate((Timestamp) mapValue.get("fromDate"));
        setThruDate((Timestamp) mapValue.get("thruDate"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("requirementId", getRequirementId());
        mapValue.put("requirementTypeId", getRequirementTypeId());
        mapValue.put("statusId", getStatusId());
        mapValue.put("facilityId", getFacilityId());
        mapValue.put("deliverableId", getDeliverableId());
        mapValue.put("fixedAssetId", getFixedAssetId());
        mapValue.put("productId", getProductId());
        mapValue.put("description", getDescription());
        mapValue.put("requirementStartDate", getRequirementStartDate());
        mapValue.put("requiredByDate", getRequiredByDate());
        mapValue.put("estimatedBudget", getEstimatedBudget());
        mapValue.put("quantity", getQuantity());
        mapValue.put("reason", getReason());
        mapValue.put("lastModifiedDate", getLastModifiedDate());
        mapValue.put("lastModifiedByUserLogin", getLastModifiedByUserLogin());
        mapValue.put("partyId", getPartyId());
        mapValue.put("roleTypeId", getRoleTypeId());
        mapValue.put("fromDate", getFromDate());
        mapValue.put("thruDate", getThruDate());
        return mapValue;
    }


}
