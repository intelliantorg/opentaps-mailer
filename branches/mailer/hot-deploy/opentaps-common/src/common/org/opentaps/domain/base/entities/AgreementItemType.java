package org.opentaps.domain.base.entities;

/*
* Copyright (c) 2008 - 2009 Open Source Strategies, Inc.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the Honest Public License.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* Honest Public License for more details.
*
* You should have received a copy of the Honest Public License
* along with this program; if not, write to Funambol,
* 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
*/

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity AgreementItemType.
 */
@javax.persistence.Entity
@Table(name="AGREEMENT_ITEM_TYPE")
public class AgreementItemType extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("agreementItemTypeId", "AGREEMENT_ITEM_TYPE_ID");
        fields.put("parentTypeId", "PARENT_TYPE_ID");
        fields.put("hasTable", "HAS_TABLE");
        fields.put("description", "DESCRIPTION");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
fieldMapColumns.put("AgreementItemType", fields);
}
  public static enum Fields implements EntityFieldInterface<AgreementItemType> {
    agreementItemTypeId("agreementItemTypeId"),
    parentTypeId("parentTypeId"),
    hasTable("hasTable"),
    description("description"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @org.hibernate.annotations.GenericGenerator(name="AgreementItemType_GEN",  strategy="org.opentaps.foundation.entity.hibernate.OpentapsIdentifierGenerator")
    @GeneratedValue(generator="AgreementItemType_GEN")   
    @Id
    
    @Column(name="AGREEMENT_ITEM_TYPE_ID")
    private String agreementItemTypeId;
    
    @Column(name="PARENT_TYPE_ID")
    private String parentTypeId;
    
    @Column(name="HAS_TABLE")
    private String hasTable;
    
    @Column(name="DESCRIPTION")
    private String description;
    
    @Column(name="LAST_UPDATED_STAMP")
    private Timestamp lastUpdatedStamp;
    
    @Column(name="LAST_UPDATED_TX_STAMP")
    private Timestamp lastUpdatedTxStamp;
    
    @Column(name="CREATED_STAMP")
    private Timestamp createdStamp;
    
    @Column(name="CREATED_TX_STAMP")
    private Timestamp createdTxStamp;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="PARENT_TYPE_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private AgreementItemType parentAgreementItemType = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="AGREEMENT_ITEM_TYPE_ID")
    private List<AgreementItem> agreementItems = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="agreementItemType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="AGREEMENT_ITEM_TYPE_ID")
    private List<AgreementItemToTermMap> agreementItemToTermMaps = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="PARENT_TYPE_ID")
    private List<AgreementItemType> childAgreementItemTypes = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="agreementItemType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="AGREEMENT_ITEM_TYPE_ID")
    private List<AgreementItemTypeAttr> agreementItemTypeAttrs = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="agreementItemType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="AGREEMENT_ITEM_TYPE_ID")
    private List<AgreementToItemMap> agreementToItemMaps = null;

  /**
   * Default constructor.
   */
  public AgreementItemType() {
      super();
      this.baseEntityName = "AgreementItemType";
      this.isView = false;
      this.resourceName = "PartyEntityLabels";
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("agreementItemTypeId");
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public AgreementItemType(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param agreementItemTypeId the agreementItemTypeId to set
     */
    public void setAgreementItemTypeId(String agreementItemTypeId) {
        this.agreementItemTypeId = agreementItemTypeId;
    }
    /**
     * Auto generated value setter.
     * @param parentTypeId the parentTypeId to set
     */
    public void setParentTypeId(String parentTypeId) {
        this.parentTypeId = parentTypeId;
    }
    /**
     * Auto generated value setter.
     * @param hasTable the hasTable to set
     */
    public void setHasTable(String hasTable) {
        this.hasTable = hasTable;
    }
    /**
     * Auto generated value setter.
     * @param description the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getAgreementItemTypeId() {
        return this.agreementItemTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getParentTypeId() {
        return this.parentTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getHasTable() {
        return this.hasTable;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDescription() {
        return this.description;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }

    /**
     * Auto generated method that gets the related <code>AgreementItemType</code> by the relation named <code>ParentAgreementItemType</code>.
     * @return the <code>AgreementItemType</code>
     * @throws RepositoryException if an error occurs
     */
    public AgreementItemType getParentAgreementItemType() throws RepositoryException {
        if (this.parentAgreementItemType == null) {
            this.parentAgreementItemType = getRelatedOne(AgreementItemType.class, "ParentAgreementItemType");
        }
        return this.parentAgreementItemType;
    }
    /**
     * Auto generated method that gets the related <code>AgreementItem</code> by the relation named <code>AgreementItem</code>.
     * @return the list of <code>AgreementItem</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AgreementItem> getAgreementItems() throws RepositoryException {
        if (this.agreementItems == null) {
            this.agreementItems = getRelated(AgreementItem.class, "AgreementItem");
        }
        return this.agreementItems;
    }
    /**
     * Auto generated method that gets the related <code>AgreementItemToTermMap</code> by the relation named <code>AgreementItemToTermMap</code>.
     * @return the list of <code>AgreementItemToTermMap</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AgreementItemToTermMap> getAgreementItemToTermMaps() throws RepositoryException {
        if (this.agreementItemToTermMaps == null) {
            this.agreementItemToTermMaps = getRelated(AgreementItemToTermMap.class, "AgreementItemToTermMap");
        }
        return this.agreementItemToTermMaps;
    }
    /**
     * Auto generated method that gets the related <code>AgreementItemType</code> by the relation named <code>ChildAgreementItemType</code>.
     * @return the list of <code>AgreementItemType</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AgreementItemType> getChildAgreementItemTypes() throws RepositoryException {
        if (this.childAgreementItemTypes == null) {
            this.childAgreementItemTypes = getRelated(AgreementItemType.class, "ChildAgreementItemType");
        }
        return this.childAgreementItemTypes;
    }
    /**
     * Auto generated method that gets the related <code>AgreementItemTypeAttr</code> by the relation named <code>AgreementItemTypeAttr</code>.
     * @return the list of <code>AgreementItemTypeAttr</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AgreementItemTypeAttr> getAgreementItemTypeAttrs() throws RepositoryException {
        if (this.agreementItemTypeAttrs == null) {
            this.agreementItemTypeAttrs = getRelated(AgreementItemTypeAttr.class, "AgreementItemTypeAttr");
        }
        return this.agreementItemTypeAttrs;
    }
    /**
     * Auto generated method that gets the related <code>AgreementToItemMap</code> by the relation named <code>AgreementToItemMap</code>.
     * @return the list of <code>AgreementToItemMap</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AgreementToItemMap> getAgreementToItemMaps() throws RepositoryException {
        if (this.agreementToItemMaps == null) {
            this.agreementToItemMaps = getRelated(AgreementToItemMap.class, "AgreementToItemMap");
        }
        return this.agreementToItemMaps;
    }

    /**
     * Auto generated value setter.
     * @param parentAgreementItemType the parentAgreementItemType to set
    */
    public void setParentAgreementItemType(AgreementItemType parentAgreementItemType) {
        this.parentAgreementItemType = parentAgreementItemType;
    }
    /**
     * Auto generated value setter.
     * @param agreementItems the agreementItems to set
    */
    public void setAgreementItems(List<AgreementItem> agreementItems) {
        this.agreementItems = agreementItems;
    }
    /**
     * Auto generated value setter.
     * @param agreementItemToTermMaps the agreementItemToTermMaps to set
    */
    public void setAgreementItemToTermMaps(List<AgreementItemToTermMap> agreementItemToTermMaps) {
        this.agreementItemToTermMaps = agreementItemToTermMaps;
    }
    /**
     * Auto generated value setter.
     * @param childAgreementItemTypes the childAgreementItemTypes to set
    */
    public void setChildAgreementItemTypes(List<AgreementItemType> childAgreementItemTypes) {
        this.childAgreementItemTypes = childAgreementItemTypes;
    }
    /**
     * Auto generated value setter.
     * @param agreementItemTypeAttrs the agreementItemTypeAttrs to set
    */
    public void setAgreementItemTypeAttrs(List<AgreementItemTypeAttr> agreementItemTypeAttrs) {
        this.agreementItemTypeAttrs = agreementItemTypeAttrs;
    }
    /**
     * Auto generated value setter.
     * @param agreementToItemMaps the agreementToItemMaps to set
    */
    public void setAgreementToItemMaps(List<AgreementToItemMap> agreementToItemMaps) {
        this.agreementToItemMaps = agreementToItemMaps;
    }

    /**
     * Auto generated method that add item to collection.
     */
    public void addAgreementItemToTermMap(AgreementItemToTermMap agreementItemToTermMap) {
        if (this.agreementItemToTermMaps == null) {
            this.agreementItemToTermMaps = new ArrayList<AgreementItemToTermMap>();
        }
        this.agreementItemToTermMaps.add(agreementItemToTermMap);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeAgreementItemToTermMap(AgreementItemToTermMap agreementItemToTermMap) {
        if (this.agreementItemToTermMaps == null) {
            return;
        }
        this.agreementItemToTermMaps.remove(agreementItemToTermMap);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearAgreementItemToTermMap() {
        if (this.agreementItemToTermMaps == null) {
            return;
        }
        this.agreementItemToTermMaps.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addAgreementItemTypeAttr(AgreementItemTypeAttr agreementItemTypeAttr) {
        if (this.agreementItemTypeAttrs == null) {
            this.agreementItemTypeAttrs = new ArrayList<AgreementItemTypeAttr>();
        }
        this.agreementItemTypeAttrs.add(agreementItemTypeAttr);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeAgreementItemTypeAttr(AgreementItemTypeAttr agreementItemTypeAttr) {
        if (this.agreementItemTypeAttrs == null) {
            return;
        }
        this.agreementItemTypeAttrs.remove(agreementItemTypeAttr);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearAgreementItemTypeAttr() {
        if (this.agreementItemTypeAttrs == null) {
            return;
        }
        this.agreementItemTypeAttrs.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addAgreementToItemMap(AgreementToItemMap agreementToItemMap) {
        if (this.agreementToItemMaps == null) {
            this.agreementToItemMaps = new ArrayList<AgreementToItemMap>();
        }
        this.agreementToItemMaps.add(agreementToItemMap);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeAgreementToItemMap(AgreementToItemMap agreementToItemMap) {
        if (this.agreementToItemMaps == null) {
            return;
        }
        this.agreementToItemMaps.remove(agreementToItemMap);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearAgreementToItemMap() {
        if (this.agreementToItemMaps == null) {
            return;
        }
        this.agreementToItemMaps.clear();
    }

    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setAgreementItemTypeId((String) mapValue.get("agreementItemTypeId"));
        setParentTypeId((String) mapValue.get("parentTypeId"));
        setHasTable((String) mapValue.get("hasTable"));
        setDescription((String) mapValue.get("description"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("agreementItemTypeId", getAgreementItemTypeId());
        mapValue.put("parentTypeId", getParentTypeId());
        mapValue.put("hasTable", getHasTable());
        mapValue.put("description", getDescription());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        return mapValue;
    }


}
