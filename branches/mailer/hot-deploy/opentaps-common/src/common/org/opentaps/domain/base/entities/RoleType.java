package org.opentaps.domain.base.entities;

/*
* Copyright (c) 2008 - 2009 Open Source Strategies, Inc.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the Honest Public License.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* Honest Public License for more details.
*
* You should have received a copy of the Honest Public License
* along with this program; if not, write to Funambol,
* 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
*/

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity RoleType.
 */
@javax.persistence.Entity
@Table(name="ROLE_TYPE")
public class RoleType extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("roleTypeId", "ROLE_TYPE_ID");
        fields.put("parentTypeId", "PARENT_TYPE_ID");
        fields.put("hasTable", "HAS_TABLE");
        fields.put("description", "DESCRIPTION");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
fieldMapColumns.put("RoleType", fields);
}
  public static enum Fields implements EntityFieldInterface<RoleType> {
    roleTypeId("roleTypeId"),
    parentTypeId("parentTypeId"),
    hasTable("hasTable"),
    description("description"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @org.hibernate.annotations.GenericGenerator(name="RoleType_GEN",  strategy="org.opentaps.foundation.entity.hibernate.OpentapsIdentifierGenerator")
    @GeneratedValue(generator="RoleType_GEN")   
    @Id
    
    @Column(name="ROLE_TYPE_ID")
    private String roleTypeId;
    
    @Column(name="PARENT_TYPE_ID")
    private String parentTypeId;
    
    @Column(name="HAS_TABLE")
    private String hasTable;
    
    @Column(name="DESCRIPTION")
    private String description;
    
    @Column(name="LAST_UPDATED_STAMP")
    private Timestamp lastUpdatedStamp;
    
    @Column(name="LAST_UPDATED_TX_STAMP")
    private Timestamp lastUpdatedTxStamp;
    
    @Column(name="CREATED_STAMP")
    private Timestamp createdStamp;
    
    @Column(name="CREATED_TX_STAMP")
    private Timestamp createdTxStamp;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="PARENT_TYPE_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private RoleType parentRoleType = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<AcctgTrans> acctgTranses = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<AcctgTransEntry> acctgTransEntrys = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID_FROM")
    private List<Agreement> fromAgreements = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID_TO")
    private List<Agreement> toAgreements = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<AgreementRole> agreementRoles = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<AgreementTerm> agreementTerms = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<AgreementTypeForRoleType> agreementTypeForRoleTypes = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<BillingAccountRole> billingAccountRoles = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID_TO")
    private List<CommunicationEvent> toCommunicationEvents = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID_FROM")
    private List<CommunicationEvent> fromCommunicationEvents = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<CommunicationEventRole> communicationEventRoles = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<ContentApproval> contentApprovals = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<ContentPurposeOperation> contentPurposeOperations = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<CustRequestRole> custRequestRoles = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<EmplPositionType> emplPositionTypes = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<FacilityGroupRole> facilityGroupRoles = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<FacilityRole> facilityRoles = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<FinAccountRole> finAccountRoles = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<FixedAsset> fixedAssets = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<GlAccountOrganization> glAccountOrganizations = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<GlAccountRole> glAccountRoles = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<Invoice> invoices = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<InvoiceRole> invoiceRoles = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<MarketingCampaignRole> marketingCampaignRoles = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<OrderItemRole> orderItemRoles = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<OrderRole> orderRoles = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<PartyContactMech> partyContactMeches = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<PartyFixedAssetAssignment> partyFixedAssetAssignments = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<PartyNeed> partyNeeds = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="fromRoleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID_FROM")
    private List<PartyRelationship> fromPartyRelationships = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="toRoleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID_TO")
    private List<PartyRelationship> toPartyRelationships = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID_VALID_FROM")
    private List<PartyRelationshipType> validFromPartyRelationshipTypes = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID_VALID_TO")
    private List<PartyRelationshipType> validToPartyRelationshipTypes = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<PartyRole> partyRoles = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID_TO")
    private List<Payment> toPayments = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<PicklistRole> picklistRoles = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<ProdCatalogRole> prodCatalogRoles = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<ProductCategoryRole> productCategoryRoles = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="USE_ROLE_TYPE_ID")
    private List<ProductContent> useProductContents = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<ProductStoreGroupRole> productStoreGroupRoles = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<ProductStoreRole> productStoreRoles = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="USE_ROLE_TYPE_ID")
    private List<ProductSubscriptionResource> useProductSubscriptionResources = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<QuoteRole> quoteRoles = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="PARENT_TYPE_ID")
    private List<RoleType> childRoleTypes = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<RoleTypeAttr> roleTypeAttrs = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<SalesOpportunityRole> salesOpportunityRoles = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<SegmentGroupRole> segmentGroupRoles = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<ShipmentCostEstimate> shipmentCostEstimates = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<Subscription> subscriptions = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="ORIGINATED_FROM_ROLE_TYPE_ID")
    private List<Subscription> originatedFromSubscriptions = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<TimesheetRole> timesheetRoles = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<ValidContactMechRole> validContactMechRoles = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<Visit> visits = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<WebSiteRole> webSiteRoles = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="roleType", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="ROLE_TYPE_ID")
    private List<WorkEffortPartyAssignment> workEffortPartyAssignments = null;

  /**
   * Default constructor.
   */
  public RoleType() {
      super();
      this.baseEntityName = "RoleType";
      this.isView = false;
      this.resourceName = "PartyEntityLabels";
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("roleTypeId");
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public RoleType(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param roleTypeId the roleTypeId to set
     */
    public void setRoleTypeId(String roleTypeId) {
        this.roleTypeId = roleTypeId;
    }
    /**
     * Auto generated value setter.
     * @param parentTypeId the parentTypeId to set
     */
    public void setParentTypeId(String parentTypeId) {
        this.parentTypeId = parentTypeId;
    }
    /**
     * Auto generated value setter.
     * @param hasTable the hasTable to set
     */
    public void setHasTable(String hasTable) {
        this.hasTable = hasTable;
    }
    /**
     * Auto generated value setter.
     * @param description the description to set
     */
    public void setDescription(String description) {
        this.description = description;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getRoleTypeId() {
        return this.roleTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getParentTypeId() {
        return this.parentTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getHasTable() {
        return this.hasTable;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDescription() {
        return this.description;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }

    /**
     * Auto generated method that gets the related <code>RoleType</code> by the relation named <code>ParentRoleType</code>.
     * @return the <code>RoleType</code>
     * @throws RepositoryException if an error occurs
     */
    public RoleType getParentRoleType() throws RepositoryException {
        if (this.parentRoleType == null) {
            this.parentRoleType = getRelatedOne(RoleType.class, "ParentRoleType");
        }
        return this.parentRoleType;
    }
    /**
     * Auto generated method that gets the related <code>AcctgTrans</code> by the relation named <code>AcctgTrans</code>.
     * @return the list of <code>AcctgTrans</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AcctgTrans> getAcctgTranses() throws RepositoryException {
        if (this.acctgTranses == null) {
            this.acctgTranses = getRelated(AcctgTrans.class, "AcctgTrans");
        }
        return this.acctgTranses;
    }
    /**
     * Auto generated method that gets the related <code>AcctgTransEntry</code> by the relation named <code>AcctgTransEntry</code>.
     * @return the list of <code>AcctgTransEntry</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AcctgTransEntry> getAcctgTransEntrys() throws RepositoryException {
        if (this.acctgTransEntrys == null) {
            this.acctgTransEntrys = getRelated(AcctgTransEntry.class, "AcctgTransEntry");
        }
        return this.acctgTransEntrys;
    }
    /**
     * Auto generated method that gets the related <code>Agreement</code> by the relation named <code>FromAgreement</code>.
     * @return the list of <code>Agreement</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Agreement> getFromAgreements() throws RepositoryException {
        if (this.fromAgreements == null) {
            this.fromAgreements = getRelated(Agreement.class, "FromAgreement");
        }
        return this.fromAgreements;
    }
    /**
     * Auto generated method that gets the related <code>Agreement</code> by the relation named <code>ToAgreement</code>.
     * @return the list of <code>Agreement</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Agreement> getToAgreements() throws RepositoryException {
        if (this.toAgreements == null) {
            this.toAgreements = getRelated(Agreement.class, "ToAgreement");
        }
        return this.toAgreements;
    }
    /**
     * Auto generated method that gets the related <code>AgreementRole</code> by the relation named <code>AgreementRole</code>.
     * @return the list of <code>AgreementRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AgreementRole> getAgreementRoles() throws RepositoryException {
        if (this.agreementRoles == null) {
            this.agreementRoles = getRelated(AgreementRole.class, "AgreementRole");
        }
        return this.agreementRoles;
    }
    /**
     * Auto generated method that gets the related <code>AgreementTerm</code> by the relation named <code>AgreementTerm</code>.
     * @return the list of <code>AgreementTerm</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AgreementTerm> getAgreementTerms() throws RepositoryException {
        if (this.agreementTerms == null) {
            this.agreementTerms = getRelated(AgreementTerm.class, "AgreementTerm");
        }
        return this.agreementTerms;
    }
    /**
     * Auto generated method that gets the related <code>AgreementTypeForRoleType</code> by the relation named <code>AgreementTypeForRoleType</code>.
     * @return the list of <code>AgreementTypeForRoleType</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AgreementTypeForRoleType> getAgreementTypeForRoleTypes() throws RepositoryException {
        if (this.agreementTypeForRoleTypes == null) {
            this.agreementTypeForRoleTypes = getRelated(AgreementTypeForRoleType.class, "AgreementTypeForRoleType");
        }
        return this.agreementTypeForRoleTypes;
    }
    /**
     * Auto generated method that gets the related <code>BillingAccountRole</code> by the relation named <code>BillingAccountRole</code>.
     * @return the list of <code>BillingAccountRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends BillingAccountRole> getBillingAccountRoles() throws RepositoryException {
        if (this.billingAccountRoles == null) {
            this.billingAccountRoles = getRelated(BillingAccountRole.class, "BillingAccountRole");
        }
        return this.billingAccountRoles;
    }
    /**
     * Auto generated method that gets the related <code>CommunicationEvent</code> by the relation named <code>ToCommunicationEvent</code>.
     * @return the list of <code>CommunicationEvent</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CommunicationEvent> getToCommunicationEvents() throws RepositoryException {
        if (this.toCommunicationEvents == null) {
            this.toCommunicationEvents = getRelated(CommunicationEvent.class, "ToCommunicationEvent");
        }
        return this.toCommunicationEvents;
    }
    /**
     * Auto generated method that gets the related <code>CommunicationEvent</code> by the relation named <code>FromCommunicationEvent</code>.
     * @return the list of <code>CommunicationEvent</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CommunicationEvent> getFromCommunicationEvents() throws RepositoryException {
        if (this.fromCommunicationEvents == null) {
            this.fromCommunicationEvents = getRelated(CommunicationEvent.class, "FromCommunicationEvent");
        }
        return this.fromCommunicationEvents;
    }
    /**
     * Auto generated method that gets the related <code>CommunicationEventRole</code> by the relation named <code>CommunicationEventRole</code>.
     * @return the list of <code>CommunicationEventRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CommunicationEventRole> getCommunicationEventRoles() throws RepositoryException {
        if (this.communicationEventRoles == null) {
            this.communicationEventRoles = getRelated(CommunicationEventRole.class, "CommunicationEventRole");
        }
        return this.communicationEventRoles;
    }
    /**
     * Auto generated method that gets the related <code>ContentApproval</code> by the relation named <code>ContentApproval</code>.
     * @return the list of <code>ContentApproval</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ContentApproval> getContentApprovals() throws RepositoryException {
        if (this.contentApprovals == null) {
            this.contentApprovals = getRelated(ContentApproval.class, "ContentApproval");
        }
        return this.contentApprovals;
    }
    /**
     * Auto generated method that gets the related <code>ContentPurposeOperation</code> by the relation named <code>ContentPurposeOperation</code>.
     * @return the list of <code>ContentPurposeOperation</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ContentPurposeOperation> getContentPurposeOperations() throws RepositoryException {
        if (this.contentPurposeOperations == null) {
            this.contentPurposeOperations = getRelated(ContentPurposeOperation.class, "ContentPurposeOperation");
        }
        return this.contentPurposeOperations;
    }
    /**
     * Auto generated method that gets the related <code>CustRequestRole</code> by the relation named <code>CustRequestRole</code>.
     * @return the list of <code>CustRequestRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends CustRequestRole> getCustRequestRoles() throws RepositoryException {
        if (this.custRequestRoles == null) {
            this.custRequestRoles = getRelated(CustRequestRole.class, "CustRequestRole");
        }
        return this.custRequestRoles;
    }
    /**
     * Auto generated method that gets the related <code>EmplPositionType</code> by the relation named <code>EmplPositionType</code>.
     * @return the list of <code>EmplPositionType</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends EmplPositionType> getEmplPositionTypes() throws RepositoryException {
        if (this.emplPositionTypes == null) {
            this.emplPositionTypes = getRelated(EmplPositionType.class, "EmplPositionType");
        }
        return this.emplPositionTypes;
    }
    /**
     * Auto generated method that gets the related <code>FacilityGroupRole</code> by the relation named <code>FacilityGroupRole</code>.
     * @return the list of <code>FacilityGroupRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityGroupRole> getFacilityGroupRoles() throws RepositoryException {
        if (this.facilityGroupRoles == null) {
            this.facilityGroupRoles = getRelated(FacilityGroupRole.class, "FacilityGroupRole");
        }
        return this.facilityGroupRoles;
    }
    /**
     * Auto generated method that gets the related <code>FacilityRole</code> by the relation named <code>FacilityRole</code>.
     * @return the list of <code>FacilityRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FacilityRole> getFacilityRoles() throws RepositoryException {
        if (this.facilityRoles == null) {
            this.facilityRoles = getRelated(FacilityRole.class, "FacilityRole");
        }
        return this.facilityRoles;
    }
    /**
     * Auto generated method that gets the related <code>FinAccountRole</code> by the relation named <code>FinAccountRole</code>.
     * @return the list of <code>FinAccountRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FinAccountRole> getFinAccountRoles() throws RepositoryException {
        if (this.finAccountRoles == null) {
            this.finAccountRoles = getRelated(FinAccountRole.class, "FinAccountRole");
        }
        return this.finAccountRoles;
    }
    /**
     * Auto generated method that gets the related <code>FixedAsset</code> by the relation named <code>FixedAsset</code>.
     * @return the list of <code>FixedAsset</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FixedAsset> getFixedAssets() throws RepositoryException {
        if (this.fixedAssets == null) {
            this.fixedAssets = getRelated(FixedAsset.class, "FixedAsset");
        }
        return this.fixedAssets;
    }
    /**
     * Auto generated method that gets the related <code>GlAccountOrganization</code> by the relation named <code>GlAccountOrganization</code>.
     * @return the list of <code>GlAccountOrganization</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends GlAccountOrganization> getGlAccountOrganizations() throws RepositoryException {
        if (this.glAccountOrganizations == null) {
            this.glAccountOrganizations = getRelated(GlAccountOrganization.class, "GlAccountOrganization");
        }
        return this.glAccountOrganizations;
    }
    /**
     * Auto generated method that gets the related <code>GlAccountRole</code> by the relation named <code>GlAccountRole</code>.
     * @return the list of <code>GlAccountRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends GlAccountRole> getGlAccountRoles() throws RepositoryException {
        if (this.glAccountRoles == null) {
            this.glAccountRoles = getRelated(GlAccountRole.class, "GlAccountRole");
        }
        return this.glAccountRoles;
    }
    /**
     * Auto generated method that gets the related <code>Invoice</code> by the relation named <code>Invoice</code>.
     * @return the list of <code>Invoice</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Invoice> getInvoices() throws RepositoryException {
        if (this.invoices == null) {
            this.invoices = getRelated(Invoice.class, "Invoice");
        }
        return this.invoices;
    }
    /**
     * Auto generated method that gets the related <code>InvoiceRole</code> by the relation named <code>InvoiceRole</code>.
     * @return the list of <code>InvoiceRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends InvoiceRole> getInvoiceRoles() throws RepositoryException {
        if (this.invoiceRoles == null) {
            this.invoiceRoles = getRelated(InvoiceRole.class, "InvoiceRole");
        }
        return this.invoiceRoles;
    }
    /**
     * Auto generated method that gets the related <code>MarketingCampaignRole</code> by the relation named <code>MarketingCampaignRole</code>.
     * @return the list of <code>MarketingCampaignRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends MarketingCampaignRole> getMarketingCampaignRoles() throws RepositoryException {
        if (this.marketingCampaignRoles == null) {
            this.marketingCampaignRoles = getRelated(MarketingCampaignRole.class, "MarketingCampaignRole");
        }
        return this.marketingCampaignRoles;
    }
    /**
     * Auto generated method that gets the related <code>OrderItemRole</code> by the relation named <code>OrderItemRole</code>.
     * @return the list of <code>OrderItemRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OrderItemRole> getOrderItemRoles() throws RepositoryException {
        if (this.orderItemRoles == null) {
            this.orderItemRoles = getRelated(OrderItemRole.class, "OrderItemRole");
        }
        return this.orderItemRoles;
    }
    /**
     * Auto generated method that gets the related <code>OrderRole</code> by the relation named <code>OrderRole</code>.
     * @return the list of <code>OrderRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends OrderRole> getOrderRoles() throws RepositoryException {
        if (this.orderRoles == null) {
            this.orderRoles = getRelated(OrderRole.class, "OrderRole");
        }
        return this.orderRoles;
    }
    /**
     * Auto generated method that gets the related <code>PartyContactMech</code> by the relation named <code>PartyContactMech</code>.
     * @return the list of <code>PartyContactMech</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyContactMech> getPartyContactMeches() throws RepositoryException {
        if (this.partyContactMeches == null) {
            this.partyContactMeches = getRelated(PartyContactMech.class, "PartyContactMech");
        }
        return this.partyContactMeches;
    }
    /**
     * Auto generated method that gets the related <code>PartyFixedAssetAssignment</code> by the relation named <code>PartyFixedAssetAssignment</code>.
     * @return the list of <code>PartyFixedAssetAssignment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyFixedAssetAssignment> getPartyFixedAssetAssignments() throws RepositoryException {
        if (this.partyFixedAssetAssignments == null) {
            this.partyFixedAssetAssignments = getRelated(PartyFixedAssetAssignment.class, "PartyFixedAssetAssignment");
        }
        return this.partyFixedAssetAssignments;
    }
    /**
     * Auto generated method that gets the related <code>PartyNeed</code> by the relation named <code>PartyNeed</code>.
     * @return the list of <code>PartyNeed</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyNeed> getPartyNeeds() throws RepositoryException {
        if (this.partyNeeds == null) {
            this.partyNeeds = getRelated(PartyNeed.class, "PartyNeed");
        }
        return this.partyNeeds;
    }
    /**
     * Auto generated method that gets the related <code>PartyRelationship</code> by the relation named <code>FromPartyRelationship</code>.
     * @return the list of <code>PartyRelationship</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyRelationship> getFromPartyRelationships() throws RepositoryException {
        if (this.fromPartyRelationships == null) {
            this.fromPartyRelationships = getRelated(PartyRelationship.class, "FromPartyRelationship");
        }
        return this.fromPartyRelationships;
    }
    /**
     * Auto generated method that gets the related <code>PartyRelationship</code> by the relation named <code>ToPartyRelationship</code>.
     * @return the list of <code>PartyRelationship</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyRelationship> getToPartyRelationships() throws RepositoryException {
        if (this.toPartyRelationships == null) {
            this.toPartyRelationships = getRelated(PartyRelationship.class, "ToPartyRelationship");
        }
        return this.toPartyRelationships;
    }
    /**
     * Auto generated method that gets the related <code>PartyRelationshipType</code> by the relation named <code>ValidFromPartyRelationshipType</code>.
     * @return the list of <code>PartyRelationshipType</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyRelationshipType> getValidFromPartyRelationshipTypes() throws RepositoryException {
        if (this.validFromPartyRelationshipTypes == null) {
            this.validFromPartyRelationshipTypes = getRelated(PartyRelationshipType.class, "ValidFromPartyRelationshipType");
        }
        return this.validFromPartyRelationshipTypes;
    }
    /**
     * Auto generated method that gets the related <code>PartyRelationshipType</code> by the relation named <code>ValidToPartyRelationshipType</code>.
     * @return the list of <code>PartyRelationshipType</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyRelationshipType> getValidToPartyRelationshipTypes() throws RepositoryException {
        if (this.validToPartyRelationshipTypes == null) {
            this.validToPartyRelationshipTypes = getRelated(PartyRelationshipType.class, "ValidToPartyRelationshipType");
        }
        return this.validToPartyRelationshipTypes;
    }
    /**
     * Auto generated method that gets the related <code>PartyRole</code> by the relation named <code>PartyRole</code>.
     * @return the list of <code>PartyRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyRole> getPartyRoles() throws RepositoryException {
        if (this.partyRoles == null) {
            this.partyRoles = getRelated(PartyRole.class, "PartyRole");
        }
        return this.partyRoles;
    }
    /**
     * Auto generated method that gets the related <code>Payment</code> by the relation named <code>ToPayment</code>.
     * @return the list of <code>Payment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Payment> getToPayments() throws RepositoryException {
        if (this.toPayments == null) {
            this.toPayments = getRelated(Payment.class, "ToPayment");
        }
        return this.toPayments;
    }
    /**
     * Auto generated method that gets the related <code>PicklistRole</code> by the relation named <code>PicklistRole</code>.
     * @return the list of <code>PicklistRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PicklistRole> getPicklistRoles() throws RepositoryException {
        if (this.picklistRoles == null) {
            this.picklistRoles = getRelated(PicklistRole.class, "PicklistRole");
        }
        return this.picklistRoles;
    }
    /**
     * Auto generated method that gets the related <code>ProdCatalogRole</code> by the relation named <code>ProdCatalogRole</code>.
     * @return the list of <code>ProdCatalogRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProdCatalogRole> getProdCatalogRoles() throws RepositoryException {
        if (this.prodCatalogRoles == null) {
            this.prodCatalogRoles = getRelated(ProdCatalogRole.class, "ProdCatalogRole");
        }
        return this.prodCatalogRoles;
    }
    /**
     * Auto generated method that gets the related <code>ProductCategoryRole</code> by the relation named <code>ProductCategoryRole</code>.
     * @return the list of <code>ProductCategoryRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductCategoryRole> getProductCategoryRoles() throws RepositoryException {
        if (this.productCategoryRoles == null) {
            this.productCategoryRoles = getRelated(ProductCategoryRole.class, "ProductCategoryRole");
        }
        return this.productCategoryRoles;
    }
    /**
     * Auto generated method that gets the related <code>ProductContent</code> by the relation named <code>UseProductContent</code>.
     * @return the list of <code>ProductContent</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductContent> getUseProductContents() throws RepositoryException {
        if (this.useProductContents == null) {
            this.useProductContents = getRelated(ProductContent.class, "UseProductContent");
        }
        return this.useProductContents;
    }
    /**
     * Auto generated method that gets the related <code>ProductStoreGroupRole</code> by the relation named <code>ProductStoreGroupRole</code>.
     * @return the list of <code>ProductStoreGroupRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductStoreGroupRole> getProductStoreGroupRoles() throws RepositoryException {
        if (this.productStoreGroupRoles == null) {
            this.productStoreGroupRoles = getRelated(ProductStoreGroupRole.class, "ProductStoreGroupRole");
        }
        return this.productStoreGroupRoles;
    }
    /**
     * Auto generated method that gets the related <code>ProductStoreRole</code> by the relation named <code>ProductStoreRole</code>.
     * @return the list of <code>ProductStoreRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductStoreRole> getProductStoreRoles() throws RepositoryException {
        if (this.productStoreRoles == null) {
            this.productStoreRoles = getRelated(ProductStoreRole.class, "ProductStoreRole");
        }
        return this.productStoreRoles;
    }
    /**
     * Auto generated method that gets the related <code>ProductSubscriptionResource</code> by the relation named <code>UseProductSubscriptionResource</code>.
     * @return the list of <code>ProductSubscriptionResource</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ProductSubscriptionResource> getUseProductSubscriptionResources() throws RepositoryException {
        if (this.useProductSubscriptionResources == null) {
            this.useProductSubscriptionResources = getRelated(ProductSubscriptionResource.class, "UseProductSubscriptionResource");
        }
        return this.useProductSubscriptionResources;
    }
    /**
     * Auto generated method that gets the related <code>QuoteRole</code> by the relation named <code>QuoteRole</code>.
     * @return the list of <code>QuoteRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends QuoteRole> getQuoteRoles() throws RepositoryException {
        if (this.quoteRoles == null) {
            this.quoteRoles = getRelated(QuoteRole.class, "QuoteRole");
        }
        return this.quoteRoles;
    }
    /**
     * Auto generated method that gets the related <code>RoleType</code> by the relation named <code>ChildRoleType</code>.
     * @return the list of <code>RoleType</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends RoleType> getChildRoleTypes() throws RepositoryException {
        if (this.childRoleTypes == null) {
            this.childRoleTypes = getRelated(RoleType.class, "ChildRoleType");
        }
        return this.childRoleTypes;
    }
    /**
     * Auto generated method that gets the related <code>RoleTypeAttr</code> by the relation named <code>RoleTypeAttr</code>.
     * @return the list of <code>RoleTypeAttr</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends RoleTypeAttr> getRoleTypeAttrs() throws RepositoryException {
        if (this.roleTypeAttrs == null) {
            this.roleTypeAttrs = getRelated(RoleTypeAttr.class, "RoleTypeAttr");
        }
        return this.roleTypeAttrs;
    }
    /**
     * Auto generated method that gets the related <code>SalesOpportunityRole</code> by the relation named <code>SalesOpportunityRole</code>.
     * @return the list of <code>SalesOpportunityRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SalesOpportunityRole> getSalesOpportunityRoles() throws RepositoryException {
        if (this.salesOpportunityRoles == null) {
            this.salesOpportunityRoles = getRelated(SalesOpportunityRole.class, "SalesOpportunityRole");
        }
        return this.salesOpportunityRoles;
    }
    /**
     * Auto generated method that gets the related <code>SegmentGroupRole</code> by the relation named <code>SegmentGroupRole</code>.
     * @return the list of <code>SegmentGroupRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SegmentGroupRole> getSegmentGroupRoles() throws RepositoryException {
        if (this.segmentGroupRoles == null) {
            this.segmentGroupRoles = getRelated(SegmentGroupRole.class, "SegmentGroupRole");
        }
        return this.segmentGroupRoles;
    }
    /**
     * Auto generated method that gets the related <code>ShipmentCostEstimate</code> by the relation named <code>ShipmentCostEstimate</code>.
     * @return the list of <code>ShipmentCostEstimate</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ShipmentCostEstimate> getShipmentCostEstimates() throws RepositoryException {
        if (this.shipmentCostEstimates == null) {
            this.shipmentCostEstimates = getRelated(ShipmentCostEstimate.class, "ShipmentCostEstimate");
        }
        return this.shipmentCostEstimates;
    }
    /**
     * Auto generated method that gets the related <code>Subscription</code> by the relation named <code>Subscription</code>.
     * @return the list of <code>Subscription</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Subscription> getSubscriptions() throws RepositoryException {
        if (this.subscriptions == null) {
            this.subscriptions = getRelated(Subscription.class, "Subscription");
        }
        return this.subscriptions;
    }
    /**
     * Auto generated method that gets the related <code>Subscription</code> by the relation named <code>OriginatedFromSubscription</code>.
     * @return the list of <code>Subscription</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Subscription> getOriginatedFromSubscriptions() throws RepositoryException {
        if (this.originatedFromSubscriptions == null) {
            this.originatedFromSubscriptions = getRelated(Subscription.class, "OriginatedFromSubscription");
        }
        return this.originatedFromSubscriptions;
    }
    /**
     * Auto generated method that gets the related <code>TimesheetRole</code> by the relation named <code>TimesheetRole</code>.
     * @return the list of <code>TimesheetRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends TimesheetRole> getTimesheetRoles() throws RepositoryException {
        if (this.timesheetRoles == null) {
            this.timesheetRoles = getRelated(TimesheetRole.class, "TimesheetRole");
        }
        return this.timesheetRoles;
    }
    /**
     * Auto generated method that gets the related <code>ValidContactMechRole</code> by the relation named <code>ValidContactMechRole</code>.
     * @return the list of <code>ValidContactMechRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends ValidContactMechRole> getValidContactMechRoles() throws RepositoryException {
        if (this.validContactMechRoles == null) {
            this.validContactMechRoles = getRelated(ValidContactMechRole.class, "ValidContactMechRole");
        }
        return this.validContactMechRoles;
    }
    /**
     * Auto generated method that gets the related <code>Visit</code> by the relation named <code>Visit</code>.
     * @return the list of <code>Visit</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Visit> getVisits() throws RepositoryException {
        if (this.visits == null) {
            this.visits = getRelated(Visit.class, "Visit");
        }
        return this.visits;
    }
    /**
     * Auto generated method that gets the related <code>WebSiteRole</code> by the relation named <code>WebSiteRole</code>.
     * @return the list of <code>WebSiteRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends WebSiteRole> getWebSiteRoles() throws RepositoryException {
        if (this.webSiteRoles == null) {
            this.webSiteRoles = getRelated(WebSiteRole.class, "WebSiteRole");
        }
        return this.webSiteRoles;
    }
    /**
     * Auto generated method that gets the related <code>WorkEffortPartyAssignment</code> by the relation named <code>WorkEffortPartyAssignment</code>.
     * @return the list of <code>WorkEffortPartyAssignment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends WorkEffortPartyAssignment> getWorkEffortPartyAssignments() throws RepositoryException {
        if (this.workEffortPartyAssignments == null) {
            this.workEffortPartyAssignments = getRelated(WorkEffortPartyAssignment.class, "WorkEffortPartyAssignment");
        }
        return this.workEffortPartyAssignments;
    }

    /**
     * Auto generated value setter.
     * @param parentRoleType the parentRoleType to set
    */
    public void setParentRoleType(RoleType parentRoleType) {
        this.parentRoleType = parentRoleType;
    }
    /**
     * Auto generated value setter.
     * @param acctgTranses the acctgTranses to set
    */
    public void setAcctgTranses(List<AcctgTrans> acctgTranses) {
        this.acctgTranses = acctgTranses;
    }
    /**
     * Auto generated value setter.
     * @param acctgTransEntrys the acctgTransEntrys to set
    */
    public void setAcctgTransEntrys(List<AcctgTransEntry> acctgTransEntrys) {
        this.acctgTransEntrys = acctgTransEntrys;
    }
    /**
     * Auto generated value setter.
     * @param fromAgreements the fromAgreements to set
    */
    public void setFromAgreements(List<Agreement> fromAgreements) {
        this.fromAgreements = fromAgreements;
    }
    /**
     * Auto generated value setter.
     * @param toAgreements the toAgreements to set
    */
    public void setToAgreements(List<Agreement> toAgreements) {
        this.toAgreements = toAgreements;
    }
    /**
     * Auto generated value setter.
     * @param agreementRoles the agreementRoles to set
    */
    public void setAgreementRoles(List<AgreementRole> agreementRoles) {
        this.agreementRoles = agreementRoles;
    }
    /**
     * Auto generated value setter.
     * @param agreementTerms the agreementTerms to set
    */
    public void setAgreementTerms(List<AgreementTerm> agreementTerms) {
        this.agreementTerms = agreementTerms;
    }
    /**
     * Auto generated value setter.
     * @param agreementTypeForRoleTypes the agreementTypeForRoleTypes to set
    */
    public void setAgreementTypeForRoleTypes(List<AgreementTypeForRoleType> agreementTypeForRoleTypes) {
        this.agreementTypeForRoleTypes = agreementTypeForRoleTypes;
    }
    /**
     * Auto generated value setter.
     * @param billingAccountRoles the billingAccountRoles to set
    */
    public void setBillingAccountRoles(List<BillingAccountRole> billingAccountRoles) {
        this.billingAccountRoles = billingAccountRoles;
    }
    /**
     * Auto generated value setter.
     * @param toCommunicationEvents the toCommunicationEvents to set
    */
    public void setToCommunicationEvents(List<CommunicationEvent> toCommunicationEvents) {
        this.toCommunicationEvents = toCommunicationEvents;
    }
    /**
     * Auto generated value setter.
     * @param fromCommunicationEvents the fromCommunicationEvents to set
    */
    public void setFromCommunicationEvents(List<CommunicationEvent> fromCommunicationEvents) {
        this.fromCommunicationEvents = fromCommunicationEvents;
    }
    /**
     * Auto generated value setter.
     * @param communicationEventRoles the communicationEventRoles to set
    */
    public void setCommunicationEventRoles(List<CommunicationEventRole> communicationEventRoles) {
        this.communicationEventRoles = communicationEventRoles;
    }
    /**
     * Auto generated value setter.
     * @param contentApprovals the contentApprovals to set
    */
    public void setContentApprovals(List<ContentApproval> contentApprovals) {
        this.contentApprovals = contentApprovals;
    }
    /**
     * Auto generated value setter.
     * @param contentPurposeOperations the contentPurposeOperations to set
    */
    public void setContentPurposeOperations(List<ContentPurposeOperation> contentPurposeOperations) {
        this.contentPurposeOperations = contentPurposeOperations;
    }
    /**
     * Auto generated value setter.
     * @param custRequestRoles the custRequestRoles to set
    */
    public void setCustRequestRoles(List<CustRequestRole> custRequestRoles) {
        this.custRequestRoles = custRequestRoles;
    }
    /**
     * Auto generated value setter.
     * @param emplPositionTypes the emplPositionTypes to set
    */
    public void setEmplPositionTypes(List<EmplPositionType> emplPositionTypes) {
        this.emplPositionTypes = emplPositionTypes;
    }
    /**
     * Auto generated value setter.
     * @param facilityGroupRoles the facilityGroupRoles to set
    */
    public void setFacilityGroupRoles(List<FacilityGroupRole> facilityGroupRoles) {
        this.facilityGroupRoles = facilityGroupRoles;
    }
    /**
     * Auto generated value setter.
     * @param facilityRoles the facilityRoles to set
    */
    public void setFacilityRoles(List<FacilityRole> facilityRoles) {
        this.facilityRoles = facilityRoles;
    }
    /**
     * Auto generated value setter.
     * @param finAccountRoles the finAccountRoles to set
    */
    public void setFinAccountRoles(List<FinAccountRole> finAccountRoles) {
        this.finAccountRoles = finAccountRoles;
    }
    /**
     * Auto generated value setter.
     * @param fixedAssets the fixedAssets to set
    */
    public void setFixedAssets(List<FixedAsset> fixedAssets) {
        this.fixedAssets = fixedAssets;
    }
    /**
     * Auto generated value setter.
     * @param glAccountOrganizations the glAccountOrganizations to set
    */
    public void setGlAccountOrganizations(List<GlAccountOrganization> glAccountOrganizations) {
        this.glAccountOrganizations = glAccountOrganizations;
    }
    /**
     * Auto generated value setter.
     * @param glAccountRoles the glAccountRoles to set
    */
    public void setGlAccountRoles(List<GlAccountRole> glAccountRoles) {
        this.glAccountRoles = glAccountRoles;
    }
    /**
     * Auto generated value setter.
     * @param invoices the invoices to set
    */
    public void setInvoices(List<Invoice> invoices) {
        this.invoices = invoices;
    }
    /**
     * Auto generated value setter.
     * @param invoiceRoles the invoiceRoles to set
    */
    public void setInvoiceRoles(List<InvoiceRole> invoiceRoles) {
        this.invoiceRoles = invoiceRoles;
    }
    /**
     * Auto generated value setter.
     * @param marketingCampaignRoles the marketingCampaignRoles to set
    */
    public void setMarketingCampaignRoles(List<MarketingCampaignRole> marketingCampaignRoles) {
        this.marketingCampaignRoles = marketingCampaignRoles;
    }
    /**
     * Auto generated value setter.
     * @param orderItemRoles the orderItemRoles to set
    */
    public void setOrderItemRoles(List<OrderItemRole> orderItemRoles) {
        this.orderItemRoles = orderItemRoles;
    }
    /**
     * Auto generated value setter.
     * @param orderRoles the orderRoles to set
    */
    public void setOrderRoles(List<OrderRole> orderRoles) {
        this.orderRoles = orderRoles;
    }
    /**
     * Auto generated value setter.
     * @param partyContactMeches the partyContactMeches to set
    */
    public void setPartyContactMeches(List<PartyContactMech> partyContactMeches) {
        this.partyContactMeches = partyContactMeches;
    }
    /**
     * Auto generated value setter.
     * @param partyFixedAssetAssignments the partyFixedAssetAssignments to set
    */
    public void setPartyFixedAssetAssignments(List<PartyFixedAssetAssignment> partyFixedAssetAssignments) {
        this.partyFixedAssetAssignments = partyFixedAssetAssignments;
    }
    /**
     * Auto generated value setter.
     * @param partyNeeds the partyNeeds to set
    */
    public void setPartyNeeds(List<PartyNeed> partyNeeds) {
        this.partyNeeds = partyNeeds;
    }
    /**
     * Auto generated value setter.
     * @param fromPartyRelationships the fromPartyRelationships to set
    */
    public void setFromPartyRelationships(List<PartyRelationship> fromPartyRelationships) {
        this.fromPartyRelationships = fromPartyRelationships;
    }
    /**
     * Auto generated value setter.
     * @param toPartyRelationships the toPartyRelationships to set
    */
    public void setToPartyRelationships(List<PartyRelationship> toPartyRelationships) {
        this.toPartyRelationships = toPartyRelationships;
    }
    /**
     * Auto generated value setter.
     * @param validFromPartyRelationshipTypes the validFromPartyRelationshipTypes to set
    */
    public void setValidFromPartyRelationshipTypes(List<PartyRelationshipType> validFromPartyRelationshipTypes) {
        this.validFromPartyRelationshipTypes = validFromPartyRelationshipTypes;
    }
    /**
     * Auto generated value setter.
     * @param validToPartyRelationshipTypes the validToPartyRelationshipTypes to set
    */
    public void setValidToPartyRelationshipTypes(List<PartyRelationshipType> validToPartyRelationshipTypes) {
        this.validToPartyRelationshipTypes = validToPartyRelationshipTypes;
    }
    /**
     * Auto generated value setter.
     * @param partyRoles the partyRoles to set
    */
    public void setPartyRoles(List<PartyRole> partyRoles) {
        this.partyRoles = partyRoles;
    }
    /**
     * Auto generated value setter.
     * @param toPayments the toPayments to set
    */
    public void setToPayments(List<Payment> toPayments) {
        this.toPayments = toPayments;
    }
    /**
     * Auto generated value setter.
     * @param picklistRoles the picklistRoles to set
    */
    public void setPicklistRoles(List<PicklistRole> picklistRoles) {
        this.picklistRoles = picklistRoles;
    }
    /**
     * Auto generated value setter.
     * @param prodCatalogRoles the prodCatalogRoles to set
    */
    public void setProdCatalogRoles(List<ProdCatalogRole> prodCatalogRoles) {
        this.prodCatalogRoles = prodCatalogRoles;
    }
    /**
     * Auto generated value setter.
     * @param productCategoryRoles the productCategoryRoles to set
    */
    public void setProductCategoryRoles(List<ProductCategoryRole> productCategoryRoles) {
        this.productCategoryRoles = productCategoryRoles;
    }
    /**
     * Auto generated value setter.
     * @param useProductContents the useProductContents to set
    */
    public void setUseProductContents(List<ProductContent> useProductContents) {
        this.useProductContents = useProductContents;
    }
    /**
     * Auto generated value setter.
     * @param productStoreGroupRoles the productStoreGroupRoles to set
    */
    public void setProductStoreGroupRoles(List<ProductStoreGroupRole> productStoreGroupRoles) {
        this.productStoreGroupRoles = productStoreGroupRoles;
    }
    /**
     * Auto generated value setter.
     * @param productStoreRoles the productStoreRoles to set
    */
    public void setProductStoreRoles(List<ProductStoreRole> productStoreRoles) {
        this.productStoreRoles = productStoreRoles;
    }
    /**
     * Auto generated value setter.
     * @param useProductSubscriptionResources the useProductSubscriptionResources to set
    */
    public void setUseProductSubscriptionResources(List<ProductSubscriptionResource> useProductSubscriptionResources) {
        this.useProductSubscriptionResources = useProductSubscriptionResources;
    }
    /**
     * Auto generated value setter.
     * @param quoteRoles the quoteRoles to set
    */
    public void setQuoteRoles(List<QuoteRole> quoteRoles) {
        this.quoteRoles = quoteRoles;
    }
    /**
     * Auto generated value setter.
     * @param childRoleTypes the childRoleTypes to set
    */
    public void setChildRoleTypes(List<RoleType> childRoleTypes) {
        this.childRoleTypes = childRoleTypes;
    }
    /**
     * Auto generated value setter.
     * @param roleTypeAttrs the roleTypeAttrs to set
    */
    public void setRoleTypeAttrs(List<RoleTypeAttr> roleTypeAttrs) {
        this.roleTypeAttrs = roleTypeAttrs;
    }
    /**
     * Auto generated value setter.
     * @param salesOpportunityRoles the salesOpportunityRoles to set
    */
    public void setSalesOpportunityRoles(List<SalesOpportunityRole> salesOpportunityRoles) {
        this.salesOpportunityRoles = salesOpportunityRoles;
    }
    /**
     * Auto generated value setter.
     * @param segmentGroupRoles the segmentGroupRoles to set
    */
    public void setSegmentGroupRoles(List<SegmentGroupRole> segmentGroupRoles) {
        this.segmentGroupRoles = segmentGroupRoles;
    }
    /**
     * Auto generated value setter.
     * @param shipmentCostEstimates the shipmentCostEstimates to set
    */
    public void setShipmentCostEstimates(List<ShipmentCostEstimate> shipmentCostEstimates) {
        this.shipmentCostEstimates = shipmentCostEstimates;
    }
    /**
     * Auto generated value setter.
     * @param subscriptions the subscriptions to set
    */
    public void setSubscriptions(List<Subscription> subscriptions) {
        this.subscriptions = subscriptions;
    }
    /**
     * Auto generated value setter.
     * @param originatedFromSubscriptions the originatedFromSubscriptions to set
    */
    public void setOriginatedFromSubscriptions(List<Subscription> originatedFromSubscriptions) {
        this.originatedFromSubscriptions = originatedFromSubscriptions;
    }
    /**
     * Auto generated value setter.
     * @param timesheetRoles the timesheetRoles to set
    */
    public void setTimesheetRoles(List<TimesheetRole> timesheetRoles) {
        this.timesheetRoles = timesheetRoles;
    }
    /**
     * Auto generated value setter.
     * @param validContactMechRoles the validContactMechRoles to set
    */
    public void setValidContactMechRoles(List<ValidContactMechRole> validContactMechRoles) {
        this.validContactMechRoles = validContactMechRoles;
    }
    /**
     * Auto generated value setter.
     * @param visits the visits to set
    */
    public void setVisits(List<Visit> visits) {
        this.visits = visits;
    }
    /**
     * Auto generated value setter.
     * @param webSiteRoles the webSiteRoles to set
    */
    public void setWebSiteRoles(List<WebSiteRole> webSiteRoles) {
        this.webSiteRoles = webSiteRoles;
    }
    /**
     * Auto generated value setter.
     * @param workEffortPartyAssignments the workEffortPartyAssignments to set
    */
    public void setWorkEffortPartyAssignments(List<WorkEffortPartyAssignment> workEffortPartyAssignments) {
        this.workEffortPartyAssignments = workEffortPartyAssignments;
    }

    /**
     * Auto generated method that add item to collection.
     */
    public void addAgreementRole(AgreementRole agreementRole) {
        if (this.agreementRoles == null) {
            this.agreementRoles = new ArrayList<AgreementRole>();
        }
        this.agreementRoles.add(agreementRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeAgreementRole(AgreementRole agreementRole) {
        if (this.agreementRoles == null) {
            return;
        }
        this.agreementRoles.remove(agreementRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearAgreementRole() {
        if (this.agreementRoles == null) {
            return;
        }
        this.agreementRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addAgreementTypeForRoleType(AgreementTypeForRoleType agreementTypeForRoleType) {
        if (this.agreementTypeForRoleTypes == null) {
            this.agreementTypeForRoleTypes = new ArrayList<AgreementTypeForRoleType>();
        }
        this.agreementTypeForRoleTypes.add(agreementTypeForRoleType);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeAgreementTypeForRoleType(AgreementTypeForRoleType agreementTypeForRoleType) {
        if (this.agreementTypeForRoleTypes == null) {
            return;
        }
        this.agreementTypeForRoleTypes.remove(agreementTypeForRoleType);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearAgreementTypeForRoleType() {
        if (this.agreementTypeForRoleTypes == null) {
            return;
        }
        this.agreementTypeForRoleTypes.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addBillingAccountRole(BillingAccountRole billingAccountRole) {
        if (this.billingAccountRoles == null) {
            this.billingAccountRoles = new ArrayList<BillingAccountRole>();
        }
        this.billingAccountRoles.add(billingAccountRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeBillingAccountRole(BillingAccountRole billingAccountRole) {
        if (this.billingAccountRoles == null) {
            return;
        }
        this.billingAccountRoles.remove(billingAccountRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearBillingAccountRole() {
        if (this.billingAccountRoles == null) {
            return;
        }
        this.billingAccountRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addCommunicationEventRole(CommunicationEventRole communicationEventRole) {
        if (this.communicationEventRoles == null) {
            this.communicationEventRoles = new ArrayList<CommunicationEventRole>();
        }
        this.communicationEventRoles.add(communicationEventRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeCommunicationEventRole(CommunicationEventRole communicationEventRole) {
        if (this.communicationEventRoles == null) {
            return;
        }
        this.communicationEventRoles.remove(communicationEventRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearCommunicationEventRole() {
        if (this.communicationEventRoles == null) {
            return;
        }
        this.communicationEventRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addContentPurposeOperation(ContentPurposeOperation contentPurposeOperation) {
        if (this.contentPurposeOperations == null) {
            this.contentPurposeOperations = new ArrayList<ContentPurposeOperation>();
        }
        this.contentPurposeOperations.add(contentPurposeOperation);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeContentPurposeOperation(ContentPurposeOperation contentPurposeOperation) {
        if (this.contentPurposeOperations == null) {
            return;
        }
        this.contentPurposeOperations.remove(contentPurposeOperation);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearContentPurposeOperation() {
        if (this.contentPurposeOperations == null) {
            return;
        }
        this.contentPurposeOperations.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addCustRequestRole(CustRequestRole custRequestRole) {
        if (this.custRequestRoles == null) {
            this.custRequestRoles = new ArrayList<CustRequestRole>();
        }
        this.custRequestRoles.add(custRequestRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeCustRequestRole(CustRequestRole custRequestRole) {
        if (this.custRequestRoles == null) {
            return;
        }
        this.custRequestRoles.remove(custRequestRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearCustRequestRole() {
        if (this.custRequestRoles == null) {
            return;
        }
        this.custRequestRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFacilityGroupRole(FacilityGroupRole facilityGroupRole) {
        if (this.facilityGroupRoles == null) {
            this.facilityGroupRoles = new ArrayList<FacilityGroupRole>();
        }
        this.facilityGroupRoles.add(facilityGroupRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFacilityGroupRole(FacilityGroupRole facilityGroupRole) {
        if (this.facilityGroupRoles == null) {
            return;
        }
        this.facilityGroupRoles.remove(facilityGroupRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFacilityGroupRole() {
        if (this.facilityGroupRoles == null) {
            return;
        }
        this.facilityGroupRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFacilityRole(FacilityRole facilityRole) {
        if (this.facilityRoles == null) {
            this.facilityRoles = new ArrayList<FacilityRole>();
        }
        this.facilityRoles.add(facilityRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFacilityRole(FacilityRole facilityRole) {
        if (this.facilityRoles == null) {
            return;
        }
        this.facilityRoles.remove(facilityRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFacilityRole() {
        if (this.facilityRoles == null) {
            return;
        }
        this.facilityRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFinAccountRole(FinAccountRole finAccountRole) {
        if (this.finAccountRoles == null) {
            this.finAccountRoles = new ArrayList<FinAccountRole>();
        }
        this.finAccountRoles.add(finAccountRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFinAccountRole(FinAccountRole finAccountRole) {
        if (this.finAccountRoles == null) {
            return;
        }
        this.finAccountRoles.remove(finAccountRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFinAccountRole() {
        if (this.finAccountRoles == null) {
            return;
        }
        this.finAccountRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addGlAccountRole(GlAccountRole glAccountRole) {
        if (this.glAccountRoles == null) {
            this.glAccountRoles = new ArrayList<GlAccountRole>();
        }
        this.glAccountRoles.add(glAccountRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeGlAccountRole(GlAccountRole glAccountRole) {
        if (this.glAccountRoles == null) {
            return;
        }
        this.glAccountRoles.remove(glAccountRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearGlAccountRole() {
        if (this.glAccountRoles == null) {
            return;
        }
        this.glAccountRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addInvoiceRole(InvoiceRole invoiceRole) {
        if (this.invoiceRoles == null) {
            this.invoiceRoles = new ArrayList<InvoiceRole>();
        }
        this.invoiceRoles.add(invoiceRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeInvoiceRole(InvoiceRole invoiceRole) {
        if (this.invoiceRoles == null) {
            return;
        }
        this.invoiceRoles.remove(invoiceRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearInvoiceRole() {
        if (this.invoiceRoles == null) {
            return;
        }
        this.invoiceRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addMarketingCampaignRole(MarketingCampaignRole marketingCampaignRole) {
        if (this.marketingCampaignRoles == null) {
            this.marketingCampaignRoles = new ArrayList<MarketingCampaignRole>();
        }
        this.marketingCampaignRoles.add(marketingCampaignRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeMarketingCampaignRole(MarketingCampaignRole marketingCampaignRole) {
        if (this.marketingCampaignRoles == null) {
            return;
        }
        this.marketingCampaignRoles.remove(marketingCampaignRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearMarketingCampaignRole() {
        if (this.marketingCampaignRoles == null) {
            return;
        }
        this.marketingCampaignRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addOrderItemRole(OrderItemRole orderItemRole) {
        if (this.orderItemRoles == null) {
            this.orderItemRoles = new ArrayList<OrderItemRole>();
        }
        this.orderItemRoles.add(orderItemRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeOrderItemRole(OrderItemRole orderItemRole) {
        if (this.orderItemRoles == null) {
            return;
        }
        this.orderItemRoles.remove(orderItemRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearOrderItemRole() {
        if (this.orderItemRoles == null) {
            return;
        }
        this.orderItemRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addOrderRole(OrderRole orderRole) {
        if (this.orderRoles == null) {
            this.orderRoles = new ArrayList<OrderRole>();
        }
        this.orderRoles.add(orderRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeOrderRole(OrderRole orderRole) {
        if (this.orderRoles == null) {
            return;
        }
        this.orderRoles.remove(orderRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearOrderRole() {
        if (this.orderRoles == null) {
            return;
        }
        this.orderRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyFixedAssetAssignment(PartyFixedAssetAssignment partyFixedAssetAssignment) {
        if (this.partyFixedAssetAssignments == null) {
            this.partyFixedAssetAssignments = new ArrayList<PartyFixedAssetAssignment>();
        }
        this.partyFixedAssetAssignments.add(partyFixedAssetAssignment);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyFixedAssetAssignment(PartyFixedAssetAssignment partyFixedAssetAssignment) {
        if (this.partyFixedAssetAssignments == null) {
            return;
        }
        this.partyFixedAssetAssignments.remove(partyFixedAssetAssignment);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyFixedAssetAssignment() {
        if (this.partyFixedAssetAssignments == null) {
            return;
        }
        this.partyFixedAssetAssignments.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyNeed(PartyNeed partyNeed) {
        if (this.partyNeeds == null) {
            this.partyNeeds = new ArrayList<PartyNeed>();
        }
        this.partyNeeds.add(partyNeed);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyNeed(PartyNeed partyNeed) {
        if (this.partyNeeds == null) {
            return;
        }
        this.partyNeeds.remove(partyNeed);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyNeed() {
        if (this.partyNeeds == null) {
            return;
        }
        this.partyNeeds.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFromPartyRelationship(PartyRelationship fromPartyRelationship) {
        if (this.fromPartyRelationships == null) {
            this.fromPartyRelationships = new ArrayList<PartyRelationship>();
        }
        this.fromPartyRelationships.add(fromPartyRelationship);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFromPartyRelationship(PartyRelationship fromPartyRelationship) {
        if (this.fromPartyRelationships == null) {
            return;
        }
        this.fromPartyRelationships.remove(fromPartyRelationship);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFromPartyRelationship() {
        if (this.fromPartyRelationships == null) {
            return;
        }
        this.fromPartyRelationships.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addToPartyRelationship(PartyRelationship toPartyRelationship) {
        if (this.toPartyRelationships == null) {
            this.toPartyRelationships = new ArrayList<PartyRelationship>();
        }
        this.toPartyRelationships.add(toPartyRelationship);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeToPartyRelationship(PartyRelationship toPartyRelationship) {
        if (this.toPartyRelationships == null) {
            return;
        }
        this.toPartyRelationships.remove(toPartyRelationship);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearToPartyRelationship() {
        if (this.toPartyRelationships == null) {
            return;
        }
        this.toPartyRelationships.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyRole(PartyRole partyRole) {
        if (this.partyRoles == null) {
            this.partyRoles = new ArrayList<PartyRole>();
        }
        this.partyRoles.add(partyRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyRole(PartyRole partyRole) {
        if (this.partyRoles == null) {
            return;
        }
        this.partyRoles.remove(partyRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyRole() {
        if (this.partyRoles == null) {
            return;
        }
        this.partyRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPicklistRole(PicklistRole picklistRole) {
        if (this.picklistRoles == null) {
            this.picklistRoles = new ArrayList<PicklistRole>();
        }
        this.picklistRoles.add(picklistRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePicklistRole(PicklistRole picklistRole) {
        if (this.picklistRoles == null) {
            return;
        }
        this.picklistRoles.remove(picklistRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPicklistRole() {
        if (this.picklistRoles == null) {
            return;
        }
        this.picklistRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProdCatalogRole(ProdCatalogRole prodCatalogRole) {
        if (this.prodCatalogRoles == null) {
            this.prodCatalogRoles = new ArrayList<ProdCatalogRole>();
        }
        this.prodCatalogRoles.add(prodCatalogRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProdCatalogRole(ProdCatalogRole prodCatalogRole) {
        if (this.prodCatalogRoles == null) {
            return;
        }
        this.prodCatalogRoles.remove(prodCatalogRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProdCatalogRole() {
        if (this.prodCatalogRoles == null) {
            return;
        }
        this.prodCatalogRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProductCategoryRole(ProductCategoryRole productCategoryRole) {
        if (this.productCategoryRoles == null) {
            this.productCategoryRoles = new ArrayList<ProductCategoryRole>();
        }
        this.productCategoryRoles.add(productCategoryRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProductCategoryRole(ProductCategoryRole productCategoryRole) {
        if (this.productCategoryRoles == null) {
            return;
        }
        this.productCategoryRoles.remove(productCategoryRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProductCategoryRole() {
        if (this.productCategoryRoles == null) {
            return;
        }
        this.productCategoryRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProductStoreGroupRole(ProductStoreGroupRole productStoreGroupRole) {
        if (this.productStoreGroupRoles == null) {
            this.productStoreGroupRoles = new ArrayList<ProductStoreGroupRole>();
        }
        this.productStoreGroupRoles.add(productStoreGroupRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProductStoreGroupRole(ProductStoreGroupRole productStoreGroupRole) {
        if (this.productStoreGroupRoles == null) {
            return;
        }
        this.productStoreGroupRoles.remove(productStoreGroupRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProductStoreGroupRole() {
        if (this.productStoreGroupRoles == null) {
            return;
        }
        this.productStoreGroupRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addProductStoreRole(ProductStoreRole productStoreRole) {
        if (this.productStoreRoles == null) {
            this.productStoreRoles = new ArrayList<ProductStoreRole>();
        }
        this.productStoreRoles.add(productStoreRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeProductStoreRole(ProductStoreRole productStoreRole) {
        if (this.productStoreRoles == null) {
            return;
        }
        this.productStoreRoles.remove(productStoreRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearProductStoreRole() {
        if (this.productStoreRoles == null) {
            return;
        }
        this.productStoreRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addQuoteRole(QuoteRole quoteRole) {
        if (this.quoteRoles == null) {
            this.quoteRoles = new ArrayList<QuoteRole>();
        }
        this.quoteRoles.add(quoteRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeQuoteRole(QuoteRole quoteRole) {
        if (this.quoteRoles == null) {
            return;
        }
        this.quoteRoles.remove(quoteRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearQuoteRole() {
        if (this.quoteRoles == null) {
            return;
        }
        this.quoteRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addRoleTypeAttr(RoleTypeAttr roleTypeAttr) {
        if (this.roleTypeAttrs == null) {
            this.roleTypeAttrs = new ArrayList<RoleTypeAttr>();
        }
        this.roleTypeAttrs.add(roleTypeAttr);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeRoleTypeAttr(RoleTypeAttr roleTypeAttr) {
        if (this.roleTypeAttrs == null) {
            return;
        }
        this.roleTypeAttrs.remove(roleTypeAttr);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearRoleTypeAttr() {
        if (this.roleTypeAttrs == null) {
            return;
        }
        this.roleTypeAttrs.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addSalesOpportunityRole(SalesOpportunityRole salesOpportunityRole) {
        if (this.salesOpportunityRoles == null) {
            this.salesOpportunityRoles = new ArrayList<SalesOpportunityRole>();
        }
        this.salesOpportunityRoles.add(salesOpportunityRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeSalesOpportunityRole(SalesOpportunityRole salesOpportunityRole) {
        if (this.salesOpportunityRoles == null) {
            return;
        }
        this.salesOpportunityRoles.remove(salesOpportunityRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearSalesOpportunityRole() {
        if (this.salesOpportunityRoles == null) {
            return;
        }
        this.salesOpportunityRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addSegmentGroupRole(SegmentGroupRole segmentGroupRole) {
        if (this.segmentGroupRoles == null) {
            this.segmentGroupRoles = new ArrayList<SegmentGroupRole>();
        }
        this.segmentGroupRoles.add(segmentGroupRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeSegmentGroupRole(SegmentGroupRole segmentGroupRole) {
        if (this.segmentGroupRoles == null) {
            return;
        }
        this.segmentGroupRoles.remove(segmentGroupRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearSegmentGroupRole() {
        if (this.segmentGroupRoles == null) {
            return;
        }
        this.segmentGroupRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addTimesheetRole(TimesheetRole timesheetRole) {
        if (this.timesheetRoles == null) {
            this.timesheetRoles = new ArrayList<TimesheetRole>();
        }
        this.timesheetRoles.add(timesheetRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeTimesheetRole(TimesheetRole timesheetRole) {
        if (this.timesheetRoles == null) {
            return;
        }
        this.timesheetRoles.remove(timesheetRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearTimesheetRole() {
        if (this.timesheetRoles == null) {
            return;
        }
        this.timesheetRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addValidContactMechRole(ValidContactMechRole validContactMechRole) {
        if (this.validContactMechRoles == null) {
            this.validContactMechRoles = new ArrayList<ValidContactMechRole>();
        }
        this.validContactMechRoles.add(validContactMechRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeValidContactMechRole(ValidContactMechRole validContactMechRole) {
        if (this.validContactMechRoles == null) {
            return;
        }
        this.validContactMechRoles.remove(validContactMechRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearValidContactMechRole() {
        if (this.validContactMechRoles == null) {
            return;
        }
        this.validContactMechRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addWebSiteRole(WebSiteRole webSiteRole) {
        if (this.webSiteRoles == null) {
            this.webSiteRoles = new ArrayList<WebSiteRole>();
        }
        this.webSiteRoles.add(webSiteRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeWebSiteRole(WebSiteRole webSiteRole) {
        if (this.webSiteRoles == null) {
            return;
        }
        this.webSiteRoles.remove(webSiteRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearWebSiteRole() {
        if (this.webSiteRoles == null) {
            return;
        }
        this.webSiteRoles.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addWorkEffortPartyAssignment(WorkEffortPartyAssignment workEffortPartyAssignment) {
        if (this.workEffortPartyAssignments == null) {
            this.workEffortPartyAssignments = new ArrayList<WorkEffortPartyAssignment>();
        }
        this.workEffortPartyAssignments.add(workEffortPartyAssignment);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeWorkEffortPartyAssignment(WorkEffortPartyAssignment workEffortPartyAssignment) {
        if (this.workEffortPartyAssignments == null) {
            return;
        }
        this.workEffortPartyAssignments.remove(workEffortPartyAssignment);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearWorkEffortPartyAssignment() {
        if (this.workEffortPartyAssignments == null) {
            return;
        }
        this.workEffortPartyAssignments.clear();
    }

    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setRoleTypeId((String) mapValue.get("roleTypeId"));
        setParentTypeId((String) mapValue.get("parentTypeId"));
        setHasTable((String) mapValue.get("hasTable"));
        setDescription((String) mapValue.get("description"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("roleTypeId", getRoleTypeId());
        mapValue.put("parentTypeId", getParentTypeId());
        mapValue.put("hasTable", getHasTable());
        mapValue.put("description", getDescription());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        return mapValue;
    }


}
