package org.opentaps.domain.base.entities;

/*
* Copyright (c) 2008 - 2009 Open Source Strategies, Inc.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the Honest Public License.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* Honest Public License for more details.
*
* You should have received a copy of the Honest Public License
* along with this program; if not, write to Funambol,
* 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
*/

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import java.lang.String;

/**
 * Auto generated base entity AgreementTermTypesByDocumentType.
 */
@javax.persistence.Entity
@NamedNativeQuery(name="selectAgreementTermTypesByDocumentTypes", query="SELECT ADTM.DOCUMENT_TYPE_ID AS \"documentTypeId\",AITM.TERM_TYPE_ID AS \"termTypeId\" FROM AGREEMENT_DOCUMENT_TYPE_MAP ADTM INNER JOIN AGREEMENT_TO_ITEM_MAP ATIM ON ADTM.AGREEMENT_TYPE_ID = ATIM.AGREEMENT_TYPE_ID INNER JOIN AGREEMENT_ITEM_TO_TERM_MAP AITM ON ATIM.AGREEMENT_ITEM_TYPE_ID = AITM.AGREEMENT_ITEM_TYPE_ID", resultSetMapping="AgreementTermTypesByDocumentTypeMapping")
@SqlResultSetMapping(name="AgreementTermTypesByDocumentTypeMapping", entities={
@EntityResult(entityClass=AgreementTermTypesByDocumentType.class, fields = {
@FieldResult(name="documentTypeId", column="documentTypeId")
,@FieldResult(name="termTypeId", column="termTypeId")
})})
@org.hibernate.annotations.Entity(mutable = false)
@org.hibernate.annotations.AccessType("field")
public class AgreementTermTypesByDocumentType extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("documentTypeId", "ADTM.DOCUMENT_TYPE_ID");
        fields.put("termTypeId", "AITM.TERM_TYPE_ID");
fieldMapColumns.put("AgreementTermTypesByDocumentType", fields);
}
  public static enum Fields implements EntityFieldInterface<AgreementTermTypesByDocumentType> {
    documentTypeId("documentTypeId"),
    termTypeId("termTypeId");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @Id
    
    private String documentTypeId;
    
    
    private String termTypeId;

  /**
   * Default constructor.
   */
  public AgreementTermTypesByDocumentType() {
      super();
      this.baseEntityName = "AgreementTermTypesByDocumentType";
      this.isView = true;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("documentTypeId");this.primaryKeyNames.add("termTypeId");
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public AgreementTermTypesByDocumentType(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * This is a view-entity, so the setter methods will be private to this class and for use in its fromMap constructor only
     */
    /**
     * Auto generated value setter.
     * @param documentTypeId the documentTypeId to set
     */
    private void setDocumentTypeId(String documentTypeId) {
        this.documentTypeId = documentTypeId;
    }
    /**
     * Auto generated value setter.
     * @param termTypeId the termTypeId to set
     */
    private void setTermTypeId(String termTypeId) {
        this.termTypeId = termTypeId;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getDocumentTypeId() {
        return this.documentTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getTermTypeId() {
        return this.termTypeId;
    }




    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setDocumentTypeId((String) mapValue.get("documentTypeId"));
        setTermTypeId((String) mapValue.get("termTypeId"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("documentTypeId", getDocumentTypeId());
        mapValue.put("termTypeId", getTermTypeId());
        return mapValue;
    }


}
