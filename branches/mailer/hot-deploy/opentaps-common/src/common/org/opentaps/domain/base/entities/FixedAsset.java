package org.opentaps.domain.base.entities;

/*
* Copyright (c) 2008 - 2009 Open Source Strategies, Inc.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the Honest Public License.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* Honest Public License for more details.
*
* You should have received a copy of the Honest Public License
* along with this program; if not, write to Funambol,
* 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
*/

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import java.lang.String;
import java.math.BigDecimal;
import java.sql.Date;
import java.sql.Timestamp;

/**
 * Auto generated base entity FixedAsset.
 */
@javax.persistence.Entity
@Table(name="FIXED_ASSET")
public class FixedAsset extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("fixedAssetId", "FIXED_ASSET_ID");
        fields.put("fixedAssetTypeId", "FIXED_ASSET_TYPE_ID");
        fields.put("parentFixedAssetId", "PARENT_FIXED_ASSET_ID");
        fields.put("instanceOfProductId", "INSTANCE_OF_PRODUCT_ID");
        fields.put("classEnumId", "CLASS_ENUM_ID");
        fields.put("partyId", "PARTY_ID");
        fields.put("roleTypeId", "ROLE_TYPE_ID");
        fields.put("uomId", "UOM_ID");
        fields.put("fixedAssetName", "FIXED_ASSET_NAME");
        fields.put("dateAcquired", "DATE_ACQUIRED");
        fields.put("dateLastServiced", "DATE_LAST_SERVICED");
        fields.put("dateNextService", "DATE_NEXT_SERVICE");
        fields.put("expectedEndOfLife", "EXPECTED_END_OF_LIFE");
        fields.put("actualEndOfLife", "ACTUAL_END_OF_LIFE");
        fields.put("productionCapacity", "PRODUCTION_CAPACITY");
        fields.put("calendarId", "CALENDAR_ID");
        fields.put("serialNumber", "SERIAL_NUMBER");
        fields.put("locatedAtFacilityId", "LOCATED_AT_FACILITY_ID");
        fields.put("locatedAtLocationSeqId", "LOCATED_AT_LOCATION_SEQ_ID");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
fieldMapColumns.put("FixedAsset", fields);
}
  public static enum Fields implements EntityFieldInterface<FixedAsset> {
    fixedAssetId("fixedAssetId"),
    fixedAssetTypeId("fixedAssetTypeId"),
    parentFixedAssetId("parentFixedAssetId"),
    instanceOfProductId("instanceOfProductId"),
    classEnumId("classEnumId"),
    partyId("partyId"),
    roleTypeId("roleTypeId"),
    uomId("uomId"),
    fixedAssetName("fixedAssetName"),
    dateAcquired("dateAcquired"),
    dateLastServiced("dateLastServiced"),
    dateNextService("dateNextService"),
    expectedEndOfLife("expectedEndOfLife"),
    actualEndOfLife("actualEndOfLife"),
    productionCapacity("productionCapacity"),
    calendarId("calendarId"),
    serialNumber("serialNumber"),
    locatedAtFacilityId("locatedAtFacilityId"),
    locatedAtLocationSeqId("locatedAtLocationSeqId"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @org.hibernate.annotations.GenericGenerator(name="FixedAsset_GEN",  strategy="org.opentaps.foundation.entity.hibernate.OpentapsIdentifierGenerator")
    @GeneratedValue(generator="FixedAsset_GEN")   
    @Id
    
    @Column(name="FIXED_ASSET_ID")
    private String fixedAssetId;
    
    @Column(name="FIXED_ASSET_TYPE_ID")
    private String fixedAssetTypeId;
    
    @Column(name="PARENT_FIXED_ASSET_ID")
    private String parentFixedAssetId;
    
    @Column(name="INSTANCE_OF_PRODUCT_ID")
    private String instanceOfProductId;
    
    @Column(name="CLASS_ENUM_ID")
    private String classEnumId;
    
    @Column(name="PARTY_ID")
    private String partyId;
    
    @Column(name="ROLE_TYPE_ID")
    private String roleTypeId;
    
    @Column(name="UOM_ID")
    private String uomId;
    
    @Column(name="FIXED_ASSET_NAME")
    private String fixedAssetName;
    
    @Column(name="DATE_ACQUIRED")
    private Timestamp dateAcquired;
    
    @Column(name="DATE_LAST_SERVICED")
    private Timestamp dateLastServiced;
    
    @Column(name="DATE_NEXT_SERVICE")
    private Timestamp dateNextService;
    
    @Column(name="EXPECTED_END_OF_LIFE")
    private Date expectedEndOfLife;
    
    @Column(name="ACTUAL_END_OF_LIFE")
    private Date actualEndOfLife;
    
    @Column(name="PRODUCTION_CAPACITY")
    private BigDecimal productionCapacity;
    
    @Column(name="CALENDAR_ID")
    private String calendarId;
    
    @Column(name="SERIAL_NUMBER")
    private String serialNumber;
    
    @Column(name="LOCATED_AT_FACILITY_ID")
    private String locatedAtFacilityId;
    
    @Column(name="LOCATED_AT_LOCATION_SEQ_ID")
    private String locatedAtLocationSeqId;
    
    @Column(name="LAST_UPDATED_STAMP")
    private Timestamp lastUpdatedStamp;
    
    @Column(name="LAST_UPDATED_TX_STAMP")
    private Timestamp lastUpdatedTxStamp;
    
    @Column(name="CREATED_STAMP")
    private Timestamp createdStamp;
    
    @Column(name="CREATED_TX_STAMP")
    private Timestamp createdTxStamp;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="FIXED_ASSET_TYPE_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private FixedAssetType fixedAssetType = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="FIXED_ASSET_TYPE_ID")
    private List<FixedAssetTypeAttr> fixedAssetTypeAttrs = null;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="PARENT_FIXED_ASSET_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private FixedAsset parentFixedAsset = null;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="INSTANCE_OF_PRODUCT_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private Product instanceOfProduct = null;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="CLASS_ENUM_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private Enumeration classEnumeration = null;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="PARTY_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private Party party = null;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="ROLE_TYPE_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private RoleType roleType = null;
    private transient PartyRole partyRole = null;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="UOM_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private Uom uom = null;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="CALENDAR_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private TechDataCalendar techDataCalendar = null;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="LOCATED_AT_FACILITY_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private Facility locatedAtFacility = null;
    private transient FacilityLocation locatedAtFacilityLocation = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="FIXED_ASSET_ID")
    private List<AcctgTrans> acctgTranses = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="FIXED_ASSET_ID")
    private List<Delivery> deliverys = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="PARENT_FIXED_ASSET_ID")
    private List<FixedAsset> childFixedAssets = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="fixedAsset", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="FIXED_ASSET_ID")
    private List<FixedAssetAttribute> fixedAssetAttributes = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="fixedAsset", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="FIXED_ASSET_ID")
    private List<FixedAssetDepMethod> fixedAssetDepMethods = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="fixedAsset", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="FIXED_ASSET_ID")
    private List<FixedAssetIdent> fixedAssetIdents = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="fixedAsset", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="FIXED_ASSET_ID")
    private List<FixedAssetMaint> fixedAssetMaints = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="fixedAsset", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="FIXED_ASSET_ID")
    private List<FixedAssetMaintOrder> fixedAssetMaintOrders = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="fixedAsset", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="FIXED_ASSET_ID")
    private List<FixedAssetProduct> fixedAssetProducts = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="fixedAsset", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="FIXED_ASSET_ID")
    private List<FixedAssetRegistration> fixedAssetRegistrations = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="fixedAsset", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="FIXED_ASSET_ID")
    private List<FixedAssetStdCost> fixedAssetStdCosts = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="fixedAsset", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="FIXED_ASSET_ID")
    private List<PartyFixedAssetAssignment> partyFixedAssetAssignments = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="FIXED_ASSET_ID")
    private List<Requirement> requirements = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="FIXED_ASSET_ID")
    private List<WorkEffort> workEfforts = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="fixedAsset", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="FIXED_ASSET_ID")
    private List<WorkEffortFixedAssetAssign> workEffortFixedAssetAssigns = null;

  /**
   * Default constructor.
   */
  public FixedAsset() {
      super();
      this.baseEntityName = "FixedAsset";
      this.isView = false;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("fixedAssetId");
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public FixedAsset(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param fixedAssetId the fixedAssetId to set
     */
    public void setFixedAssetId(String fixedAssetId) {
        this.fixedAssetId = fixedAssetId;
    }
    /**
     * Auto generated value setter.
     * @param fixedAssetTypeId the fixedAssetTypeId to set
     */
    public void setFixedAssetTypeId(String fixedAssetTypeId) {
        this.fixedAssetTypeId = fixedAssetTypeId;
    }
    /**
     * Auto generated value setter.
     * @param parentFixedAssetId the parentFixedAssetId to set
     */
    public void setParentFixedAssetId(String parentFixedAssetId) {
        this.parentFixedAssetId = parentFixedAssetId;
    }
    /**
     * Auto generated value setter.
     * @param instanceOfProductId the instanceOfProductId to set
     */
    public void setInstanceOfProductId(String instanceOfProductId) {
        this.instanceOfProductId = instanceOfProductId;
    }
    /**
     * Auto generated value setter.
     * @param classEnumId the classEnumId to set
     */
    public void setClassEnumId(String classEnumId) {
        this.classEnumId = classEnumId;
    }
    /**
     * Auto generated value setter.
     * @param partyId the partyId to set
     */
    public void setPartyId(String partyId) {
        this.partyId = partyId;
    }
    /**
     * Auto generated value setter.
     * @param roleTypeId the roleTypeId to set
     */
    public void setRoleTypeId(String roleTypeId) {
        this.roleTypeId = roleTypeId;
    }
    /**
     * Auto generated value setter.
     * @param uomId the uomId to set
     */
    public void setUomId(String uomId) {
        this.uomId = uomId;
    }
    /**
     * Auto generated value setter.
     * @param fixedAssetName the fixedAssetName to set
     */
    public void setFixedAssetName(String fixedAssetName) {
        this.fixedAssetName = fixedAssetName;
    }
    /**
     * Auto generated value setter.
     * @param dateAcquired the dateAcquired to set
     */
    public void setDateAcquired(Timestamp dateAcquired) {
        this.dateAcquired = dateAcquired;
    }
    /**
     * Auto generated value setter.
     * @param dateLastServiced the dateLastServiced to set
     */
    public void setDateLastServiced(Timestamp dateLastServiced) {
        this.dateLastServiced = dateLastServiced;
    }
    /**
     * Auto generated value setter.
     * @param dateNextService the dateNextService to set
     */
    public void setDateNextService(Timestamp dateNextService) {
        this.dateNextService = dateNextService;
    }
    /**
     * Auto generated value setter.
     * @param expectedEndOfLife the expectedEndOfLife to set
     */
    public void setExpectedEndOfLife(Date expectedEndOfLife) {
        this.expectedEndOfLife = expectedEndOfLife;
    }
    /**
     * Auto generated value setter.
     * @param actualEndOfLife the actualEndOfLife to set
     */
    public void setActualEndOfLife(Date actualEndOfLife) {
        this.actualEndOfLife = actualEndOfLife;
    }
    /**
     * Auto generated value setter.
     * @param productionCapacity the productionCapacity to set
     */
    public void setProductionCapacity(BigDecimal productionCapacity) {
        this.productionCapacity = productionCapacity;
    }
    /**
     * Auto generated value setter.
     * @param calendarId the calendarId to set
     */
    public void setCalendarId(String calendarId) {
        this.calendarId = calendarId;
    }
    /**
     * Auto generated value setter.
     * @param serialNumber the serialNumber to set
     */
    public void setSerialNumber(String serialNumber) {
        this.serialNumber = serialNumber;
    }
    /**
     * Auto generated value setter.
     * @param locatedAtFacilityId the locatedAtFacilityId to set
     */
    public void setLocatedAtFacilityId(String locatedAtFacilityId) {
        this.locatedAtFacilityId = locatedAtFacilityId;
    }
    /**
     * Auto generated value setter.
     * @param locatedAtLocationSeqId the locatedAtLocationSeqId to set
     */
    public void setLocatedAtLocationSeqId(String locatedAtLocationSeqId) {
        this.locatedAtLocationSeqId = locatedAtLocationSeqId;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getFixedAssetId() {
        return this.fixedAssetId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getFixedAssetTypeId() {
        return this.fixedAssetTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getParentFixedAssetId() {
        return this.parentFixedAssetId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getInstanceOfProductId() {
        return this.instanceOfProductId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getClassEnumId() {
        return this.classEnumId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getPartyId() {
        return this.partyId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getRoleTypeId() {
        return this.roleTypeId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getUomId() {
        return this.uomId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getFixedAssetName() {
        return this.fixedAssetName;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getDateAcquired() {
        return this.dateAcquired;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getDateLastServiced() {
        return this.dateLastServiced;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getDateNextService() {
        return this.dateNextService;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Date</code>
     */
    public Date getExpectedEndOfLife() {
        return this.expectedEndOfLife;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Date</code>
     */
    public Date getActualEndOfLife() {
        return this.actualEndOfLife;
    }
    /**
     * Auto generated value accessor.
     * @return <code>BigDecimal</code>
     */
    public BigDecimal getProductionCapacity() {
        return this.productionCapacity;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getCalendarId() {
        return this.calendarId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getSerialNumber() {
        return this.serialNumber;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getLocatedAtFacilityId() {
        return this.locatedAtFacilityId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getLocatedAtLocationSeqId() {
        return this.locatedAtLocationSeqId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }

    /**
     * Auto generated method that gets the related <code>FixedAssetType</code> by the relation named <code>FixedAssetType</code>.
     * @return the <code>FixedAssetType</code>
     * @throws RepositoryException if an error occurs
     */
    public FixedAssetType getFixedAssetType() throws RepositoryException {
        if (this.fixedAssetType == null) {
            this.fixedAssetType = getRelatedOne(FixedAssetType.class, "FixedAssetType");
        }
        return this.fixedAssetType;
    }
    /**
     * Auto generated method that gets the related <code>FixedAssetTypeAttr</code> by the relation named <code>FixedAssetTypeAttr</code>.
     * @return the list of <code>FixedAssetTypeAttr</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FixedAssetTypeAttr> getFixedAssetTypeAttrs() throws RepositoryException {
        if (this.fixedAssetTypeAttrs == null) {
            this.fixedAssetTypeAttrs = getRelated(FixedAssetTypeAttr.class, "FixedAssetTypeAttr");
        }
        return this.fixedAssetTypeAttrs;
    }
    /**
     * Auto generated method that gets the related <code>FixedAsset</code> by the relation named <code>ParentFixedAsset</code>.
     * @return the <code>FixedAsset</code>
     * @throws RepositoryException if an error occurs
     */
    public FixedAsset getParentFixedAsset() throws RepositoryException {
        if (this.parentFixedAsset == null) {
            this.parentFixedAsset = getRelatedOne(FixedAsset.class, "ParentFixedAsset");
        }
        return this.parentFixedAsset;
    }
    /**
     * Auto generated method that gets the related <code>Product</code> by the relation named <code>InstanceOfProduct</code>.
     * @return the <code>Product</code>
     * @throws RepositoryException if an error occurs
     */
    public Product getInstanceOfProduct() throws RepositoryException {
        if (this.instanceOfProduct == null) {
            this.instanceOfProduct = getRelatedOne(Product.class, "InstanceOfProduct");
        }
        return this.instanceOfProduct;
    }
    /**
     * Auto generated method that gets the related <code>Enumeration</code> by the relation named <code>ClassEnumeration</code>.
     * @return the <code>Enumeration</code>
     * @throws RepositoryException if an error occurs
     */
    public Enumeration getClassEnumeration() throws RepositoryException {
        if (this.classEnumeration == null) {
            this.classEnumeration = getRelatedOne(Enumeration.class, "ClassEnumeration");
        }
        return this.classEnumeration;
    }
    /**
     * Auto generated method that gets the related <code>Party</code> by the relation named <code>Party</code>.
     * @return the <code>Party</code>
     * @throws RepositoryException if an error occurs
     */
    public Party getParty() throws RepositoryException {
        if (this.party == null) {
            this.party = getRelatedOne(Party.class, "Party");
        }
        return this.party;
    }
    /**
     * Auto generated method that gets the related <code>RoleType</code> by the relation named <code>RoleType</code>.
     * @return the <code>RoleType</code>
     * @throws RepositoryException if an error occurs
     */
    public RoleType getRoleType() throws RepositoryException {
        if (this.roleType == null) {
            this.roleType = getRelatedOne(RoleType.class, "RoleType");
        }
        return this.roleType;
    }
    /**
     * Auto generated method that gets the related <code>PartyRole</code> by the relation named <code>PartyRole</code>.
     * @return the <code>PartyRole</code>
     * @throws RepositoryException if an error occurs
     */
    public PartyRole getPartyRole() throws RepositoryException {
        if (this.partyRole == null) {
            this.partyRole = getRelatedOne(PartyRole.class, "PartyRole");
        }
        return this.partyRole;
    }
    /**
     * Auto generated method that gets the related <code>Uom</code> by the relation named <code>Uom</code>.
     * @return the <code>Uom</code>
     * @throws RepositoryException if an error occurs
     */
    public Uom getUom() throws RepositoryException {
        if (this.uom == null) {
            this.uom = getRelatedOne(Uom.class, "Uom");
        }
        return this.uom;
    }
    /**
     * Auto generated method that gets the related <code>TechDataCalendar</code> by the relation named <code>TechDataCalendar</code>.
     * @return the <code>TechDataCalendar</code>
     * @throws RepositoryException if an error occurs
     */
    public TechDataCalendar getTechDataCalendar() throws RepositoryException {
        if (this.techDataCalendar == null) {
            this.techDataCalendar = getRelatedOne(TechDataCalendar.class, "TechDataCalendar");
        }
        return this.techDataCalendar;
    }
    /**
     * Auto generated method that gets the related <code>Facility</code> by the relation named <code>LocatedAtFacility</code>.
     * @return the <code>Facility</code>
     * @throws RepositoryException if an error occurs
     */
    public Facility getLocatedAtFacility() throws RepositoryException {
        if (this.locatedAtFacility == null) {
            this.locatedAtFacility = getRelatedOne(Facility.class, "LocatedAtFacility");
        }
        return this.locatedAtFacility;
    }
    /**
     * Auto generated method that gets the related <code>FacilityLocation</code> by the relation named <code>LocatedAtFacilityLocation</code>.
     * @return the <code>FacilityLocation</code>
     * @throws RepositoryException if an error occurs
     */
    public FacilityLocation getLocatedAtFacilityLocation() throws RepositoryException {
        if (this.locatedAtFacilityLocation == null) {
            this.locatedAtFacilityLocation = getRelatedOne(FacilityLocation.class, "LocatedAtFacilityLocation");
        }
        return this.locatedAtFacilityLocation;
    }
    /**
     * Auto generated method that gets the related <code>AcctgTrans</code> by the relation named <code>AcctgTrans</code>.
     * @return the list of <code>AcctgTrans</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends AcctgTrans> getAcctgTranses() throws RepositoryException {
        if (this.acctgTranses == null) {
            this.acctgTranses = getRelated(AcctgTrans.class, "AcctgTrans");
        }
        return this.acctgTranses;
    }
    /**
     * Auto generated method that gets the related <code>Delivery</code> by the relation named <code>Delivery</code>.
     * @return the list of <code>Delivery</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Delivery> getDeliverys() throws RepositoryException {
        if (this.deliverys == null) {
            this.deliverys = getRelated(Delivery.class, "Delivery");
        }
        return this.deliverys;
    }
    /**
     * Auto generated method that gets the related <code>FixedAsset</code> by the relation named <code>ChildFixedAsset</code>.
     * @return the list of <code>FixedAsset</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FixedAsset> getChildFixedAssets() throws RepositoryException {
        if (this.childFixedAssets == null) {
            this.childFixedAssets = getRelated(FixedAsset.class, "ChildFixedAsset");
        }
        return this.childFixedAssets;
    }
    /**
     * Auto generated method that gets the related <code>FixedAssetAttribute</code> by the relation named <code>FixedAssetAttribute</code>.
     * @return the list of <code>FixedAssetAttribute</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FixedAssetAttribute> getFixedAssetAttributes() throws RepositoryException {
        if (this.fixedAssetAttributes == null) {
            this.fixedAssetAttributes = getRelated(FixedAssetAttribute.class, "FixedAssetAttribute");
        }
        return this.fixedAssetAttributes;
    }
    /**
     * Auto generated method that gets the related <code>FixedAssetDepMethod</code> by the relation named <code>FixedAssetDepMethod</code>.
     * @return the list of <code>FixedAssetDepMethod</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FixedAssetDepMethod> getFixedAssetDepMethods() throws RepositoryException {
        if (this.fixedAssetDepMethods == null) {
            this.fixedAssetDepMethods = getRelated(FixedAssetDepMethod.class, "FixedAssetDepMethod");
        }
        return this.fixedAssetDepMethods;
    }
    /**
     * Auto generated method that gets the related <code>FixedAssetIdent</code> by the relation named <code>FixedAssetIdent</code>.
     * @return the list of <code>FixedAssetIdent</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FixedAssetIdent> getFixedAssetIdents() throws RepositoryException {
        if (this.fixedAssetIdents == null) {
            this.fixedAssetIdents = getRelated(FixedAssetIdent.class, "FixedAssetIdent");
        }
        return this.fixedAssetIdents;
    }
    /**
     * Auto generated method that gets the related <code>FixedAssetMaint</code> by the relation named <code>FixedAssetMaint</code>.
     * @return the list of <code>FixedAssetMaint</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FixedAssetMaint> getFixedAssetMaints() throws RepositoryException {
        if (this.fixedAssetMaints == null) {
            this.fixedAssetMaints = getRelated(FixedAssetMaint.class, "FixedAssetMaint");
        }
        return this.fixedAssetMaints;
    }
    /**
     * Auto generated method that gets the related <code>FixedAssetMaintOrder</code> by the relation named <code>FixedAssetMaintOrder</code>.
     * @return the list of <code>FixedAssetMaintOrder</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FixedAssetMaintOrder> getFixedAssetMaintOrders() throws RepositoryException {
        if (this.fixedAssetMaintOrders == null) {
            this.fixedAssetMaintOrders = getRelated(FixedAssetMaintOrder.class, "FixedAssetMaintOrder");
        }
        return this.fixedAssetMaintOrders;
    }
    /**
     * Auto generated method that gets the related <code>FixedAssetProduct</code> by the relation named <code>FixedAssetProduct</code>.
     * @return the list of <code>FixedAssetProduct</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FixedAssetProduct> getFixedAssetProducts() throws RepositoryException {
        if (this.fixedAssetProducts == null) {
            this.fixedAssetProducts = getRelated(FixedAssetProduct.class, "FixedAssetProduct");
        }
        return this.fixedAssetProducts;
    }
    /**
     * Auto generated method that gets the related <code>FixedAssetRegistration</code> by the relation named <code>FixedAssetRegistration</code>.
     * @return the list of <code>FixedAssetRegistration</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FixedAssetRegistration> getFixedAssetRegistrations() throws RepositoryException {
        if (this.fixedAssetRegistrations == null) {
            this.fixedAssetRegistrations = getRelated(FixedAssetRegistration.class, "FixedAssetRegistration");
        }
        return this.fixedAssetRegistrations;
    }
    /**
     * Auto generated method that gets the related <code>FixedAssetStdCost</code> by the relation named <code>FixedAssetStdCost</code>.
     * @return the list of <code>FixedAssetStdCost</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends FixedAssetStdCost> getFixedAssetStdCosts() throws RepositoryException {
        if (this.fixedAssetStdCosts == null) {
            this.fixedAssetStdCosts = getRelated(FixedAssetStdCost.class, "FixedAssetStdCost");
        }
        return this.fixedAssetStdCosts;
    }
    /**
     * Auto generated method that gets the related <code>PartyFixedAssetAssignment</code> by the relation named <code>PartyFixedAssetAssignment</code>.
     * @return the list of <code>PartyFixedAssetAssignment</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends PartyFixedAssetAssignment> getPartyFixedAssetAssignments() throws RepositoryException {
        if (this.partyFixedAssetAssignments == null) {
            this.partyFixedAssetAssignments = getRelated(PartyFixedAssetAssignment.class, "PartyFixedAssetAssignment");
        }
        return this.partyFixedAssetAssignments;
    }
    /**
     * Auto generated method that gets the related <code>Requirement</code> by the relation named <code>Requirement</code>.
     * @return the list of <code>Requirement</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends Requirement> getRequirements() throws RepositoryException {
        if (this.requirements == null) {
            this.requirements = getRelated(Requirement.class, "Requirement");
        }
        return this.requirements;
    }
    /**
     * Auto generated method that gets the related <code>WorkEffort</code> by the relation named <code>WorkEffort</code>.
     * @return the list of <code>WorkEffort</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends WorkEffort> getWorkEfforts() throws RepositoryException {
        if (this.workEfforts == null) {
            this.workEfforts = getRelated(WorkEffort.class, "WorkEffort");
        }
        return this.workEfforts;
    }
    /**
     * Auto generated method that gets the related <code>WorkEffortFixedAssetAssign</code> by the relation named <code>WorkEffortFixedAssetAssign</code>.
     * @return the list of <code>WorkEffortFixedAssetAssign</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends WorkEffortFixedAssetAssign> getWorkEffortFixedAssetAssigns() throws RepositoryException {
        if (this.workEffortFixedAssetAssigns == null) {
            this.workEffortFixedAssetAssigns = getRelated(WorkEffortFixedAssetAssign.class, "WorkEffortFixedAssetAssign");
        }
        return this.workEffortFixedAssetAssigns;
    }

    /**
     * Auto generated value setter.
     * @param fixedAssetType the fixedAssetType to set
    */
    public void setFixedAssetType(FixedAssetType fixedAssetType) {
        this.fixedAssetType = fixedAssetType;
    }
    /**
     * Auto generated value setter.
     * @param fixedAssetTypeAttrs the fixedAssetTypeAttrs to set
    */
    public void setFixedAssetTypeAttrs(List<FixedAssetTypeAttr> fixedAssetTypeAttrs) {
        this.fixedAssetTypeAttrs = fixedAssetTypeAttrs;
    }
    /**
     * Auto generated value setter.
     * @param parentFixedAsset the parentFixedAsset to set
    */
    public void setParentFixedAsset(FixedAsset parentFixedAsset) {
        this.parentFixedAsset = parentFixedAsset;
    }
    /**
     * Auto generated value setter.
     * @param instanceOfProduct the instanceOfProduct to set
    */
    public void setInstanceOfProduct(Product instanceOfProduct) {
        this.instanceOfProduct = instanceOfProduct;
    }
    /**
     * Auto generated value setter.
     * @param classEnumeration the classEnumeration to set
    */
    public void setClassEnumeration(Enumeration classEnumeration) {
        this.classEnumeration = classEnumeration;
    }
    /**
     * Auto generated value setter.
     * @param party the party to set
    */
    public void setParty(Party party) {
        this.party = party;
    }
    /**
     * Auto generated value setter.
     * @param roleType the roleType to set
    */
    public void setRoleType(RoleType roleType) {
        this.roleType = roleType;
    }
    /**
     * Auto generated value setter.
     * @param partyRole the partyRole to set
    */
    public void setPartyRole(PartyRole partyRole) {
        this.partyRole = partyRole;
    }
    /**
     * Auto generated value setter.
     * @param uom the uom to set
    */
    public void setUom(Uom uom) {
        this.uom = uom;
    }
    /**
     * Auto generated value setter.
     * @param techDataCalendar the techDataCalendar to set
    */
    public void setTechDataCalendar(TechDataCalendar techDataCalendar) {
        this.techDataCalendar = techDataCalendar;
    }
    /**
     * Auto generated value setter.
     * @param locatedAtFacility the locatedAtFacility to set
    */
    public void setLocatedAtFacility(Facility locatedAtFacility) {
        this.locatedAtFacility = locatedAtFacility;
    }
    /**
     * Auto generated value setter.
     * @param locatedAtFacilityLocation the locatedAtFacilityLocation to set
    */
    public void setLocatedAtFacilityLocation(FacilityLocation locatedAtFacilityLocation) {
        this.locatedAtFacilityLocation = locatedAtFacilityLocation;
    }
    /**
     * Auto generated value setter.
     * @param acctgTranses the acctgTranses to set
    */
    public void setAcctgTranses(List<AcctgTrans> acctgTranses) {
        this.acctgTranses = acctgTranses;
    }
    /**
     * Auto generated value setter.
     * @param deliverys the deliverys to set
    */
    public void setDeliverys(List<Delivery> deliverys) {
        this.deliverys = deliverys;
    }
    /**
     * Auto generated value setter.
     * @param childFixedAssets the childFixedAssets to set
    */
    public void setChildFixedAssets(List<FixedAsset> childFixedAssets) {
        this.childFixedAssets = childFixedAssets;
    }
    /**
     * Auto generated value setter.
     * @param fixedAssetAttributes the fixedAssetAttributes to set
    */
    public void setFixedAssetAttributes(List<FixedAssetAttribute> fixedAssetAttributes) {
        this.fixedAssetAttributes = fixedAssetAttributes;
    }
    /**
     * Auto generated value setter.
     * @param fixedAssetDepMethods the fixedAssetDepMethods to set
    */
    public void setFixedAssetDepMethods(List<FixedAssetDepMethod> fixedAssetDepMethods) {
        this.fixedAssetDepMethods = fixedAssetDepMethods;
    }
    /**
     * Auto generated value setter.
     * @param fixedAssetIdents the fixedAssetIdents to set
    */
    public void setFixedAssetIdents(List<FixedAssetIdent> fixedAssetIdents) {
        this.fixedAssetIdents = fixedAssetIdents;
    }
    /**
     * Auto generated value setter.
     * @param fixedAssetMaints the fixedAssetMaints to set
    */
    public void setFixedAssetMaints(List<FixedAssetMaint> fixedAssetMaints) {
        this.fixedAssetMaints = fixedAssetMaints;
    }
    /**
     * Auto generated value setter.
     * @param fixedAssetMaintOrders the fixedAssetMaintOrders to set
    */
    public void setFixedAssetMaintOrders(List<FixedAssetMaintOrder> fixedAssetMaintOrders) {
        this.fixedAssetMaintOrders = fixedAssetMaintOrders;
    }
    /**
     * Auto generated value setter.
     * @param fixedAssetProducts the fixedAssetProducts to set
    */
    public void setFixedAssetProducts(List<FixedAssetProduct> fixedAssetProducts) {
        this.fixedAssetProducts = fixedAssetProducts;
    }
    /**
     * Auto generated value setter.
     * @param fixedAssetRegistrations the fixedAssetRegistrations to set
    */
    public void setFixedAssetRegistrations(List<FixedAssetRegistration> fixedAssetRegistrations) {
        this.fixedAssetRegistrations = fixedAssetRegistrations;
    }
    /**
     * Auto generated value setter.
     * @param fixedAssetStdCosts the fixedAssetStdCosts to set
    */
    public void setFixedAssetStdCosts(List<FixedAssetStdCost> fixedAssetStdCosts) {
        this.fixedAssetStdCosts = fixedAssetStdCosts;
    }
    /**
     * Auto generated value setter.
     * @param partyFixedAssetAssignments the partyFixedAssetAssignments to set
    */
    public void setPartyFixedAssetAssignments(List<PartyFixedAssetAssignment> partyFixedAssetAssignments) {
        this.partyFixedAssetAssignments = partyFixedAssetAssignments;
    }
    /**
     * Auto generated value setter.
     * @param requirements the requirements to set
    */
    public void setRequirements(List<Requirement> requirements) {
        this.requirements = requirements;
    }
    /**
     * Auto generated value setter.
     * @param workEfforts the workEfforts to set
    */
    public void setWorkEfforts(List<WorkEffort> workEfforts) {
        this.workEfforts = workEfforts;
    }
    /**
     * Auto generated value setter.
     * @param workEffortFixedAssetAssigns the workEffortFixedAssetAssigns to set
    */
    public void setWorkEffortFixedAssetAssigns(List<WorkEffortFixedAssetAssign> workEffortFixedAssetAssigns) {
        this.workEffortFixedAssetAssigns = workEffortFixedAssetAssigns;
    }

    /**
     * Auto generated method that add item to collection.
     */
    public void addFixedAssetAttribute(FixedAssetAttribute fixedAssetAttribute) {
        if (this.fixedAssetAttributes == null) {
            this.fixedAssetAttributes = new ArrayList<FixedAssetAttribute>();
        }
        this.fixedAssetAttributes.add(fixedAssetAttribute);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFixedAssetAttribute(FixedAssetAttribute fixedAssetAttribute) {
        if (this.fixedAssetAttributes == null) {
            return;
        }
        this.fixedAssetAttributes.remove(fixedAssetAttribute);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFixedAssetAttribute() {
        if (this.fixedAssetAttributes == null) {
            return;
        }
        this.fixedAssetAttributes.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFixedAssetDepMethod(FixedAssetDepMethod fixedAssetDepMethod) {
        if (this.fixedAssetDepMethods == null) {
            this.fixedAssetDepMethods = new ArrayList<FixedAssetDepMethod>();
        }
        this.fixedAssetDepMethods.add(fixedAssetDepMethod);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFixedAssetDepMethod(FixedAssetDepMethod fixedAssetDepMethod) {
        if (this.fixedAssetDepMethods == null) {
            return;
        }
        this.fixedAssetDepMethods.remove(fixedAssetDepMethod);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFixedAssetDepMethod() {
        if (this.fixedAssetDepMethods == null) {
            return;
        }
        this.fixedAssetDepMethods.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFixedAssetIdent(FixedAssetIdent fixedAssetIdent) {
        if (this.fixedAssetIdents == null) {
            this.fixedAssetIdents = new ArrayList<FixedAssetIdent>();
        }
        this.fixedAssetIdents.add(fixedAssetIdent);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFixedAssetIdent(FixedAssetIdent fixedAssetIdent) {
        if (this.fixedAssetIdents == null) {
            return;
        }
        this.fixedAssetIdents.remove(fixedAssetIdent);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFixedAssetIdent() {
        if (this.fixedAssetIdents == null) {
            return;
        }
        this.fixedAssetIdents.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFixedAssetMaint(FixedAssetMaint fixedAssetMaint) {
        if (this.fixedAssetMaints == null) {
            this.fixedAssetMaints = new ArrayList<FixedAssetMaint>();
        }
        this.fixedAssetMaints.add(fixedAssetMaint);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFixedAssetMaint(FixedAssetMaint fixedAssetMaint) {
        if (this.fixedAssetMaints == null) {
            return;
        }
        this.fixedAssetMaints.remove(fixedAssetMaint);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFixedAssetMaint() {
        if (this.fixedAssetMaints == null) {
            return;
        }
        this.fixedAssetMaints.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFixedAssetMaintOrder(FixedAssetMaintOrder fixedAssetMaintOrder) {
        if (this.fixedAssetMaintOrders == null) {
            this.fixedAssetMaintOrders = new ArrayList<FixedAssetMaintOrder>();
        }
        this.fixedAssetMaintOrders.add(fixedAssetMaintOrder);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFixedAssetMaintOrder(FixedAssetMaintOrder fixedAssetMaintOrder) {
        if (this.fixedAssetMaintOrders == null) {
            return;
        }
        this.fixedAssetMaintOrders.remove(fixedAssetMaintOrder);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFixedAssetMaintOrder() {
        if (this.fixedAssetMaintOrders == null) {
            return;
        }
        this.fixedAssetMaintOrders.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFixedAssetProduct(FixedAssetProduct fixedAssetProduct) {
        if (this.fixedAssetProducts == null) {
            this.fixedAssetProducts = new ArrayList<FixedAssetProduct>();
        }
        this.fixedAssetProducts.add(fixedAssetProduct);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFixedAssetProduct(FixedAssetProduct fixedAssetProduct) {
        if (this.fixedAssetProducts == null) {
            return;
        }
        this.fixedAssetProducts.remove(fixedAssetProduct);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFixedAssetProduct() {
        if (this.fixedAssetProducts == null) {
            return;
        }
        this.fixedAssetProducts.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFixedAssetRegistration(FixedAssetRegistration fixedAssetRegistration) {
        if (this.fixedAssetRegistrations == null) {
            this.fixedAssetRegistrations = new ArrayList<FixedAssetRegistration>();
        }
        this.fixedAssetRegistrations.add(fixedAssetRegistration);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFixedAssetRegistration(FixedAssetRegistration fixedAssetRegistration) {
        if (this.fixedAssetRegistrations == null) {
            return;
        }
        this.fixedAssetRegistrations.remove(fixedAssetRegistration);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFixedAssetRegistration() {
        if (this.fixedAssetRegistrations == null) {
            return;
        }
        this.fixedAssetRegistrations.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addFixedAssetStdCost(FixedAssetStdCost fixedAssetStdCost) {
        if (this.fixedAssetStdCosts == null) {
            this.fixedAssetStdCosts = new ArrayList<FixedAssetStdCost>();
        }
        this.fixedAssetStdCosts.add(fixedAssetStdCost);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeFixedAssetStdCost(FixedAssetStdCost fixedAssetStdCost) {
        if (this.fixedAssetStdCosts == null) {
            return;
        }
        this.fixedAssetStdCosts.remove(fixedAssetStdCost);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearFixedAssetStdCost() {
        if (this.fixedAssetStdCosts == null) {
            return;
        }
        this.fixedAssetStdCosts.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addPartyFixedAssetAssignment(PartyFixedAssetAssignment partyFixedAssetAssignment) {
        if (this.partyFixedAssetAssignments == null) {
            this.partyFixedAssetAssignments = new ArrayList<PartyFixedAssetAssignment>();
        }
        this.partyFixedAssetAssignments.add(partyFixedAssetAssignment);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removePartyFixedAssetAssignment(PartyFixedAssetAssignment partyFixedAssetAssignment) {
        if (this.partyFixedAssetAssignments == null) {
            return;
        }
        this.partyFixedAssetAssignments.remove(partyFixedAssetAssignment);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearPartyFixedAssetAssignment() {
        if (this.partyFixedAssetAssignments == null) {
            return;
        }
        this.partyFixedAssetAssignments.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addWorkEffortFixedAssetAssign(WorkEffortFixedAssetAssign workEffortFixedAssetAssign) {
        if (this.workEffortFixedAssetAssigns == null) {
            this.workEffortFixedAssetAssigns = new ArrayList<WorkEffortFixedAssetAssign>();
        }
        this.workEffortFixedAssetAssigns.add(workEffortFixedAssetAssign);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeWorkEffortFixedAssetAssign(WorkEffortFixedAssetAssign workEffortFixedAssetAssign) {
        if (this.workEffortFixedAssetAssigns == null) {
            return;
        }
        this.workEffortFixedAssetAssigns.remove(workEffortFixedAssetAssign);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearWorkEffortFixedAssetAssign() {
        if (this.workEffortFixedAssetAssigns == null) {
            return;
        }
        this.workEffortFixedAssetAssigns.clear();
    }

    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setFixedAssetId((String) mapValue.get("fixedAssetId"));
        setFixedAssetTypeId((String) mapValue.get("fixedAssetTypeId"));
        setParentFixedAssetId((String) mapValue.get("parentFixedAssetId"));
        setInstanceOfProductId((String) mapValue.get("instanceOfProductId"));
        setClassEnumId((String) mapValue.get("classEnumId"));
        setPartyId((String) mapValue.get("partyId"));
        setRoleTypeId((String) mapValue.get("roleTypeId"));
        setUomId((String) mapValue.get("uomId"));
        setFixedAssetName((String) mapValue.get("fixedAssetName"));
        setDateAcquired((Timestamp) mapValue.get("dateAcquired"));
        setDateLastServiced((Timestamp) mapValue.get("dateLastServiced"));
        setDateNextService((Timestamp) mapValue.get("dateNextService"));
        setExpectedEndOfLife((Date) mapValue.get("expectedEndOfLife"));
        setActualEndOfLife((Date) mapValue.get("actualEndOfLife"));
        setProductionCapacity(convertToBigDecimal(mapValue.get("productionCapacity")));
        setCalendarId((String) mapValue.get("calendarId"));
        setSerialNumber((String) mapValue.get("serialNumber"));
        setLocatedAtFacilityId((String) mapValue.get("locatedAtFacilityId"));
        setLocatedAtLocationSeqId((String) mapValue.get("locatedAtLocationSeqId"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("fixedAssetId", getFixedAssetId());
        mapValue.put("fixedAssetTypeId", getFixedAssetTypeId());
        mapValue.put("parentFixedAssetId", getParentFixedAssetId());
        mapValue.put("instanceOfProductId", getInstanceOfProductId());
        mapValue.put("classEnumId", getClassEnumId());
        mapValue.put("partyId", getPartyId());
        mapValue.put("roleTypeId", getRoleTypeId());
        mapValue.put("uomId", getUomId());
        mapValue.put("fixedAssetName", getFixedAssetName());
        mapValue.put("dateAcquired", getDateAcquired());
        mapValue.put("dateLastServiced", getDateLastServiced());
        mapValue.put("dateNextService", getDateNextService());
        mapValue.put("expectedEndOfLife", getExpectedEndOfLife());
        mapValue.put("actualEndOfLife", getActualEndOfLife());
        mapValue.put("productionCapacity", getProductionCapacity());
        mapValue.put("calendarId", getCalendarId());
        mapValue.put("serialNumber", getSerialNumber());
        mapValue.put("locatedAtFacilityId", getLocatedAtFacilityId());
        mapValue.put("locatedAtLocationSeqId", getLocatedAtLocationSeqId());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        return mapValue;
    }


}
