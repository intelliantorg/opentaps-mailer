package org.opentaps.domain.base.entities;

/*
* Copyright (c) 2008 - 2009 Open Source Strategies, Inc.
*
* This program is free software; you can redistribute it and/or modify
* it under the terms of the Honest Public License.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* Honest Public License for more details.
*
* You should have received a copy of the Honest Public License
* along with this program; if not, write to Funambol,
* 643 Bair Island Road, Suite 305 - Redwood City, CA 94063, USA
*/

// DO NOT EDIT THIS FILE!  THIS IS AUTO GENERATED AND WILL GET WRITTEN OVER PERIODICALLY WHEN THE DATA MODEL CHANGES
// EXTEND THIS CLASS INSTEAD.

import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;

import javolution.util.FastMap;

import org.opentaps.foundation.entity.Entity;
import org.opentaps.foundation.entity.EntityFieldInterface;
import org.opentaps.foundation.repository.RepositoryException;
import org.opentaps.foundation.repository.RepositoryInterface;
import javax.persistence.*;
import java.lang.String;
import java.sql.Timestamp;

/**
 * Auto generated base entity WebSite.
 */
@javax.persistence.Entity
@Table(name="WEB_SITE")
public class WebSite extends Entity {
static {
java.util.Map<String, String> fields = new java.util.HashMap<String, String>();
        fields.put("webSiteId", "WEB_SITE_ID");
        fields.put("siteName", "SITE_NAME");
        fields.put("allowProductStoreChange", "ALLOW_PRODUCT_STORE_CHANGE");
        fields.put("httpHost", "HTTP_HOST");
        fields.put("httpPort", "HTTP_PORT");
        fields.put("httpsHost", "HTTPS_HOST");
        fields.put("httpsPort", "HTTPS_PORT");
        fields.put("enableHttps", "ENABLE_HTTPS");
        fields.put("standardContentPrefix", "STANDARD_CONTENT_PREFIX");
        fields.put("secureContentPrefix", "SECURE_CONTENT_PREFIX");
        fields.put("cookieDomain", "COOKIE_DOMAIN");
        fields.put("lastUpdatedStamp", "LAST_UPDATED_STAMP");
        fields.put("lastUpdatedTxStamp", "LAST_UPDATED_TX_STAMP");
        fields.put("createdStamp", "CREATED_STAMP");
        fields.put("createdTxStamp", "CREATED_TX_STAMP");
        fields.put("productStoreId", "PRODUCT_STORE_ID");
fieldMapColumns.put("WebSite", fields);
}
  public static enum Fields implements EntityFieldInterface<WebSite> {
    webSiteId("webSiteId"),
    siteName("siteName"),
    allowProductStoreChange("allowProductStoreChange"),
    httpHost("httpHost"),
    httpPort("httpPort"),
    httpsHost("httpsHost"),
    httpsPort("httpsPort"),
    enableHttps("enableHttps"),
    standardContentPrefix("standardContentPrefix"),
    secureContentPrefix("secureContentPrefix"),
    cookieDomain("cookieDomain"),
    lastUpdatedStamp("lastUpdatedStamp"),
    lastUpdatedTxStamp("lastUpdatedTxStamp"),
    createdStamp("createdStamp"),
    createdTxStamp("createdTxStamp"),
    productStoreId("productStoreId");
    private final String fieldName;
    private Fields(String name) { fieldName = name; }
    /** {@inheritDoc} */
    public String getName() { return fieldName; }
    /** {@inheritDoc} */
    public String asc() { return fieldName + " ASC"; }
    /** {@inheritDoc} */
    public String desc() { return fieldName + " DESC"; }
  }

    @org.hibernate.annotations.GenericGenerator(name="WebSite_GEN",  strategy="org.opentaps.foundation.entity.hibernate.OpentapsIdentifierGenerator")
    @GeneratedValue(generator="WebSite_GEN")   
    @Id
    
    @Column(name="WEB_SITE_ID")
    private String webSiteId;
    
    @Column(name="SITE_NAME")
    private String siteName;
    
    @Column(name="ALLOW_PRODUCT_STORE_CHANGE")
    private String allowProductStoreChange;
    
    @Column(name="HTTP_HOST")
    private String httpHost;
    
    @Column(name="HTTP_PORT")
    private String httpPort;
    
    @Column(name="HTTPS_HOST")
    private String httpsHost;
    
    @Column(name="HTTPS_PORT")
    private String httpsPort;
    
    @Column(name="ENABLE_HTTPS")
    private String enableHttps;
    
    @Column(name="STANDARD_CONTENT_PREFIX")
    private String standardContentPrefix;
    
    @Column(name="SECURE_CONTENT_PREFIX")
    private String secureContentPrefix;
    
    @Column(name="COOKIE_DOMAIN")
    private String cookieDomain;
    
    @Column(name="LAST_UPDATED_STAMP")
    private Timestamp lastUpdatedStamp;
    
    @Column(name="LAST_UPDATED_TX_STAMP")
    private Timestamp lastUpdatedTxStamp;
    
    @Column(name="CREATED_STAMP")
    private Timestamp createdStamp;
    
    @Column(name="CREATED_TX_STAMP")
    private Timestamp createdTxStamp;
    
    @Column(name="PRODUCT_STORE_ID")
    private String productStoreId;
    @ManyToOne(cascade = {CascadeType.PERSIST, CascadeType.MERGE}, fetch=FetchType.LAZY)
    @JoinColumn(name="PRODUCT_STORE_ID", insertable=false, updatable=false)
    @org.hibernate.annotations.Generated(
        org.hibernate.annotations.GenerationTime.ALWAYS
    )
    private ProductStore productStore = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="WEB_SITE_ID")
    private List<SubscriptionResource> subscriptionResources = null;
    @OneToMany(fetch=FetchType.LAZY)
    @JoinColumn(name="WEB_SITE_ID")
    private List<WebPage> webPages = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="webSite", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="WEB_SITE_ID")
    private List<WebSiteContent> webSiteContents = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="webSite", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="WEB_SITE_ID")
    private List<WebSitePathAlias> webSitePathAliases = null;
    @OneToMany(fetch=FetchType.LAZY, mappedBy="webSite", cascade = {CascadeType.PERSIST, CascadeType.MERGE, CascadeType.REMOVE})
    @JoinColumn(name="WEB_SITE_ID")
    private List<WebSiteRole> webSiteRoles = null;

  /**
   * Default constructor.
   */
  public WebSite() {
      super();
      this.baseEntityName = "WebSite";
      this.isView = false;
      
      this.primaryKeyNames = new ArrayList<String>();
      this.primaryKeyNames.add("webSiteId");
  }

  /**
   * Constructor with a repository.
   * @param repository a <code>RepositoryInterface</code> value
   */
  public WebSite(RepositoryInterface repository) {
      this();
      initRepository(repository);
  }

    /**
     * Auto generated value setter.
     * @param webSiteId the webSiteId to set
     */
    public void setWebSiteId(String webSiteId) {
        this.webSiteId = webSiteId;
    }
    /**
     * Auto generated value setter.
     * @param siteName the siteName to set
     */
    public void setSiteName(String siteName) {
        this.siteName = siteName;
    }
    /**
     * Auto generated value setter.
     * @param allowProductStoreChange the allowProductStoreChange to set
     */
    public void setAllowProductStoreChange(String allowProductStoreChange) {
        this.allowProductStoreChange = allowProductStoreChange;
    }
    /**
     * Auto generated value setter.
     * @param httpHost the httpHost to set
     */
    public void setHttpHost(String httpHost) {
        this.httpHost = httpHost;
    }
    /**
     * Auto generated value setter.
     * @param httpPort the httpPort to set
     */
    public void setHttpPort(String httpPort) {
        this.httpPort = httpPort;
    }
    /**
     * Auto generated value setter.
     * @param httpsHost the httpsHost to set
     */
    public void setHttpsHost(String httpsHost) {
        this.httpsHost = httpsHost;
    }
    /**
     * Auto generated value setter.
     * @param httpsPort the httpsPort to set
     */
    public void setHttpsPort(String httpsPort) {
        this.httpsPort = httpsPort;
    }
    /**
     * Auto generated value setter.
     * @param enableHttps the enableHttps to set
     */
    public void setEnableHttps(String enableHttps) {
        this.enableHttps = enableHttps;
    }
    /**
     * Auto generated value setter.
     * @param standardContentPrefix the standardContentPrefix to set
     */
    public void setStandardContentPrefix(String standardContentPrefix) {
        this.standardContentPrefix = standardContentPrefix;
    }
    /**
     * Auto generated value setter.
     * @param secureContentPrefix the secureContentPrefix to set
     */
    public void setSecureContentPrefix(String secureContentPrefix) {
        this.secureContentPrefix = secureContentPrefix;
    }
    /**
     * Auto generated value setter.
     * @param cookieDomain the cookieDomain to set
     */
    public void setCookieDomain(String cookieDomain) {
        this.cookieDomain = cookieDomain;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedStamp the lastUpdatedStamp to set
     */
    public void setLastUpdatedStamp(Timestamp lastUpdatedStamp) {
        this.lastUpdatedStamp = lastUpdatedStamp;
    }
    /**
     * Auto generated value setter.
     * @param lastUpdatedTxStamp the lastUpdatedTxStamp to set
     */
    public void setLastUpdatedTxStamp(Timestamp lastUpdatedTxStamp) {
        this.lastUpdatedTxStamp = lastUpdatedTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdStamp the createdStamp to set
     */
    public void setCreatedStamp(Timestamp createdStamp) {
        this.createdStamp = createdStamp;
    }
    /**
     * Auto generated value setter.
     * @param createdTxStamp the createdTxStamp to set
     */
    public void setCreatedTxStamp(Timestamp createdTxStamp) {
        this.createdTxStamp = createdTxStamp;
    }
    /**
     * Auto generated value setter.
     * @param productStoreId the productStoreId to set
     */
    public void setProductStoreId(String productStoreId) {
        this.productStoreId = productStoreId;
    }

    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getWebSiteId() {
        return this.webSiteId;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getSiteName() {
        return this.siteName;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getAllowProductStoreChange() {
        return this.allowProductStoreChange;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getHttpHost() {
        return this.httpHost;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getHttpPort() {
        return this.httpPort;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getHttpsHost() {
        return this.httpsHost;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getHttpsPort() {
        return this.httpsPort;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getEnableHttps() {
        return this.enableHttps;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getStandardContentPrefix() {
        return this.standardContentPrefix;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getSecureContentPrefix() {
        return this.secureContentPrefix;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getCookieDomain() {
        return this.cookieDomain;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedStamp() {
        return this.lastUpdatedStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getLastUpdatedTxStamp() {
        return this.lastUpdatedTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedStamp() {
        return this.createdStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>Timestamp</code>
     */
    public Timestamp getCreatedTxStamp() {
        return this.createdTxStamp;
    }
    /**
     * Auto generated value accessor.
     * @return <code>String</code>
     */
    public String getProductStoreId() {
        return this.productStoreId;
    }

    /**
     * Auto generated method that gets the related <code>ProductStore</code> by the relation named <code>ProductStore</code>.
     * @return the <code>ProductStore</code>
     * @throws RepositoryException if an error occurs
     */
    public ProductStore getProductStore() throws RepositoryException {
        if (this.productStore == null) {
            this.productStore = getRelatedOne(ProductStore.class, "ProductStore");
        }
        return this.productStore;
    }
    /**
     * Auto generated method that gets the related <code>SubscriptionResource</code> by the relation named <code>SubscriptionResource</code>.
     * @return the list of <code>SubscriptionResource</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends SubscriptionResource> getSubscriptionResources() throws RepositoryException {
        if (this.subscriptionResources == null) {
            this.subscriptionResources = getRelated(SubscriptionResource.class, "SubscriptionResource");
        }
        return this.subscriptionResources;
    }
    /**
     * Auto generated method that gets the related <code>WebPage</code> by the relation named <code>WebPage</code>.
     * @return the list of <code>WebPage</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends WebPage> getWebPages() throws RepositoryException {
        if (this.webPages == null) {
            this.webPages = getRelated(WebPage.class, "WebPage");
        }
        return this.webPages;
    }
    /**
     * Auto generated method that gets the related <code>WebSiteContent</code> by the relation named <code>WebSiteContent</code>.
     * @return the list of <code>WebSiteContent</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends WebSiteContent> getWebSiteContents() throws RepositoryException {
        if (this.webSiteContents == null) {
            this.webSiteContents = getRelated(WebSiteContent.class, "WebSiteContent");
        }
        return this.webSiteContents;
    }
    /**
     * Auto generated method that gets the related <code>WebSitePathAlias</code> by the relation named <code>WebSitePathAlias</code>.
     * @return the list of <code>WebSitePathAlias</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends WebSitePathAlias> getWebSitePathAliases() throws RepositoryException {
        if (this.webSitePathAliases == null) {
            this.webSitePathAliases = getRelated(WebSitePathAlias.class, "WebSitePathAlias");
        }
        return this.webSitePathAliases;
    }
    /**
     * Auto generated method that gets the related <code>WebSiteRole</code> by the relation named <code>WebSiteRole</code>.
     * @return the list of <code>WebSiteRole</code>
     * @throws RepositoryException if an error occurs
     */
    public List<? extends WebSiteRole> getWebSiteRoles() throws RepositoryException {
        if (this.webSiteRoles == null) {
            this.webSiteRoles = getRelated(WebSiteRole.class, "WebSiteRole");
        }
        return this.webSiteRoles;
    }

    /**
     * Auto generated value setter.
     * @param productStore the productStore to set
    */
    public void setProductStore(ProductStore productStore) {
        this.productStore = productStore;
    }
    /**
     * Auto generated value setter.
     * @param subscriptionResources the subscriptionResources to set
    */
    public void setSubscriptionResources(List<SubscriptionResource> subscriptionResources) {
        this.subscriptionResources = subscriptionResources;
    }
    /**
     * Auto generated value setter.
     * @param webPages the webPages to set
    */
    public void setWebPages(List<WebPage> webPages) {
        this.webPages = webPages;
    }
    /**
     * Auto generated value setter.
     * @param webSiteContents the webSiteContents to set
    */
    public void setWebSiteContents(List<WebSiteContent> webSiteContents) {
        this.webSiteContents = webSiteContents;
    }
    /**
     * Auto generated value setter.
     * @param webSitePathAliases the webSitePathAliases to set
    */
    public void setWebSitePathAliases(List<WebSitePathAlias> webSitePathAliases) {
        this.webSitePathAliases = webSitePathAliases;
    }
    /**
     * Auto generated value setter.
     * @param webSiteRoles the webSiteRoles to set
    */
    public void setWebSiteRoles(List<WebSiteRole> webSiteRoles) {
        this.webSiteRoles = webSiteRoles;
    }

    /**
     * Auto generated method that add item to collection.
     */
    public void addWebSiteContent(WebSiteContent webSiteContent) {
        if (this.webSiteContents == null) {
            this.webSiteContents = new ArrayList<WebSiteContent>();
        }
        this.webSiteContents.add(webSiteContent);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeWebSiteContent(WebSiteContent webSiteContent) {
        if (this.webSiteContents == null) {
            return;
        }
        this.webSiteContents.remove(webSiteContent);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearWebSiteContent() {
        if (this.webSiteContents == null) {
            return;
        }
        this.webSiteContents.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addWebSitePathAliase(WebSitePathAlias webSitePathAliase) {
        if (this.webSitePathAliases == null) {
            this.webSitePathAliases = new ArrayList<WebSitePathAlias>();
        }
        this.webSitePathAliases.add(webSitePathAliase);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeWebSitePathAliase(WebSitePathAlias webSitePathAliase) {
        if (this.webSitePathAliases == null) {
            return;
        }
        this.webSitePathAliases.remove(webSitePathAliase);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearWebSitePathAliase() {
        if (this.webSitePathAliases == null) {
            return;
        }
        this.webSitePathAliases.clear();
    }
    /**
     * Auto generated method that add item to collection.
     */
    public void addWebSiteRole(WebSiteRole webSiteRole) {
        if (this.webSiteRoles == null) {
            this.webSiteRoles = new ArrayList<WebSiteRole>();
        }
        this.webSiteRoles.add(webSiteRole);
    }
    /**
     * Auto generated method that remove item from collection.
     */
    public void removeWebSiteRole(WebSiteRole webSiteRole) {
        if (this.webSiteRoles == null) {
            return;
        }
        this.webSiteRoles.remove(webSiteRole);
    }
    /**
     * Auto generated method that clear items from collection.
     */
    public void clearWebSiteRole() {
        if (this.webSiteRoles == null) {
            return;
        }
        this.webSiteRoles.clear();
    }

    /** {@inheritDoc} */
    @Override
    public void fromMap(Map<String, Object> mapValue) {
        preInit();
        setWebSiteId((String) mapValue.get("webSiteId"));
        setSiteName((String) mapValue.get("siteName"));
        setAllowProductStoreChange((String) mapValue.get("allowProductStoreChange"));
        setHttpHost((String) mapValue.get("httpHost"));
        setHttpPort((String) mapValue.get("httpPort"));
        setHttpsHost((String) mapValue.get("httpsHost"));
        setHttpsPort((String) mapValue.get("httpsPort"));
        setEnableHttps((String) mapValue.get("enableHttps"));
        setStandardContentPrefix((String) mapValue.get("standardContentPrefix"));
        setSecureContentPrefix((String) mapValue.get("secureContentPrefix"));
        setCookieDomain((String) mapValue.get("cookieDomain"));
        setLastUpdatedStamp((Timestamp) mapValue.get("lastUpdatedStamp"));
        setLastUpdatedTxStamp((Timestamp) mapValue.get("lastUpdatedTxStamp"));
        setCreatedStamp((Timestamp) mapValue.get("createdStamp"));
        setCreatedTxStamp((Timestamp) mapValue.get("createdTxStamp"));
        setProductStoreId((String) mapValue.get("productStoreId"));
        postInit();
    }

    /** {@inheritDoc} */
    @Override
    public Map<String, Object> toMap() {
        Map<String, Object> mapValue = new FastMap<String, Object>();
        mapValue.put("webSiteId", getWebSiteId());
        mapValue.put("siteName", getSiteName());
        mapValue.put("allowProductStoreChange", getAllowProductStoreChange());
        mapValue.put("httpHost", getHttpHost());
        mapValue.put("httpPort", getHttpPort());
        mapValue.put("httpsHost", getHttpsHost());
        mapValue.put("httpsPort", getHttpsPort());
        mapValue.put("enableHttps", getEnableHttps());
        mapValue.put("standardContentPrefix", getStandardContentPrefix());
        mapValue.put("secureContentPrefix", getSecureContentPrefix());
        mapValue.put("cookieDomain", getCookieDomain());
        mapValue.put("lastUpdatedStamp", getLastUpdatedStamp());
        mapValue.put("lastUpdatedTxStamp", getLastUpdatedTxStamp());
        mapValue.put("createdStamp", getCreatedStamp());
        mapValue.put("createdTxStamp", getCreatedTxStamp());
        mapValue.put("productStoreId", getProductStoreId());
        return mapValue;
    }


}
