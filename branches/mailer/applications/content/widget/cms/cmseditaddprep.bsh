/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.Locale;
import java.net.URLEncoder;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;
import org.ofbiz.securityext.login.*;
import org.ofbiz.common.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.content.ContentManagementWorker;
import org.ofbiz.content.content.ContentWorker;
import org.ofbiz.content.data.DataResourceWorker;
import org.ofbiz.minilang.SimpleMapProcessor;
import org.ofbiz.webapp.ftl.FreeMarkerViewHandler;

import freemarker.template.SimpleHash;
import freemarker.template.SimpleSequence;

import javax.servlet.*;
import javax.servlet.http.*;

delegator = (GenericDelegator) request.getAttribute("delegator");
userLogin = session.getAttribute("userLogin");
contentAssocDataResourceViewFrom = delegator.makeValue("ContentAssocDataResourceViewFrom", null);

//singleWrapper = context.get("singleWrapper");
//context.put("contentPurposeTypeId", page.getProperty("contentPurposeTypeId"));
//context.put("targetOperation", page.getProperty("targetOperation"));
//context.put("entityOperation", page.getProperty("entityOperation"));

    contentId = context.get("contentId");
    
    contentAssocPK = delegator.makeValue("ContentAssoc", null);
    contentAssocPK.setAllFields(context, false, "ca", new Boolean(true));
    Debug.logInfo("in cmseditaddprep, contentAssocPK:" + contentAssocPK,"");
        //Debug.logInfo("in cmseditaddprep, context:" + context,"");
    contentAssoc = null;
    if (contentAssocPK.isPrimaryKey()) {
        contentAssoc = delegator.findByPrimaryKeyCache("ContentAssoc", contentAssocPK);
    }
    if (contentAssoc != null) {
        SimpleMapProcessor.runSimpleMapProcessor("org/ofbiz/content/ContentManagementMapProcessors.xml", "contentAssocOut", contentAssoc, contentAssocDataResourceViewFrom, new ArrayList(), Locale.getDefault());
    } else {
        contentAssocPK.setAllFields(context, false, "ca", null); //set all field, pk and non
        SimpleMapProcessor.runSimpleMapProcessor("org/ofbiz/content/ContentManagementMapProcessors.xml", "contentAssocOut", contentAssocPK, contentAssocDataResourceViewFrom, new ArrayList(), Locale.getDefault());
    }
        
    Debug.logInfo("in cmseditaddprep, contentAssocDataResourceViewFrom:" + contentAssocDataResourceViewFrom,"");
    /*
    contentIdTo = context.get("contentIdTo");
    mapKey = context.get("mapKey");
    contentAssocDataResourceViewFrom.put("caMapKey", mapKey);
    contentAssocTypeId = context.get("contentAssocTypeId");
    */
    
    dataResourceId = "";
    textData = "";
    content = null;
    if (UtilValidate.isNotEmpty(contentId)) {
        content = delegator.findByPrimaryKeyCache("Content", UtilMisc.toMap("contentId", contentId));
    
        if (content != null) {
            contentAssocDataResourceViewFrom.setAllFields(content, false, null, null);
        }
    } else {
        contentAssocDataResourceViewFrom.set("contentTypeId", "DOCUMENT");
    }
    
    if (content != null) {
       dataResourceId = content.getString("dataResourceId");
    }
    if (UtilValidate.isEmpty(dataResourceId)) {
        dataResourceId = (String)context.get("drDataResourceId");
        if (UtilValidate.isEmpty(dataResourceId)) {
            dataResourceId = (String)context.get("dataResourceId");
        }
    }
    if (UtilValidate.isNotEmpty(dataResourceId)) {
       dataResource = delegator.findByPrimaryKeyCache("DataResource", UtilMisc.toMap("dataResourceId", dataResourceId));
       SimpleMapProcessor.runSimpleMapProcessor("org/ofbiz/content/ContentManagementMapProcessors.xml", "dataResourceOut", dataResource, contentAssocDataResourceViewFrom, new ArrayList(), Locale.getDefault());
       templateRoot = new HashMap();
       FreeMarkerViewHandler.prepOfbizRoot(templateRoot, request, response);
       //txt = DataResourceWorker.renderDataResourceAsTextCache(delegator, dataResourceId, templateRoot, null, null, null);
       txt = DataResourceWorker.getDataResourceTextCache(dataResource, "text/html", Locale.getDefault(), templateRoot, delegator);

       if (UtilValidate.isNotEmpty(txt)) {
           textData = UtilFormatOut.encodeXmlValue(txt);
       }
    }
    Debug.logInfo("in cmseditaddprep, textData:" + textData,"");
    currentValue = new HashMap(contentAssocDataResourceViewFrom);
    currentValue.put("textData", textData);
    currentValue.put("nowTimestamp", UtilDateTime.nowTimestamp());
    //singleWrapper.putInContext("currentValue", contentAssocDataResourceViewFrom);
    context.put("currentValue", currentValue);
    request.setAttribute("previousParams", currentValue);

persistAction = context.get("persistAction");
if (UtilValidate.isEmpty(persistAction))
    persistAction = "persistContent";
context.put("persistAction", persistAction);

