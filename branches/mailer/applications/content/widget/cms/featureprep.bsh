/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */



import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;
import org.ofbiz.content.data.DataResourceWorker;
import org.ofbiz.webapp.ftl.FreeMarkerViewHandler;
import org.ofbiz.content.content.ContentWorker;
import org.ofbiz.content.ContentManagementWorker;

import java.io.StringWriter;
import freemarker.ext.beans.BeansWrapper;
import freemarker.template.SimpleHash;
import freemarker.template.WrappingTemplateModel;


import javax.servlet.*;
import javax.servlet.http.*;


delegator = (GenericDelegator) request.getAttribute("delegator");
paramMap = UtilHttp.getParameterMap(request);

contentId=context.get("contentId");
dataResourceId=context.get("dataResourceId");

productFeatureList = delegator.findAllCache("ProductFeature");
featureList = new ArrayList();
if (UtilValidate.isNotEmpty(dataResourceId)) {
    iter = productFeatureList.iterator();
    while (iter.hasNext()) {
        productFeature = iter.next();
        productFeatureId = productFeature.get("productFeatureId");
        description = productFeature.get("description");
        productFeatureDataResource = delegator.findByPrimaryKeyCache("ProductFeatureDataResource", UtilMisc.toMap("productFeatureId", productFeatureId, "dataResourceId", dataResourceId));
        if (productFeatureDataResource != null) {
            // action = productFeatureDataResource != null ? "Y" : "N";
            feature = new HashMap();
            feature.put("productFeatureId", productFeatureId );
            feature.put("dataResourceId", dataResourceId);
            feature.put("action", "Y");
            feature.put("description", description);
            featureList.add(feature);
        }
    }
    context.put("featureList", featureList);
}
