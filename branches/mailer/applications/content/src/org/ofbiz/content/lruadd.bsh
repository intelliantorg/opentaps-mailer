/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;

import javax.servlet.*;
import javax.servlet.http.*;

session = request.getSession();
UtilCache contentLookupCache = (UtilCache)session.getAttribute("contentLookupCache");
if(contentLookupCache == null){
    contentLookupCache	= new UtilCache("contentLookupCache",10,0);
    session.setAttribute("contentLookupCache", contentLookupCache);
}    

// If this event is called from a ContentAssoc req, then contentIdTo should be used.
String contentIdTo = (String)request.getAttribute("contentIdTo");
String contentId = request.getAttribute("contentId");
String contentIdParam = request.getParameter("contentId");
Debug.logInfo("in lruadd, contentIdParam:" + contentIdParam, null);
Debug.logInfo("in lruadd, contentId:" + contentId, null);
String id = null;
if(contentIdTo != null) id = contentIdTo;
else if (contentId != null) id = contentId;
else id = contentIdParam;

Debug.logInfo("in lruadd, id:" + id, null);

LocalDispatcher dispatcher	= (LocalDispatcher)request.getAttribute("dispatcher");
GenericDelegator delegator = (GenericDelegator) request.getAttribute("delegator");

GenericValue genericValue = delegator.findByPrimaryKey("Content", UtilMisc.toMap("contentId", id));
GenericPK pk	= null;
if(genericValue != null) pk = genericValue.getPrimaryKey();
contentLookupCache.put(id, pk);




//String contentOwnerId = (String)request.getAttribute("contentOwnerId");
//if(contentOwnerId != null){
	//genericValue = delegator.findByPrimaryKey("Content", UtilMisc.toMap("contentId", contentOwnerId));
	//contentLookupCache.put(contentOwnerId, genericValue);
//}
return "success";
