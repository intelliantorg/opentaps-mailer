/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;

import javax.servlet.*;
import javax.servlet.http.*;

session = request.getSession();
UtilCache dataResourceLookupCache = (UtilCache)session.getAttribute("dataResourceLookupCache");
if(dataResourceLookupCache == null){
    dataResourceLookupCache	= new UtilCache("dataResourceLookupCache",10,0);
    session.setAttribute("dataResourceLookupCache", dataResourceLookupCache);
}    

String dataResourceId = request.getParameter("dataResourceId");


LocalDispatcher dispatcher	= (LocalDispatcher)request.getAttribute("dispatcher");
GenericDelegator delegator = (GenericDelegator) request.getAttribute("delegator");

GenericValue genericValue = delegator.findByPrimaryKey("DataResource", UtilMisc.toMap("dataResourceId", dataResourceId));
GenericPK pk	= null;
if(genericValue != null) pk = genericValue.getPrimaryKey();
dataResourceLookupCache.put(dataResourceId, pk);

return "success";
