/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


// The only required parameter is "productionRunId".
// The "actionForm" parameter triggers actions (see "ProductionRunSimpleEvents.xml").

import java.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.util.EntityUtil;
import org.ofbiz.base.util.*;
import org.ofbiz.base.util.Debug;
import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.widget.html.HtmlFormWrapper;
import org.ofbiz.manufacturing.jobshopmgt.ProductionRun;

delegator = request.getAttribute("delegator");

productionRunId = parameters.get("productionRunId");
if (!UtilValidate.isEmpty(productionRunId)) {
    ProductionRun productionRun = new ProductionRun(productionRunId, delegator, dispatcher);
    if (productionRun.exist()){
        productionRunId = productionRun.getGenericValue().getString("workEffortId");
        context.put("productionRunId", productionRunId);
        context.put("productionRun", productionRun.getGenericValue());
        // Prepare production run header data
        HashMap productionRunData = new HashMap();
        productionRunData.put("productionRunId", productionRunId);
        productionRunData.put("productId", productionRun.getProductProduced().getString("productId"));
        productionRunData.put("currentStatusId", productionRun.getGenericValue().getString("currentStatusId"));
        productionRunData.put("facilityId", productionRun.getGenericValue().getString("facilityId"));
        productionRunData.put("workEffortName", productionRun.getProductionRunName());
        productionRunData.put("description", productionRun.getDescription());
        productionRunData.put("quantity", productionRun.getQuantity());
        productionRunData.put("estimatedStartDate",productionRun.getEstimatedStartDate());
        productionRunData.put("estimatedCompletionDate",productionRun.getEstimatedCompletionDate());
        context.put("productionRunData", productionRunData);

        // Find all the order items to which this production run is linked.
        List orderItems = delegator.findByAnd("WorkOrderItemFulfillment", UtilMisc.toMap("workEffortId", productionRunId));
        if (orderItems.size() > 0) {
            context.put("orderItems", orderItems);
        }

        // Find all the work efforts that must be completed before this one.
        List mandatoryWorkEfforts = EntityUtil.filterByDate(delegator.findByAnd("WorkEffortAssoc", UtilMisc.toMap("workEffortIdTo", productionRunId, "workEffortAssocTypeId", "WORK_EFF_PRECEDENCY")));
        if (mandatoryWorkEfforts.size() > 0) {
            context.put("mandatoryWorkEfforts", mandatoryWorkEfforts);
        }
        // Find all the work efforts that can start after this one.
        List dependentWorkEfforts = EntityUtil.filterByDate(delegator.findByAnd("WorkEffortAssoc", UtilMisc.toMap("workEffortIdFrom", productionRunId, "workEffortAssocTypeId", "WORK_EFF_PRECEDENCY")));
        if (dependentWorkEfforts.size() > 0) {
            context.put("dependentWorkEfforts", dependentWorkEfforts);
        }

        //  RoutingTasks list
        List productionRunRoutingTasks = productionRun.getProductionRunRoutingTasks();
        context.put("productionRunRoutingTasks", productionRunRoutingTasks);
        context.put("quantity", productionRun.getQuantity()); // this is useful to compute the total estimates runtime in the form

        //  Product component/parts list
        List productionRunComponentsData = productionRun.getProductionRunComponents();
        context.put("productionRunComponents", productionRunComponentsData);

        // Fixed assets list
        List productionRunFixedAssetsData = new LinkedList();
        for (Iterator tasksIt = productionRunRoutingTasks.iterator(); tasksIt.hasNext();) {
            GenericValue prodRunTask = (GenericValue)tasksIt.next();
            List taskFixedAssets = prodRunTask.getRelated("WorkEffortFixedAssetAssign");
            productionRunFixedAssetsData.addAll(taskFixedAssets);
        }
        context.put("productionRunFixedAssetsData", productionRunFixedAssetsData);
    }
}
