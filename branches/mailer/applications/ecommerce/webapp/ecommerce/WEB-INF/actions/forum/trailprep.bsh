/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;
import org.ofbiz.securityext.login.*;
import org.ofbiz.common.*;
import org.ofbiz.entity.model.*;

import javax.servlet.*;
import javax.servlet.http.*;

delegator = (GenericDelegator) request.getAttribute("delegator");

paramMap = UtilHttp.getParameterMap(request);
contentId = paramMap.get("contentId");
context.put("contentId", contentId);
nodeTrailCsv = paramMap.get("nodeTrailCsv");
//Debug.logInfo("in trailprep, nodeTrailCsv:" + nodeTrailCsv,"");

if (UtilValidate.isEmpty(nodeTrailCsv)) {
    nodeTrailCsv = request.getAttribute("nodeTrailCsv");
}
//Debug.logInfo("in trailprep, nodeTrailCsv:" + nodeTrailCsv,"");
context.put("nodeTrailCsv", nodeTrailCsv);

if (UtilValidate.isNotEmpty(nodeTrailCsv)) {
    ArrayList outList = new ArrayList();
    List contentIdList = StringUtil.split(nodeTrailCsv, ",");
    GenericValue content = null;
    String contentId = null;
    String contentName = null;
    ArrayList values = null;
    Iterator it = contentIdList.iterator();
    while (it.hasNext()) {
        contentId = (String)it.next();
        try {
            content = delegator.findByPrimaryKeyCache("Content", UtilMisc.toMap("contentId", contentId));
        } catch(GenericEntityException e) {
            //logError(e.getMessage(), module);
            //return new ArrayList(); HUH?
        }
        if (content != null) {
            contentName = (String)content.get("contentName");
            values = new ArrayList();
            values.add(contentId);
            values.add(contentName);
            outList.add(values);
        }
    }
    context.put("trailList", outList);
    //Debug.logInfo("in trailprep, outList:" + outList,"");
    singleWrapper = context.get("singleWrapper");
    if (singleWrapper != null) {
        singleWrapper.putInContext("nodeTrailCsv",nodeTrailCsv);
    }
}
