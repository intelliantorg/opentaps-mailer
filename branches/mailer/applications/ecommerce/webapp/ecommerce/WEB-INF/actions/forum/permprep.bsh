/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;
import org.ofbiz.content.content.PermissionRecorder;
import org.ofbiz.content.ContentManagementWorker;

import javax.servlet.*;
import javax.servlet.http.*;

paramMap = UtilHttp.getParameterMap(request);
//Debug.logInfo("in permprep, userLogin(0):" + userLogin, null);

// Get permission from pagedef config file
permission = context.get("permission");
permissionType = context.get("permissionType");
if (permissionType == null) permissionType = "simple";

entityName = context.get("entityName");
entityOperation = context.get("entityOperation");
targetOperation = context.get("targetOperation");
//Debug.logInfo("in permprep, targetOperation(0):" + targetOperation, null);

mode = paramMap.get("mode");
//Debug.logInfo("in permprep, contentId(0):" + request.getAttribute("contentId"),"");
currentValue = (GenericValue)request.getAttribute("currentValue");
//Debug.logInfo("in permprep, paramMap(1):" + paramMap, null);
//Debug.logInfo("in permprep, currentValue(1):" + currentValue, null);

if (UtilValidate.isNotEmpty(mode) && mode.equals("add")) {
    entityOperation = context.get("addEntityOperation");
    if (UtilValidate.isEmpty(entityOperation)) {
        entityOperation = context.get("entityOperation");
        if (UtilValidate.isEmpty(entityOperation)) {
            entityOperation = "_CREATE";
        }
    }
    targetOperation = context.get("addTargetOperation");
    //org.ofbiz.base.util.Debug.logInfo("in permprep, targetOperation:" + targetOperation, null);
    if (UtilValidate.isEmpty(targetOperation)) {
        targetOperation = context.get("targetOperation");
        if (UtilValidate.isEmpty(targetOperation)) {
            targetOperation = "CONTENT_CREATE";
        }
    }
} else {
    if (UtilValidate.isEmpty(entityOperation)) {
        entityOperation = "_UPDATE";
    }
    if (UtilValidate.isEmpty(targetOperation)) {
        targetOperation = "CONTENT_UPDATE";
    }
}

if (permissionType.equals("complex")) {
    mapIn = new HashMap();
    mapIn.put("userLogin", userLogin);
    List targetOperationList = StringUtil.split(targetOperation, "|");
    mapIn.put("targetOperationList", targetOperationList );
    String thisContentId = null;
    
    //Debug.logInfo("in permprep, userLogin(1):" + userLogin, null);
    //if (userLogin != null) {
        //Debug.logInfo("in permprep, userLoginId(1):" + userLogin.get("userLoginId"), null);
    //}
    if (currentValue == null || (entityName != null && !entityName.equals("Content"))) {
        permissionIdName = context.get("permissionIdName");
        //org.ofbiz.base.util.Debug.logInfo("in permprep, permissionIdName(1):" + permissionIdName, null);
        if (UtilValidate.isNotEmpty(permissionIdName)) {
            thisContentId = ContentManagementWorker.getFromSomewhere(permissionIdName, paramMap, request, context);
        } else if (UtilValidate.isEmpty(thisContentId)) {
            thisContentId = ContentManagementWorker.getFromSomewhere("subContentId", paramMap, request, context);
        } else if (UtilValidate.isEmpty(thisContentId)) {
            thisContentId = ContentManagementWorker.getFromSomewhere("contentIdTo", paramMap, request, context);
        } else if (UtilValidate.isEmpty(thisContentId)) {
            thisContentId = ContentManagementWorker.getFromSomewhere("contentId", paramMap, request, context);
        }
        //org.ofbiz.base.util.Debug.logInfo("in permprep, thisContentId(2):" + thisContentId, null);
    } else {
        thisContentId = currentValue.get("contentId");
    }
    //org.ofbiz.base.util.Debug.logInfo("in permprep, thisContentId(3):" + thisContentId, null);

    if (currentValue == null || (entityName != null && !entityName.equals("Content"))) {
        if (UtilValidate.isNotEmpty(thisContentId)) {
            currentValue = delegator.findByPrimaryKey("Content", UtilMisc.toMap("contentId", thisContentId));
        }
    }
    if (UtilValidate.isNotEmpty(mode) && mode.equals("add")) {
        addEntityOperation = context.get("addEntityOperation");
        if (UtilValidate.isNotEmpty(addEntityOperation)) {
            entityOperation = addEntityOperation;
        }
    } else {
        editEntityOperation = context.get("editEntityOperation");
        if (UtilValidate.isNotEmpty(editEntityOperation)) {
            entityOperation = editEntityOperation;
        }
    }
    //org.ofbiz.base.util.Debug.logInfo("in permprep, currentValue(2):" + currentValue, null);
    if (currentValue != null && currentValue.getEntityName().equals("Content")) {
        mapIn.put("currentContent", currentValue);
    }
    mapIn.put("entityOperation", entityOperation);

    contentPurposeTypeId = context.get("contentPurposeTypeId");
    if (UtilValidate.isNotEmpty(contentPurposeTypeId)) {
        mapIn.put("contentPurposeList", StringUtil.split(contentPurposeTypeId, "|"));
    }

    //org.ofbiz.base.util.Debug.logInfo("in permprep, mapIn:" + mapIn, null);
    result = dispatcher.runSync("checkContentPermission", mapIn);
    permissionStatus = result.get("permissionStatus");
    //org.ofbiz.base.util.Debug.logInfo("in permprep, permissionStatus:" + permissionStatus, null);
    if (permissionStatus != null && permissionStatus.equals("granted")) {
        context.put("hasPermission", Boolean.TRUE);
        request.setAttribute("hasPermission", Boolean.TRUE);
        request.setAttribute("permissionStatus", "granted");
    } else {
        context.put("hasPermission", Boolean.FALSE);
        request.setAttribute("hasPermission", Boolean.FALSE);
        request.setAttribute("permissionStatus", "");
        String errorMessage = "Permission to display:" + page.getPageName() + " is denied.";
        PermissionRecorder recorder = (PermissionRecorder)result.get("permissionRecorder");
        //Debug.logInfo("recorder(0):" + recorder, "");
        if (recorder != null) {
            String permissionMessage = recorder.toHtml();
            //Debug.logInfo("permissionMessage(0):" + permissionMessage, "");
            errorMessage += " \n " + permissionMessage;
        }
        request.setAttribute("errorMsgReq", errorMessage);
    }
    //Debug.logInfo("in permprep, contentId(1):" + request.getAttribute("contentId"),"");
} else {
    //org.ofbiz.base.util.Debug.logInfo("permission:" + permission , null);
    //org.ofbiz.base.util.Debug.logInfo("entityOperation:" + entityOperation , null);
    if (security.hasEntityPermission(permission, entityOperation, session)) {
        //org.ofbiz.base.util.Debug.logInfo("hasEntityPermission is true:" , null);
    	context.put("hasPermission", Boolean.TRUE);
        request.setAttribute("hasPermission", Boolean.TRUE);
        request.setAttribute("permissionStatus", "granted");
    } else {
        //org.ofbiz.base.util.Debug.logInfo("hasEntityPermission is false:" , null);
    	context.put("hasPermission", Boolean.FALSE);
        request.setAttribute("hasPermission", Boolean.FALSE);
        request.setAttribute("permissionStatus", "");
    }
}
