/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import org.ofbiz.entity.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.base.util.*;
import org.ofbiz.order.shoppingcart.*;
import org.ofbiz.party.contact.*;
import org.ofbiz.product.catalog.*;

cart = session.getAttribute("shoppingCart");
partyId = cart.getPartyId();
context.put("cart", cart);

// nuke the event messages
request.removeAttribute("_EVENT_MESSAGE_");

if (partyId != null && !partyId.equals("_NA_")) {
    party = delegator.findByPrimaryKey("Party", UtilMisc.toMap("partyId", partyId));
    person = party.getRelatedOne("Person");
    context.put("party", party);
    context.put("person", person);
}

if (cart != null && cart.getShippingContactMechId() != null) {
    shippingContactMechId = cart.getShippingContactMechId();
    shippingPartyContactDetail = EntityUtil.getFirst(EntityUtil.filterByDate(delegator.findByAnd("PartyContactDetailByPurpose", 
 	   UtilMisc.toMap("partyId", partyId, "contactMechId", shippingContactMechId)), true));
    parameters.put("shippingContactMechId", shippingPartyContactDetail.get("contactMechId"));
    context.put("callSubmitForm",true);
    
    fullAddressBuf = new StringBuffer();
    fullAddressBuf.append(shippingPartyContactDetail.get("address1"));
    if (shippingPartyContactDetail.get("address2") != null) {
        fullAddressBuf.append(", ");
        fullAddressBuf.append(shippingPartyContactDetail.get("address2"));
    }
    fullAddressBuf.append(", ");
    fullAddressBuf.append(shippingPartyContactDetail.get("city"));
    fullAddressBuf.append(", ");
    fullAddressBuf.append(shippingPartyContactDetail.get("postalCode"));
    parameters.put("fullAddress", fullAddressBuf.toString());

    // NOTE: these parameters are a special case because they might be filled in by the address lookup service, so if they are there we won't fill in over them...
    if (parameters.get("postalCode") == null) { 
        parameters.put("attnName", shippingPartyContactDetail.get("attnName"));
        parameters.put("address1", shippingPartyContactDetail.get("address1"));
        parameters.put("address2", shippingPartyContactDetail.get("address2"));
        parameters.put("city", shippingPartyContactDetail.get("city"));
        parameters.put("postalCode", shippingPartyContactDetail.get("postalCode"));
        parameters.put("stateProvinceGeoId", shippingPartyContactDetail.get("stateProvinceGeoId"));
        parameters.put("countryGeoId", shippingPartyContactDetail.get("countryGeoId"));
        parameters.put("allowSolicitation", shippingPartyContactDetail.get("allowSolicitation"));
    }

    parameters.put("yearsAtAddress", shippingPartyContactDetail.get("yearsWithContactMech"));
    parameters.put("monthsAtAddress", shippingPartyContactDetail.get("monthsWithContactMech"));
} else {
    context.put("postalFields", UtilHttp.getParameterMap(request));
}
        

