/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.service.*;
import org.ofbiz.product.product.ProductContentWrapper;
import org.ofbiz.product.catalog.*;
import org.ofbiz.product.store.*;
import org.ofbiz.order.shoppingcart.*;

delegator = request.getAttribute("delegator");
miniProduct = request.getAttribute("miniProduct");
optProductId = request.getAttribute("optProductId");
webSiteId = CatalogWorker.getWebSiteId(request);
prodCatalogId = CatalogWorker.getCurrentCatalogId(request);
productStoreId = ProductStoreWorker.getProductStoreId(request);
cart = ShoppingCartEvents.getCartObject(request);

if (optProductId != null) {    
    miniProduct = delegator.findByPrimaryKey("Product", UtilMisc.toMap("productId", optProductId));
}
    
if (miniProduct != null && productStoreId != null && prodCatalogId != null) {
    userLogin = session.getAttribute("userLogin");
    dispatcher = request.getAttribute("dispatcher");
    
    // calculate the "your" price
    priceParams = UtilMisc.toMap("product", miniProduct, 
        "prodCatalogId", prodCatalogId, "webSiteId", webSiteId, 
        "currencyUomId", cart.getCurrency(),
        "autoUserLogin", session.getAttribute("autoUserLogin"));
    priceParams.put("productStoreId", productStoreId);
    if (userLogin != null) priceParams.put("partyId", userLogin.get("partyId"));
    priceResult = dispatcher.runSync("calculateProductPrice", priceParams);
    // returns: isSale, price, orderItemPriceInfos

    context.put("priceResult", priceResult);

    context.put("miniProduct", miniProduct);
    context.put("nowTimeLong", UtilDateTime.nowTimestamp().getTime());

    context.put("miniProdFormName", request.getAttribute("miniProdFormName"));
    context.put("miniProdQuantity", request.getAttribute("miniProdQuantity"));

    // make the miniProductContentWrapper
    ProductContentWrapper miniProductContentWrapper = new ProductContentWrapper(miniProduct, request);
    context.put("miniProductContentWrapper", miniProductContentWrapper);
}

