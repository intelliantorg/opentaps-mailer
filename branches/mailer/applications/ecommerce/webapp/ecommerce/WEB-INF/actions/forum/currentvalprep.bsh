/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;
import org.ofbiz.content.ContentManagementWorker;

import javax.servlet.*;
import javax.servlet.http.*;
LocalDispatcher dispatcher	= (LocalDispatcher)request.getAttribute("dispatcher");
GenericDelegator delegator = (GenericDelegator) request.getAttribute("delegator");
Map parameters = context.get("parameters");
currentEntityMap = session.getAttribute("currentEntityMap");
if (currentEntityMap == null) {
    currentEntityMap = new HashMap();
    session.setAttribute("currentEntityMap", currentEntityMap);
}

entityName = context.get("entityName");
currentEntityPropertyName = parameters.get("currentEntityPropertyName");
if (currentEntityPropertyName == null) {
    currentEntityName = entityName;
} else {
    currentEntityName = parameters.get(currentEntityPropertyName);
}

//Debug.logInfo("in currentvalprep, currentEntityName:" + currentEntityName,"");
cachedPK = currentEntityMap.get(currentEntityName);
//Debug.logInfo("in currentvalprep, cachedPK:" + cachedPK,"");

// Build a key from param or attribute values.
Map paramMap = UtilHttp.getParameterMap(request);
//Debug.logInfo("paramMap:" + paramMap, null);
GenericValue v = delegator.makeValue(currentEntityName, null);
passedPK = v.getPrimaryKey();
keyColl = passedPK.getAllKeys();
keyIt = keyColl.iterator();
while (keyIt.hasNext()) {
    attrName = (String)keyIt.next();
    attrVal = request.getAttribute(attrName);
    if (attrVal == null) {
        attrVal = paramMap.get(attrName);
    }
    //Debug.logInfo("in currentvalprep, attrName:" + attrName,"");
    //Debug.logInfo("in currentvalprep, attrVal:" + attrVal,"");
    if (attrVal != null && attrVal != void) {
        passedPK.put(attrName,attrVal);
    }
}

//Debug.logInfo("in currentvalprep, passedPK:" + passedPK,"");
// messed up code to determine whether or not the cached or passed keys have missing fields,
// in which case, the valid one is used to retrieve the current value
boolean pksEqual = true;
if (cachedPK != null) {
    keyColl = cachedPK.getPrimaryKey().getAllKeys();
    keyIt = keyColl.iterator();
    while (keyIt.hasNext()) {
        String sCached = null;
        String sPassed = null;
        Object oCached = null;
        Object oCached = null;
        String ky = (String)keyIt.next();
        oPassed = passedPK.get(ky);
        if (oPassed != null) {
            sPassed = oPassed.toString();
            if (sPassed == null || sPassed.length() == 0) {
                pksEqual = false;
            } else {
                oCached = cachedPK.get(ky);
                if (oCached != null) {
                    sCached = oCached.toString();
                    if (sPassed == null || sPassed.length() == 0) {
                        pksEqual = false;
                    } else {
                        if (!sPassed.equals(sCached)) {
                            //pksEqual = true;
                        }
                    }
                }
            }
        } else {
            pksEqual = false;
        }
    }
} 

currentPK = passedPK;
if (!pksEqual) {
    currentPK = cachedPK;
   // all other condition result in currentPK = passedPK
}
//Debug.logInfo("in currentvalprep, currentPK:" + currentPK,"");

currentEntityMap.put(currentEntityName, currentPK);
request.setAttribute("currentPK", currentPK);
context.put("currentPK", currentPK);
currentValue = delegator.findByPrimaryKey(currentPK.getPrimaryKey()); 
context.put("currentValue", currentValue);
request.setAttribute("currentValue", currentValue);

// Debug.logInfo("===========in currentvalprep, currentValue:" + request.getAttribute("currentValue"),"");
if (currentValue != null) {
    if (currentEntityName.indexOf("DataResource") >= 0) {
        String suffix = "";
        String s = null;
        try {
            s = (String)currentValue.get("dataResourceTypeId");
            if (UtilValidate.isNotEmpty(s)) {
                suffix = "_" + s;
            }
        } catch(IllegalArgumentException e) { 
            // ignore 
        }
        try {
            if (UtilValidate.isEmpty(suffix)) {
                s = (String)currentValue.get("drDataResourceTypeId");
                if (UtilValidate.isNotEmpty(s)) {
                    suffix += "_" + s;
                }
            }
        } catch(IllegalArgumentException e) { 
            // ignore 
        }

        if (UtilValidate.isNotEmpty(suffix) && suffix.equals("_ELECTRONIC_TEXT")) {
            try {
                s = (String)currentValue.get("mimeTypeId");
                if (UtilValidate.isNotEmpty(s)) {
                    suffix += "_" + s;
                }
            } catch (IllegalArgumentException e) {
                // ignore 
            }
            try {
                if (UtilValidate.isEmpty(s)) {
                    s = (String)currentValue.get("drMimeTypeId");
                    if (UtilValidate.isNotEmpty(s)) {
                        suffix += "_" + s;
                    }
                }
            } catch(IllegalArgumentException e) { 
                // ignore 
            }
        }

        //Debug.logInfo("in currentvalprep, suffix:" + suffix,"");
//        if (UtilValidate.isNotEmpty(suffix)) {
//            ContentManagementWorker.mruAdd(session, (GenericEntity)currentPK, suffix);
//        } else {
            ContentManagementWorker.mruAdd(session, (GenericEntity)currentPK);
//        }
    } else {
        ContentManagementWorker.mruAdd(session, (GenericEntity)currentPK);
    }
}
//Debug.logInfo("in currentvalprep, contentId:" + request.getAttribute("contentId"),"");
