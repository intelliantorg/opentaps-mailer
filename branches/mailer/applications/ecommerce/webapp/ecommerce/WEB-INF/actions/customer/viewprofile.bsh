/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.lang.*;
import java.util.*;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.party.contact.ContactMechWorker;
import org.ofbiz.product.store.ProductStoreWorker;
import org.ofbiz.accounting.payment.PaymentWorker;

productStoreId = ProductStoreWorker.getProductStoreId(request);
context.put("productStoreId", productStoreId);

if (userLogin != null) {
    profiledefs = delegator.findByPrimaryKey("PartyProfileDefault", UtilMisc.toMap("partyId", partyId, "productStoreId", productStoreId));
    
    showOld = "true".equals(request.getParameter("SHOW_OLD"));
     
    partyContactMechValueMaps = ContactMechWorker.getPartyContactMechValueMaps(delegator, userLogin.getString("partyId"), showOld);
    paymentMethodValueMaps = PaymentWorker.getPartyPaymentMethodValueMaps(delegator, userLogin.getString("partyId"), showOld);
    
    context.put("profiledefs", profiledefs);
    context.put("showOld", showOld);
    context.put("partyContactMechValueMaps", partyContactMechValueMaps);
    context.put("paymentMethodValueMaps", paymentMethodValueMaps);

    // shipping methods - for default selection
    if (profiledefs != null && profiledefs.get("defaultShipAddr") != null) {
        shipAddress = delegator.findByPrimaryKey("PostalAddress", UtilMisc.toMap("contactMechId", profiledefs.get("defaultShipAddr")));
        if (shipAddress != null) {
            carrierShipMeths = ProductStoreWorker.getAvailableStoreShippingMethods(delegator, productStoreId, shipAddress, UtilMisc.toList(new Double(1)), null, 0, 1);
            context.put("carrierShipMethods", carrierShipMeths);
        }
    }

    profileSurveys = ProductStoreWorker.getProductSurveys(delegator, productStoreId, null, "CUSTOMER_PROFILE");
    context.put("surveys", profileSurveys);

    orderBy = UtilMisc.toList("-entryDate");
    findOpts = new EntityFindOptions();
    findOpts.setMaxRows(5);
    exprs = UtilMisc.toList(new EntityExpr("partyIdTo", EntityOperator.EQUALS, partyId));
    exprs.add(new EntityExpr("statusId", EntityOperator.NOT_EQUAL, "COM_READ"));
    condition = new EntityConditionList(exprs, EntityOperator.AND);
    messages = delegator.findByCondition("CommunicationEvent", condition, null, null, orderBy, findOpts);
    context.put("messages", messages);
    context.put("profileMessages", true);

    partyContent = delegator.findByAnd("ContentRole", UtilMisc.toMap("partyId", partyId, "roleTypeId", "OWNER"));
    partyContent = EntityUtil.filterByDate(partyContent);
    context.put("partyContent", partyContent);

    mimeTypes = delegator.findAll("MimeType", UtilMisc.toList("description", "mimeTypeId"));
    context.put("mimeTypes", mimeTypes);

    contentPurposes = delegator.findByAnd("Enumeration", UtilMisc.toMap("enumTypeId", "PTYCNT_PRP"), UtilMisc.toList("sequenceId"));
    context.put("contentPurposes", contentPurposes);

    // call the getOrderedSummaryInformation service to get the sub-total of valid orders in last X months
    monthsToInclude = new Integer(12);
    Map serviceIn = UtilMisc.toMap("partyId", partyId, "roleTypeId", "PLACING_CUSTOMER", "orderTypeId", "SALES_ORDER", "statusId", "ORDER_COMPLETED", "monthsToInclude", monthsToInclude, "userLogin", userLogin);
    Map result = dispatcher.runSync("getOrderedSummaryInformation", serviceIn);
    context.put("monthsToInclude", monthsToInclude);
    context.put("totalSubRemainingAmount", result.get("totalSubRemainingAmount"));
    context.put("totalOrders", result.get("totalOrders"));
    
    contactListPartyList = delegator.findByAnd("ContactListParty", UtilMisc.toMap("partyId", partyId), UtilMisc.toList("-fromDate"));
    // show all, including history, ie don't filter: contactListPartyList = EntityUtil.filterByDate(contactListPartyList, true);
    context.put("contactListPartyList", contactListPartyList);

    publicContactLists = delegator.findByAnd("ContactList", UtilMisc.toMap("isPublic", "Y"), UtilMisc.toList("contactListName"));
    context.put("publicContactLists", publicContactLists);

    partyAndContactMechList = delegator.findByAnd("PartyAndContactMech", UtilMisc.toMap("partyId", partyId), UtilMisc.toList("-fromDate"));
    partyAndContactMechList = EntityUtil.filterByDate(partyAndContactMechList, true);
    context.put("partyAndContactMechList", partyAndContactMechList);
}
