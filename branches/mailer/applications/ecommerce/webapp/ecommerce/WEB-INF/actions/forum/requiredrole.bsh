/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;

import javax.servlet.*;
import javax.servlet.http.*;

dispatcher = (LocalDispatcher)request.getAttribute("dispatcher");
delegator = (GenericDelegator) request.getAttribute("delegator");
security = request.getAttribute("security");
    
paramMap = UtilHttp.getParameterMap(request);
security = request.getAttribute("security");

// Get permission from pagedef config file
requiredRoles = page.getProperty("requiredRoles");
entityOperation = page.getProperty("entityOperation");
if (UtilValidate.isEmpty(entityOperation)) {
    entityOperation = "_CREATE";
}

requiredRoleList = StringUtil.split(requiredRoles, "|");
//if (Debug.infoOn()) Debug.logInfo("in requiredrole, requiredRoleList:" + requiredRoleList, "");
hasPermission = Boolean.FALSE;
permissionStatus = "";

userLogin = session.getAttribute("userLogin");
if (userLogin == null) {
    context.put("hasPermission", Boolean.FALSE);
    request.setAttribute("hasPermission", Boolean.FALSE);
    request.setAttribute("permissionStatus", "");
    return;
}

if (security.hasEntityPermission("CONTENTMGR", entityOperation, session)) {
    context.put("hasPermission", Boolean.TRUE);
    request.setAttribute("hasPermission", Boolean.TRUE);
    request.setAttribute("permissionStatus", Boolean.TRUE);
} else {
    partyId = userLogin.get("partyId");
    partyRoleValues = delegator.findByAndCache("PartyRole", UtilMisc.toMap("partyId", partyId));
    iter = partyRoleValues.iterator();
    while (iter.hasNext()) {
        value = iter.next();
        role = value.get("roleTypeId");
        //if (Debug.infoOn()) Debug.logInfo("in requiredrole, PartyRole.roleTypeId:" + role, "");
        if (requiredRoleList.contains(role)) {
            hasPermission = Boolean.TRUE;
            permissionStatus = "granted";
            break;
        }
    }
    //f (Debug.infoOn()) Debug.logInfo("in requiredrole, permissionStatus:" + permissionStatus, "");
    context.put("hasPermission", hasPermission);
    request.setAttribute("hasPermission", hasPermission);
    request.setAttribute("permissionStatus", permissionStatus);
}
