/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;
import org.ofbiz.base.util.collections.LifoSet;

import javax.servlet.*;
import javax.servlet.http.*;

GenericDelegator delegator = (GenericDelegator) request.getAttribute("delegator");
entityName = "ContentDataResourceView";
lookupCaches = (Map)session.getAttribute("lookupCaches");

//org.ofbiz.base.util.Debug.logInfo("entityName:" + entityName, "");
//org.ofbiz.base.util.Debug.logInfo("in mruprep.bsh, lookupCaches:" + lookupCaches, "");
if (lookupCaches == null) {
    lookupCaches = new HashMap();
    session.setAttribute("lookupCaches", lookupCaches);
} 
lifoSet = (LifoSet) lookupCaches.get(entityName);
//org.ofbiz.base.util.Debug.logInfo("lifoSet:" + lifoSet, "");

if (lifoSet == null) {
    lifoSet = new LifoSet(10);
    lookupCaches.put("ContentAssocDataResourceViewFrom", lifoSet);
}

int sz = lifoSet.size();
Object contentIdKey = null;
mrvList = new ArrayList();

iter = lifoSet.iterator();
while (iter.hasNext()) {
    pk0 = iter.next();
    pk = pk0.getPrimaryKey();
    gv = delegator.findByPrimaryKeyCache(pk); 
    if (gv != null) {
        String [] arr = { gv.get("contentId"), gv.get("contentName") };
        mrvList.add(arr);
    } else {
        // should handle errors in some other way; this does not provide any tracing; impossible to locat
        // where the error actually occured
        //Debug.logError("findByPrimaryKey on " + pk + " returned null");
    }
}
context.put("mrvList", mrvList);
