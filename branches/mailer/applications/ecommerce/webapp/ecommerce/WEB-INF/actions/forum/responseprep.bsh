/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;
import org.ofbiz.securityext.login.*;
import org.ofbiz.common.*;
import org.ofbiz.content.content.ContentWorker;

import javax.servlet.*;
import javax.servlet.http.*;

delegator = (GenericDelegator) request.getAttribute("delegator");

paramMap = UtilHttp.getParameterMap(request);

    
contentIdTo = paramMap.get("contentIdTo");
nodeTrailCsv = paramMap.get("nodeTrailCsv");
//Debug.logInfo("in viewprep, nodeTrailCsv:" + nodeTrailCsv,"");
context.put("nodeTrailCsv", nodeTrailCsv);
contentId = paramMap.get("contentIdTo");
context.put("subContentId", contentId);
context.put("contentIdTo", contentId);

trail = StringUtil.split(nodeTrailCsv, ",");
siteAncestorList = new ArrayList();
idList = new ArrayList();
if (trail != null && trail.size() > 0) {
    pubPt = trail.get(0);
    ContentWorker.getContentAncestry(delegator, pubPt, "SUBSITE", "To", idList);
    idList.add(pubPt);
}

// start at 1 to skip webSiteId
for (int i=1; i<idList.size(); i++) {
    id = idList.get(i);
    webSitePublishPoint = delegator.findByPrimaryKeyCache("WebSitePublishPoint", UtilMisc.toMap("contentId", id));
    siteAncestorList.add(webSitePublishPoint);
}
context.put("siteAncestorList", siteAncestorList);
//Debug.logInfo("in viewprep, siteAncestorList:" + siteAncestorList,"");

singleWrapper = context.get("singleWrapper");
// singleWrapper.putInContext("pageName", page.getPageName());
singleWrapper.putInContext("contentIdTo", contentIdTo);
singleWrapper.putInContext("summaryDataResourceTypeId", null);
singleWrapper.putInContext("mapKey", null);
singleWrapper.putInContext("nodeTrailCsv", nodeTrailCsv);
