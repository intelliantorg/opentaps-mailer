/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;
import org.ofbiz.base.util.collections.LifoSet;

import javax.servlet.*;
import javax.servlet.http.*;

GenericDelegator delegator = (GenericDelegator) request.getAttribute("delegator");
entityName = page.getProperty("entityName");
lookupCaches = (Map)session.getAttribute("lookupCaches");

//org.ofbiz.base.util.Debug.logInfo("entityName:" + entityName, "");
//org.ofbiz.base.util.Debug.logInfo("in mruprep.bsh, lookupCaches:" + lookupCaches, "");
if (lookupCaches == null) {
    lookupCaches = new HashMap();
    session.setAttribute("lookupCaches", lookupCaches);
}

cacheEntityName = entityName;
//Debug.logInfo("index:" + entityName.indexOf("DataResource") , "");
if (UtilValidate.isNotEmpty(entityName) && entityName.indexOf("DataResource") >= 0) {
    cacheEntityName = "DataResourceContentView";
    dataResourceTypeId = request.getParameter("drDataResourceTypeId");
    if (UtilValidate.isNotEmpty(dataResourceTypeId)) {
        cacheEntityName += "_" + dataResourceTypeId;
        if (cacheEntityName.indexOf("ELECTRONIC_TEXT") >= 0) {
            mimeTypeId = request.getParameter("drMimeTypeId");
            if (UtilValidate.isNotEmpty(mimeTypeId)) {
                cacheEntityName += "_" + mimeTypeId;
            }
        }
    }
}
//Debug.logInfo("cacheEntityName:" + cacheEntityName, "");

lifoSet = (LifoSet)lookupCaches.get(cacheEntityName);
//org.ofbiz.base.util.Debug.logInfo("lifoSet:" + lifoSet, "");
if (lifoSet == null) {
    lifoSet = new LifoSet(10);
    lookupCaches.put(cacheEntityName, lifoSet);
}

LinkedList mruList = new LinkedList();
int sz = lifoSet.keyLRUList.size();
GenericValue gv = null;
GenericPK pk = null;
GenericPK pk2 = null;
Object contentIdKey = null;

iter = lifoSet.iterator();
while (iter.hasNext()) {
    pk0 = iter.next();
    pk = pk0.getPrimaryKey();
    gv = delegator.findByPrimaryKeyCache(pk); 
    if (gv != null) {
        mruList.add(gv);
    }
}

String formDefFile = page.getProperty("formDefFile");
String mruFormName = page.getProperty("mruFormName");

HtmlFormWrapper mruWrapper = new HtmlFormWrapper(formDefFile, mruFormName, request, response);
mruWrapper.putInContext("mruList", mruList);
//Debug.logInfo("mruList:" + mruList, "");

context.put("mruWrapper", mruWrapper);
