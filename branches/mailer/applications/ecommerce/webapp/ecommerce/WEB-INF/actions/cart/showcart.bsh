/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.product.catalog.CatalogWorker;
import org.ofbiz.order.shoppingcart.product.ProductDisplayWorker;
import org.ofbiz.order.shoppingcart.ShoppingCartEvents;
import org.ofbiz.entity.condition.*;

delegator = request.getAttribute("delegator");
userLogin = session.getAttribute("userLogin");

// Get the Cart and Prepare Size
shoppingCart = ShoppingCartEvents.getCartObject(request);
if (shoppingCart != null) {
    context.put("shoppingCartSize", shoppingCart.size());
} else {
    context.put("shoppingCartSize", 0);
}
context.put("shoppingCart", shoppingCart);

if (request.getAttribute("add_product_id") != "") { // check if a parameter is apssed
	add_product_id = request.getParameter("add_product_id");
	product = delegator.findByPrimaryKeyCache("Product",UtilMisc.toMap("productId",add_product_id));
	context.put("product",product);
}

// get all the possible gift wrap options
allgiftWraps = delegator.findByAnd("ProductFeature", UtilMisc.toMap("productFeatureTypeId", "GIFT_WRAP"), UtilMisc.toList("defaultSequenceNum"));
context.put("allgiftWraps", allgiftWraps);

// get the shopping lists for the logged in user
if (userLogin != null) {
    exprList = UtilMisc.toList(new EntityExpr("partyId", EntityOperator.EQUALS, userLogin.getString("partyId")),
        new EntityExpr("listName", EntityOperator.NOT_EQUAL, "auto-save"));
    condition = new EntityConditionList(exprList, EntityOperator.AND);
    allShoppingLists = delegator.findByCondition("ShoppingList", condition, null, UtilMisc.toList("listName"));
    context.put("shoppingLists", allShoppingLists);
}

// Get Cart Associated Products Data
associatedProducts = ProductDisplayWorker.getRandomCartProductAssoc(request, true);
context.put("associatedProducts", associatedProducts);

context.put("contentPathPrefix", CatalogWorker.getContentPathPrefix(request));
