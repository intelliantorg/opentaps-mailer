/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.HashMap;
import org.ofbiz.party.contact.ContactMechWorker;
import org.ofbiz.base.util.UtilHttp;
import org.ofbiz.base.util.UtilMisc;

userLogin = session.getAttribute("userLogin");
security = request.getAttribute("security");
delegator = request.getAttribute("delegator");

/* puts the following in the context: "contactMech", "contactMechId", 
        "partyContactMech", "partyContactMechPurposes", "contactMechTypeId", 
        "contactMechType", "purposeTypes", "postalAddress", "telecomNumber", 
        "requestName", "donePage", "tryEntity", "contactMechTypes"
 */
target = new HashMap();
ContactMechWorker.getContactMechAndRelated(request, userLogin.getString("partyId"), target);
targetIter = target.keySet().iterator();
while (targetIter.hasNext()) {
    key = targetIter.next();
    context.put(key, target.get(key));
}


if (!security.hasEntityPermission("PARTYMGR", "_VIEW", session) && context.get("partyContactMech") == null && context.get("contactMech") != null) {
    context.put("canNotView", true);
} else {
    context.put("canNotView", false);
}

preContactMechTypeId = request.getParameter("preContactMechTypeId");
if (preContactMechTypeId == null) preContactMechTypeId = request.getAttribute("preContactMechTypeId");
if (preContactMechTypeId != null) context.put("preContactMechTypeId", preContactMechTypeId);

paymentMethodId = request.getParameter("paymentMethodId");
if (paymentMethodId == null) paymentMethodId = request.getAttribute("paymentMethodId");
if (paymentMethodId != null) context.put("paymentMethodId", paymentMethodId);

cmNewPurposeTypeId = request.getParameter("contactMechPurposeTypeId");
if (cmNewPurposeTypeId == null) cmNewPurposeTypeId = request.getAttribute("contactMechPurposeTypeId");
if (cmNewPurposeTypeId != null) {
    contactMechPurposeType = delegator.findByPrimaryKey("ContactMechPurposeType", UtilMisc.toMap("contactMechPurposeTypeId", cmNewPurposeTypeId));
    if (contactMechPurposeType != null) {
        context.put("contactMechPurposeType", contactMechPurposeType);
    } else {
        cmNewPurposeTypeId = null;
    }
    context.put("cmNewPurposeTypeId", cmNewPurposeTypeId);
}

tryEntity = context.get("tryEntity");

contactMechData = context.get("contactMech");
if (!tryEntity.booleanValue()) contactMechData = parameters;
if (contactMechData == null) contactMechData = new HashMap();
if (contactMechData != null) context.put("contactMechData", contactMechData);

partyContactMechData = context.get("partyContactMech");
if (!tryEntity.booleanValue()) partyContactMechData = parameters; 
if (partyContactMechData == null) partyContactMechData = new HashMap();
if (partyContactMechData != null) context.put("partyContactMechData", partyContactMechData);

postalAddressData = context.get("postalAddress");
if (!tryEntity.booleanValue()) postalAddressData = parameters; 
if (postalAddressData == null) postalAddressData = new HashMap();
if (postalAddressData != null) context.put("postalAddressData", postalAddressData);

telecomNumberData = context.get("telecomNumber");
if (!tryEntity.booleanValue()) telecomNumberData = parameters; 
if (telecomNumberData == null) telecomNumberData = new HashMap();
if (telecomNumberData != null) context.put("telecomNumberData", telecomNumberData);

// load the geo names for selected countries and states/regions
if ( request.getParameter( "countryGeoId" ) != null ) {
	geoValue = delegator.findByPrimaryKeyCache( "Geo", UtilMisc.toMap("geoId", request.getParameter("countryGeoId")));
	if ( geoValue != null )
		context.put("selectedCountryName", geoValue.get("geoName") );
} else if ( postalAddressData != null && postalAddressData.get("countryGeoId") != null ) {
	geoValue = delegator.findByPrimaryKeyCache( "Geo", UtilMisc.toMap("geoId", postalAddressData.get("countryGeoId")));
	if ( geoValue != null )
		context.put("selectedCountryName", geoValue.get("geoName") );
}

if ( request.getParameter( "stateProvinceGeoId" ) != null ) {
	geoValue = delegator.findByPrimaryKeyCache( "Geo", UtilMisc.toMap("geoId", request.getParameter("stateProvinceGeoId")));
	if ( geoValue != null )
		context.put("selectedStateName", geoValue.get("geoName") );
} else if ( postalAddressData != null && postalAddressData.get("stateProvinceGeoId") != null ) {
	geoValue = delegator.findByPrimaryKeyCache( "Geo", UtilMisc.toMap("geoId", postalAddressData.get("stateProvinceGeoId")));
	if ( geoValue != null )
		context.put("selectedStateName", geoValue.get("geoName") );
}


