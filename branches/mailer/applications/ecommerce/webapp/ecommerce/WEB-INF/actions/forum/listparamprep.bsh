/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.security.*;
import org.ofbiz.service.*;
import org.ofbiz.entity.model.*;
import org.ofbiz.widget.html.*;
import org.ofbiz.widget.form.*;
import org.ofbiz.content.ContentManagementWorker;
import org.ofbiz.securityext.login.*;
import org.ofbiz.common.*;
import javax.servlet.*;
import javax.servlet.http.*;

String getParamOrProp(Map params, String propName, String dflt) {
    String val = ContentManagementWorker.getFromSomewhere(propName, params, request, context);
    if (UtilValidate.isEmpty(val)) {
        val = page.get(propName);
    }
    if (UtilValidate.isEmpty(val)) {
        if (dflt == null) dflt = "";
        val = dflt;
    }
    return val;
}
    
paramMap = UtilHttp.getParameterMap(request);
contentId = getParamOrProp(paramMap, "contentId", null);
followWhen = getParamOrProp(paramMap, "followWhen", null);
pickWhen = getParamOrProp(paramMap, "pickWhen", null);
returnBeforePickWhen = getParamOrProp(paramMap, "returnBeforePickWhen", null);
returnAfterPickWhen = getParamOrProp(paramMap, "returnAfterPickWhen", null);

fromDate = getParamOrProp(paramMap, "fromDate", null);
listName = getParamOrProp(paramMap, "listName", null);
listSize = getParamOrProp(paramMap, "listSize", null);
highIndex = getParamOrProp(paramMap, "highIndex", null);
lowIndex = getParamOrProp(paramMap, "lowIndex", null);
viewSize = getParamOrProp(paramMap, "viewSize", "10");
//Debug.logInfo("in bloglistprep, paramMap:" + paramMap, "");
//Debug.logInfo("in bloglistprep, viewSize:" + viewSize, "");

viewIndex = getParamOrProp(paramMap, "viewIndex", "0");
//Debug.logInfo("in bloglistprep, viewIndex:" + viewIndex, "");

queryString = getParamOrProp(paramMap, "queryString", null);
entityName = getParamOrProp(paramMap, "entityName", null);
//Debug.logInfo("in bloglistprep, contentId:" + contentId, "");

//context.put("contentId", contentId);
context.put("contentId", null);
context.put("followWhen", followWhen);
context.put("pickWhen", pickWhen);
context.put("returnBeforePickWhen", returnBeforePickWhen);
context.put("returnAfterPickWhen", returnAfterPickWhen);
context.put("fromDate", fromDate);
context.put("listName", listName);
context.put("listSize", listSize);
context.put("highIndex", highIndex);
context.put("lowIndex", lowIndex);
context.put("viewSize", viewSize);
context.put("viewIndex", viewIndex);
context.put("queryString", queryString);
context.put("entityName", entityName);
