/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.transaction.*;

module = "showvisits.bsh";

partyId = parameters.get("partyId");
context.put("partyId", partyId);

showAll = parameters.get("showAll");
if (showAll == null) showAll = "false";
context.put("showAll", showAll);

sort = parameters.get("sort");
context.put("sort", sort);

visitListIt = null;          
sortList = UtilMisc.toList("-fromDate");
if (sort != null) sortList.add(0, sort);
    
boolean beganTransaction = false;
try {
    beganTransaction = TransactionUtil.begin();

    if (partyId != null) {
        visitListIt = delegator.findListIteratorByCondition("Visit", new EntityExpr("partyId", EntityOperator.EQUALS, partyId), null, null, sortList, new EntityFindOptions(true, EntityFindOptions.TYPE_SCROLL_INSENSITIVE, EntityFindOptions.CONCUR_READ_ONLY, true));    
    } else if (showAll.equalsIgnoreCase("true")) {
        visitListIt = delegator.findListIteratorByCondition("Visit", null, null, null, sortList, new EntityFindOptions(true, EntityFindOptions.TYPE_SCROLL_INSENSITIVE, EntityFindOptions.CONCUR_READ_ONLY, true));
    } else {
        // show active visits       
        visitListIt = delegator.findListIteratorByCondition("Visit", new EntityExpr("thruDate", EntityOperator.EQUALS, null), null, null, sortList, new EntityFindOptions(true, EntityFindOptions.TYPE_SCROLL_INSENSITIVE, EntityFindOptions.CONCUR_READ_ONLY, true));  
    }
    
    viewIndex = 1;
    viewSize = 20;    
    try {
        viewIndex = Integer.valueOf((String) parameters.get("VIEW_INDEX")).intValue();
    } catch (Exception e) {
        viewIndex = 1;
    }
    context.put("viewIndex", viewIndex);
    
    try {
        viewSize = Integer.valueOf((String) parameters.get("VIEW_SIZE")).intValue();
    } catch (Exception e) {
        viewSize = 20;
    }
    context.put("viewSize", viewSize);
     
    // get the indexes for the partial list
    lowIndex = (((viewIndex - 1) * viewSize) + 1);
    highIndex = viewIndex * viewSize;
   
    // get the partial list for this page
    visitList = visitListIt.getPartialList(lowIndex, viewSize);
    if (visitList == null) {
        visitList = new ArrayList();
    }
    
    // attempt to get the full size
    visitListIt.last();
    visitListSize = visitListIt.currentIndex();
    if (highIndex > visitListSize) {
        highIndex = visitListSize;
    }
    context.put("visitSize", visitListSize);
    
    visitListIt.close();
} catch (GenericEntityException e) {
    String errMsg = "Failure in operation, rolling back transaction";
    Debug.logError(e, errMsg, module);
    try {
        // only rollback the transaction if we started one...
        TransactionUtil.rollback(beganTransaction, errMsg, e);
    } catch (GenericEntityException e2) {
        Debug.logError(e2, "Could not rollback transaction: " + e2.toString(), module);
    }
    // after rolling back, rethrow the exception
    throw e;
} finally {
    // only commit the transaction if we started one... this will throw an exception if it fails
    TransactionUtil.commit(beganTransaction);
}

context.put("visitList", visitList);
if (visitList != null) {
    listSize = lowIndex + visitList.size();
}

if (listSize < highIndex) {
    highIndex = listSize;
}
context.put("lowIndex", lowIndex);
context.put("highIndex", highIndex);
context.put("listSize", listSize);
