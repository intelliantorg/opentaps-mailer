/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.util.EntityUtil;
import org.ofbiz.base.util.*;
import org.ofbiz.securityext.login.*;
import org.ofbiz.common.*;

import org.ofbiz.party.contact.*;
import org.ofbiz.party.party.*;
import org.ofbiz.accounting.payment.*;
import org.ofbiz.securityext.login.*;

partyId = parameters.get("party_id");
if (partyId == null) partyId = parameters.get("partyId");
context.put("partyId", partyId);

userLoginId = parameters.get("userlogin_id");
if (UtilValidate.isEmpty(userLoginId)) {
    userLoginId = parameters.get("userLoginId");
}
if (UtilValidate.isEmpty(partyId) && UtilValidate.isNotEmpty(userLoginId)) {
    thisUserLogin = delegator.findByPrimaryKey("UserLogin", UtilMisc.toMap("userLoginId", userLoginId));
    if (thisUserLogin != null) {
        partyId = thisUserLogin.getString("partyId");
        parameters.put("partyId", partyId);
    }
}

content = delegator.findByAnd("PartyContent", UtilMisc.toMap("partyId", partyId));
context.put("partyContent", content);

attributes = delegator.findByAnd("PartyAttribute", UtilMisc.toMap("partyId", partyId));
context.put("attributes", attributes);

userLogins = delegator.findByAnd("UserLogin", UtilMisc.toMap("partyId", partyId));
context.put("userLogins", userLogins);

partyRoles = delegator.findByAnd("RoleTypeAndParty", UtilMisc.toMap("partyId", partyId));
context.put("partyRoles", partyRoles);

partyNameHistoryList = delegator.findByAnd("PartyNameHistory", UtilMisc.toMap("partyId", partyId), UtilMisc.toList("-changeDate"));
context.put("partyNameHistoryList", partyNameHistoryList);

custRole = delegator.findByPrimaryKey("PartyRole", UtilMisc.toMap("partyId", partyId, "roleTypeId", "CUSTOMER"));
if (custRole != null) {
    context.put("isCustomer", custRole);
}

roles = delegator.findAll("RoleType", UtilMisc.toList("description", "roleTypeId"));
context.put("roles", roles);

mimeTypes = delegator.findAll("MimeType", UtilMisc.toList("description", "mimeTypeId"));
context.put("mimeTypes", mimeTypes);

relateTypes = delegator.findAll("PartyRelationshipType", UtilMisc.toList("description", "partyRelationshipTypeId"));
context.put("relateTypes", relateTypes);

savedCartList = EntityUtil.getFirst(delegator.findByAnd("ShoppingList",UtilMisc.toMap("partyId", partyId, "shoppingListTypeId","SLT_SPEC_PURP", "listName", "auto-save")));

if (savedCartList != null){
      savedCartListId = savedCartList.getString("shoppingListId");
      context.put("savedCartListId", savedCartListId);
      savedCartItems = savedCartList.getRelated("ShoppingListItem");
      context.put("savedCartItems", savedCartItems);
}

notes = delegator.findByAnd("PartyNoteView", UtilMisc.toMap("targetPartyId", partyId), UtilMisc.toList("-noteDateTime"));
context.put("notes", notes);

GenericValue avsOverride = delegator.findByPrimaryKey("PartyIcsAvsOverride", UtilMisc.toMap("partyId", partyId));
context.put("avsOverride", avsOverride);
    
visits = delegator.findByAnd("Visit", UtilMisc.toMap("partyId", partyId), UtilMisc.toList("-fromDate"));
context.put("visits", visits);

otherValues = PartyWorker.getPartyOtherValues(request, partyId, "party", "lookupPerson", "lookupGroup");
context.put("party", otherValues.get("party"));
context.put("lookupPerson", otherValues.get("lookupPerson"));
context.put("lookupGroup", otherValues.get("lookupGroup"));

boolean showOld = "true".equals(parameters.get("SHOW_OLD"));
context.put("showOld", new Boolean(showOld));

List partyContactMechValueMaps = ContactMechWorker.getPartyContactMechValueMaps(delegator, partyId, showOld);
context.put("contactMeches", partyContactMechValueMaps);

List paymentMethodValueMaps = PaymentWorker.getPartyPaymentMethodValueMaps(delegator, partyId, showOld);
context.put("paymentMethodValueMaps", paymentMethodValueMaps);
 
context.put("nowStr", UtilDateTime.nowTimestamp().toString());

context.put("custRequestTypes", delegator.findAllCache("CustRequestType"));

// content purposes
contentPurposes = delegator.findByAnd("Enumeration", UtilMisc.toMap("enumTypeId", "PTYCNT_PRP"), UtilMisc.toList("sequenceId"));
context.put("contentPurposes", contentPurposes);

// call the getOrderedSummaryInformation service to get the sub-total of valid orders in last X months
/* this is being commented out because 1) it supplies loyalty points data which is commented out in viewprofile.ftl and 2) it will crash unless user has ORDERMGR_VIEW permission 
if (partyId != null) {
    monthsToInclude = new Integer(12);
    Map serviceIn = UtilMisc.toMap("partyId", partyId, "roleTypeId", "PLACING_CUSTOMER", "orderTypeId", "SALES_ORDER", "statusId", "ORDER_COMPLETED", "monthsToInclude", monthsToInclude, "userLogin", userLogin);
    Map result = dispatcher.runSync("getOrderedSummaryInformation", serviceIn);
    context.put("monthsToInclude", monthsToInclude);
    context.put("totalSubRemainingAmount", result.get("totalSubRemainingAmount"));
    context.put("totalOrders", result.get("totalOrders"));
}
*/
