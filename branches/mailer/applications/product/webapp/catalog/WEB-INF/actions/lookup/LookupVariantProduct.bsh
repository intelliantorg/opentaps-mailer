/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.*;
import org.ofbiz.base.util.*;

delegator = request.getAttribute("delegator");
dispatcher = request.getAttribute("dispatcher");
security = request.getAttribute("security");

productId = request.getParameter("productId");
productVariantId = productId + "_";
productFeatureIds = "";
product = delegator.findByPrimaryKey("Product", UtilMisc.toMap("productId", productId));

result = dispatcher.runSync("getProductFeaturesByType", UtilMisc.toMap("productId", productId, "productFeatureApplTypeId", "SELECTABLE_FEATURE"));
featureTypes = result.get("productFeatureTypes");
featuresByTypes = result.get("productFeaturesByType");
searchFeatures = new ArrayList();
selectedFeatureTypeValues = new ArrayList();
for (int i = 0; i < featureTypes.size(); i++) {
    featureType = featureTypes.get(i);
    featuresByType = featuresByTypes.get(featureType);
    featureTypeAndValues = UtilMisc.toMap("featureType", featureType, "features", featuresByType);
    searchFeatures.add(featureTypeAndValues);
    //
    selectedFeatureTypeValue = request.getParameter(featureType);
    if (selectedFeatureTypeValue != null && selectedFeatureTypeValue.length() > 0) {
        featureTypeAndValues.put("selectedFeatureId", selectedFeatureTypeValue);
        selectedFeatureTypeValues.add(selectedFeatureTypeValue);
        feature = delegator.findByPrimaryKey("ProductFeature", UtilMisc.toMap("productFeatureId", selectedFeatureTypeValue));
        productVariantId += (feature.getString("idCode") != null? feature.getString("idCode"): "");
        productFeatureIds += "|" + selectedFeatureTypeValue;
    }
}

variants = new ArrayList();
//if (selectedFeatureTypeValues.size() > 0) {
    result = dispatcher.runSync("getAllExistingVariants", UtilMisc.toMap("productId", productId, "productFeatureAppls", selectedFeatureTypeValues));
    variants = result.get("variantProductIds");
//}

// Quick Add Variant
productFeatureIdsPar = request.getParameter("productFeatureIds");
productVariantIdPar = request.getParameter("productVariantId");
if (productVariantIdPar != null && productFeatureIdsPar != null) {
    result = dispatcher.runSync("quickAddVariant", UtilMisc.toMap("productId", productId, "productFeatureIds", productFeatureIdsPar, "productVariantId", productVariantIdPar));
}

context.put("product", product);
context.put("searchFeatures", searchFeatures);
context.put("variants", variants);

// also need the variant products themselves
variantProducts = new ArrayList();
iter = variants.iterator();
while (iter.hasNext()) {
    variantId = iter.next();
    variantProducts.add(delegator.findByPrimaryKeyCache("Product", UtilMisc.toMap("productId", variantId)));
}
context.put("variantProducts", variantProducts);

if(security.hasEntityPermission("CATALOG", "_CREATE", session)) {
    if (selectedFeatureTypeValues.size() == featureTypes.size() && variants.size() == 0) {
        context.put("productFeatureIds", productFeatureIds);
        context.put("productVariantId", productVariantId);
    }
}
