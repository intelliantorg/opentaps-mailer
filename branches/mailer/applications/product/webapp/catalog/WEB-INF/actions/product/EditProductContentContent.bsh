/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.*;
import java.io.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.base.util.*;
import org.ofbiz.widget.html.*;
import javax.servlet.HttpServletRequest;

contentId = request.getParameter("contentId");
if("".equals(contentId)) contentId = null;

productContentTypeId = request.getParameter("productContentTypeId");
fromDate = request.getParameter("fromDate");
if("".equals(fromDate)) fromDate = null;

description = request.getParameter("description");
if("".equals(description)) description = null;

productContent = delegator.findByPrimaryKey("ProductContent", UtilMisc.toMap("contentId", contentId, "productId", productId, "productContentTypeId", productContentTypeId, "fromDate", fromDate));
if(productContent == null) {
    productContent = new HashMap();
    productContent.put("productId", productId);
    productContent.put("contentId", contentId);
    productContent.put("productContentTypeId", productContentTypeId);
    productContent.put("fromDate", fromDate);
    productContent.put("thruDate", request.getParameter("thruDate"));
    productContent.put("purchaseFromDate", request.getParameter("purchaseFromDate"));
    productContent.put("purchaseThruDate", request.getParameter("purchaseThruDate"));
    productContent.put("useCountLimit", request.getParameter("useCountLimit"));
    productContent.put("useTime", request.getParameter("useTime"));
    productContent.put("useTimeUomId", request.getParameter("useTimeUomId"));
    productContent.put("useRoleTypeId", request.getParameter("useRoleTypeId"));
}
context.put("productContent", productContent);

productContentData = new HashMap();
productContentData.putAll(productContent);

Map content = null;
context.put("contentId", contentId);
if(contentId != null) {
    content = delegator.findByPrimaryKey("Content", UtilMisc.toMap("contentId", contentId));
    context.put("content", content);
} else {
    content = new HashMap();
    if(description != null) content.put("description", description);
}

//Email
if ("FULFILLMENT_EMAIL".equals(productContentTypeId)) {
    emailData = new HashMap();
    if (contentId != null && content != null) {
        subjectDr = content.getRelatedOne("DataResource");
        if (subjectDr != null) {
            subject = subjectDr.getRelatedOne("ElectronicText");
            emailData.put("subject", subject.get("textData"));
            emailData.put("subjectDataResourceId", subject.get("dataResourceId"));
        }
        serviceCtx = UtilMisc.toMap("userLogin", userLogin, "contentId", contentId, "mapKeys", UtilMisc.toList("plainBody", "htmlBody"));
        result = dispatcher.runSync("findAssocContent", serviceCtx);
        contentAssocs = result.get("contentAssocs");
        if (contentAssocs != null) {
            for (java.util.Iterator iterator = contentAssocs.iterator(); iterator.hasNext(); ) {
                contentAssoc  = iterator.next();
                bodyContent = contentAssoc.getRelatedOne("ToContent");
                bodyDr = bodyContent.getRelatedOne("DataResource");
                body = bodyDr.getRelatedOne("ElectronicText");
                emailData.put(contentAssoc.get("mapKey"), body.get("textData"));
                emailData.put(contentAssoc.get("mapKey")+"DataResourceId", body.get("dataResourceId"));
            }
        }
    }

    context.put("contentFormName", "EditProductContentEmail");
    context.put("emailData", emailData);
} else if ("DIGITAL_DOWNLOAD".equals(productContentTypeId)) {
    downloadData = new HashMap();
    if (contentId != null && content != null) {
        downloadDr = content.getRelatedOne("DataResource");
        if (subjectDr != null) {
            download = downloadDr.getRelatedOne("OtherDataResource");
            if (download != null) {
                downloadData.put("file", download.get("dataResourceContent"));
                downloadData.put("fileDataResourceId", download.get("dataResourceId"));
            }
        }
    }
    context.put("contentFormName", "EditProductContentDownload");
    context.put("downloadData", downloadData);
} else if ("FULFILLMENT_EXTERNAL".equals(productContentTypeId)) {
    context.put("contentFormName", "EditProductContentExternal");
} else {
    //Assume it is a generic simple text content
    textData = new HashMap();
    if (contentId != null && content != null) {
        textDr = content.getRelatedOne("DataResource");
        if (textDr != null) {
            text = textDr.getRelatedOne("ElectronicText");
            textData.put("text", text.get("textData"));
            textData.put("textDataResourceId", text.get("dataResourceId"));
        }
    }
    context.put("contentFormName", "EditProductContentSimpleText");
    context.put("textData", textData);
}

context.put("productContentData", productContentData);
context.put("content", content);
context.put("contentId", contentId);
