/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;

requestParams = UtilHttp.getParameterMap(request);
delegator = request.getAttribute("delegator");
billingAccountId = requestParams.get("billingAccountId");
if (billingAccountId == null)
    billingAccountId = request.getAttribute("billingAccountId");
if (billingAccountId != null) {
    billingAccount = delegator.findByPrimaryKey("BillingAccount", UtilMisc.toMap("billingAccountId", billingAccountId));
    context.put("billingAccount", billingAccount);
}

billingAccountTermId = requestParams.get("billingAccountTermId");
if (billingAccountTermId != null) {
    billingAccountTerm = delegator.findByPrimaryKey("BillingAccountTerm", UtilMisc.toMap("billingAccountTermId", billingAccountTermId));
    context.put("billingAccountTerm", billingAccountTerm);
}

tryEntity = true;
errorMessage = request.getAttribute("_ERROR_MESSAGE_");
if (errorMessage != null && errorMessage.length() > 0) {
    tryEntity = false;    
}

termData = context.get("billingAccountTerm");
if (!tryEntity) termData = requestParams;
if (termData == null) termData = new HashMap();
context.put("termData", termData);

billingAccountTerms = delegator.findByAnd("BillingAccountTerm", UtilMisc.toMap("billingAccountId", billingAccountId));
context.put("billingAccountTerms", billingAccountTerms);

termTypes = delegator.findByAnd("TermType", UtilMisc.toMap("parentTypeId", "FINANCIAL_TERM"), UtilMisc.toList("description"));
context.put("termTypes", termTypes);

uom = delegator.findAll("Uom", UtilMisc.toList("description"));
context.put("uoms", uom);

