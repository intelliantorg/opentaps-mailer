/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.base.util.collections.*;
import org.ofbiz.accounting.invoice.*;
import org.ofbiz.accounting.util.UtilAccounting;
import java.text.DateFormat;
import java.math.*;
 
int decimals = UtilNumber.getBigDecimalScale("invoice.decimals");
int rounding = UtilNumber.getBigDecimalRoundingMode("invoice.rounding");
 
// find existing items
invoiceItemsDb = null;
List invoiceItems = new LinkedList();
BigDecimal invoiceAmount = new BigDecimal("0.00");
BigDecimal total = new BigDecimal("0.00");
BigDecimal quantity = new BigDecimal("0.00");
if ((invoiceId != null) && (invoice != null)) {    
    invoiceItemsDb = invoice.getRelated("InvoiceItem", UtilMisc.toList("invoiceItemSeqId"));
    if (invoiceItemsDb != null && invoiceItemsDb.size() > 0) {
        // create totals
        Iterator i = invoiceItemsDb.iterator();
        while (i.hasNext())    {
            item = i.next();
            if (item.get("quantity") == null || item.getDouble("quantity").doubleValue() == 0.00) {
               quantity = new BigDecimal("1.00");    
            } else {
                quantity = item.getBigDecimal("quantity");
            }
            if (item.get("amount")!= null) {
                total = item.getBigDecimal("amount").multiply(quantity).setScale(decimals,rounding);
            } else {
                total = new BigDecimal("0.00");
            }
            invoiceAmount = invoiceAmount.add(total);
            Map itemmap = new HashMap();
            itemmap.putAll(item);
            itemmap.put("total",total.toString());
            invoiceItems.add(itemmap);
        }
    }
    context.put("invoiceItems",invoiceItems);
    context.put("invoiceAmount",invoiceAmount);
}
