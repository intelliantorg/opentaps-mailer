/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */

import org.ofbiz.order.order.OrderReadHelper;
import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.entity.condition.EntityExpr;
import org.ofbiz.entity.condition.EntityOperator;
import org.ofbiz.entity.util.EntityUtil;

orderId = context.get("orderId");
orderPaymentPreferenceId = context.get("orderPaymentPreferenceId");

if ((orderId == null) || (orderPaymentPreferenceId == null)) return;

if(orderId != null){
   orderHeader = delegator.findByPrimaryKey("OrderHeader", UtilMisc.toMap("orderId", orderId));
   context.put("orderHeader", orderHeader);
}

if(orderPaymentPreferenceId != null){
   orderPaymentPreference = delegator.findByPrimaryKey("OrderPaymentPreference", UtilMisc.toMap("orderPaymentPreferenceId", orderPaymentPreferenceId));
   context.put("orderPaymentPreference", orderPaymentPreference);
}

if(orderPaymentPreference != null){
   paymentMethodType = orderPaymentPreference.getRelatedOneCache("PaymentMethodType");
   context.put("paymentMethodType", paymentMethodType);
}

if (orderPaymentPrefrence != null) {
    context.put("paymentTypeId", "CUSTOMER_PAYMENT");
}

if(orderPaymentPreference != null){
// we retrieve the captureAmount by looking at the latest authorized gateway response for this orderPaymentPreference
gatewayResponses = orderPaymentPreference.getRelated("PaymentGatewayResponse", UtilMisc.toList("transactionDate DESC"));
EntityUtil.filterByCondition(gatewayResponses, new EntityExpr("transCodeEnumId", EntityOperator.EQUALS, "PGT_AUTHORIZE"));

if (gatewayResponses != null && gatewayResponses.size() > 0) {
    latestAuth = gatewayResponses.get(0);
    context.put("captureAmount", latestAuth.getDouble("amount"));
} else {
    // todo: some kind of error telling user to re-authorize
}
}