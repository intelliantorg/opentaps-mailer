<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->

<!-- This file has been modified by Open Source Strategies, Inc. -->


<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
        xsi:noNamespaceSchemaLocation="http://www.ofbiz.org/dtds/simple-methods.xsd">
    <!-- ========= AcctgTrans methods ========= -->
    <simple-method method-name="createAcctgTrans" short-description="Create an AcctgTrans">
        <make-value entity-name="AcctgTrans" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <set field="newEntity.isPosted" value="N"/>

        <!-- AcctgTrans uses a sequenced id, so get the next one now and set it... -->        
        <sequenced-id-to-env sequence-name="AcctgTrans" env-name="newEntity.acctgTransId"/>
        <field-to-result field-name="newEntity.acctgTransId" result-name="acctgTransId"/>
        
        <set from-field="userLogin.userLoginId" field="newEntity.lastModifiedByUserLogin"/>
        <set from-field="userLogin.userLoginId" field="newEntity.createdByUserLogin"/>

        <create-value value-name="newEntity"/>
    </simple-method>
    <simple-method method-name="updateAcctgTrans" short-description="Update an AcctgTrans">
        <entity-one entity-name="AcctgTrans" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        
        <set from-field="userLogin.userLoginId" field="lookedUpValue.lastModifiedByUserLogin"/>
        
        <store-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="deleteAcctgTrans" short-description="Delete an AcctgTrans">
        <entity-one entity-name="AcctgTrans" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>
    </simple-method>
    <simple-method method-name="updateAcctgTransLastModified" short-description="Update AcctgTrans LastModified Info">
        <!-- this is just a little method that is meant to be called as an inline call-simple-method target with the context already setup -->
        <entity-one entity-name="AcctgTrans" value-name="lookedUpACTX"/>
        <set from-field="userLogin.userLoginId" field="lookedUpACTX.lastModifiedByUserLogin"/>
        <store-value value-name="lookedUpACTX"/>
    </simple-method>
    
    <!-- ========= AcctgTransEntry methods ========= -->
    <simple-method method-name="createAcctgTransEntry" short-description="Add Entry To AcctgTrans">
        <make-value entity-name="AcctgTransEntry" value-name="newEntity"/>
        <set-nonpk-fields map-name="parameters" value-name="newEntity"/>
        <set-pk-fields map-name="parameters" value-name="newEntity"/>
        <make-next-seq-id value-name="newEntity" seq-field-name="acctgTransEntrySeqId" numeric-padding="5"/>
        <field-to-result field-name="newEntity.acctgTransEntrySeqId" result-name="acctgTransEntrySeqId"/>

        <!-- if not explicitly provided in the parameters, set the currency of the entry from PartyAcctgPreference -->
        <if-empty field-name="parameters.currencyUomId">
            <entity-one entity-name="PartyAcctgPreference" value-name="partyAcctgPreference" use-cache="true">
                <field-map env-name="parameters.organizationPartyId" field-name="partyId"/>
            </entity-one>
            <set from-field="partyAcctgPreference.baseCurrencyUomId" field="newEntity.currencyUomId"/>
        </if-empty>

        <!-- by default, set the reconciled status of this new entry to not reconciled -->
        <set value="AES_NOT_RECONCILED" field="newEntity.reconcileStatusId"/>
        <create-value value-name="newEntity"/>

        <!-- when changing entries, also update the last modified info for the AcctgTrans -->
        <!-- call-simple-method method-name="updateAcctgTransLastModified"/ -->
    </simple-method>
    <simple-method method-name="updateAcctgTransEntry" short-description="Update Entry To AcctgTrans">
        <entity-one entity-name="AcctgTransEntry" value-name="lookedUpValue"/>
        <set-nonpk-fields map-name="parameters" value-name="lookedUpValue"/>
        <store-value value-name="lookedUpValue"/>

        <!-- when changing entries, also update the last modified info for the AcctgTrans -->
        <call-simple-method method-name="updateAcctgTransLastModified"/>
    </simple-method>
    <simple-method method-name="deleteAcctgTransEntry" short-description="Remove Entry From AcctgTrans">
        <entity-one entity-name="AcctgTransEntry" value-name="lookedUpValue"/>
        <remove-value value-name="lookedUpValue"/>

        <!-- when changing entries, also update the last modified info for the AcctgTrans -->
        <call-simple-method method-name="updateAcctgTransLastModified"/>
    </simple-method>

    <!-- AcctgTrans Trial Balance and Post routines -->
    <simple-method method-name="calculateAcctgTransTrialBalance" short-description="Calculate Trial Balance for a AcctgTrans">
        <check-permission permission="ACCOUNTING" action="_ATX_CREATE"><fail-message message="Security Error: to run calculateAcctgTransTrialBalance you must have the ACCOUNTING_ATX_CREATE or ACCOUNTING_ADMIN permission"/></check-permission>
        <check-errors/>
       
        <property-to-field resource="arithmetic" property="ledger.decimals" field-name="ledgerDecimals"/>
        <property-to-field resource="arithmetic" property="ledger.rounding" field-name="roundingMode"/>
 
        <log level="info" message="Using ledger decimals [${ledgerDecimals}] and rounding [${roundingMode}]"/>

        <!-- get all AcctgTransEntry for this trans, for each if debit add to debits total if credit add to credits total -->
        <entity-condition entity-name="AcctgTransEntry" list-name="acctgTransEntryList">
            <condition-expr field-name="acctgTransId" env-name="parameters.acctgTransId"/>
            <order-by field-name="acctgTransEntrySeqId"/>
        </entity-condition>
        <calculate field-name="debitTotal" type="BigDecimal"><number value="0"/></calculate>
        <calculate field-name="creditTotal" type="BigDecimal"><number value="0"/></calculate>
        <iterate entry-name="acctgTransEntry" list-name="acctgTransEntryList">
            <if-compare field-name="debitCreditFlag" map-name="acctgTransEntry" operator="equals" value="D">
               <calculate field-name="debitTotal" type="BigDecimal" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                        <calcop operator="add">
                            <calcop operator="get" field-name="debitTotal"/>
                            <calcop operator="get" field-name="acctgTransEntry.amount"/>
                        </calcop>
               </calculate>
            <else>
                <if-compare field-name="debitCreditFlag" map-name="acctgTransEntry" operator="equals" value="C">
                    <calculate field-name="creditTotal" type="BigDecimal" decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
                        <calcop operator="add">
                            <calcop operator="get" field-name="creditTotal"/>
                            <calcop operator="get" field-name="acctgTransEntry.amount"/>
                        </calcop>
                    </calculate>
                <else>
                    <!-- uh-oh, bad debitCreditFlag... -->
                      <add-error><fail-message message="Bad debitCreditFlag [${acctgTransEntry.debitCreditFlag}] (was not D or C) in Accounting Transaction Entry with acctgTransId=[${acctgTransEntry.acctgTransId}] and acctgTransEntrySeqId=[${acctgTransEntry.acctgTransEntrySeqId}]"/></add-error>
                </else>
                </if-compare>                
            </else>
            </if-compare>
        </iterate>
        
        <!-- check-errors just in case we had some bad debitCreditFlags -->
        <check-errors/>
        
        <!-- should now have the debitTotal and creditTotal, calculate the debitCreditDifference -->
        <calculate field-name="debitCreditDifference" type="BigDecimal"  decimal-scale="${ledgerDecimals}" rounding-mode="${roundingMode}">
            <calcop operator="add">
                <calcop operator="get" field-name="debitTotal"/>
                <calcop operator="negative" field-name="creditTotal"/>
            </calcop>
        </calculate>
        
        <field-to-result field-name="debitTotal"/>
        <field-to-result field-name="creditTotal"/>
        <field-to-result field-name="debitCreditDifference"/>
    </simple-method>
    <simple-method method-name="postAcctgTrans" short-description="Post a AcctgTrans">
        <!-- make sure the AcctgTrans has not already been posted -->
        <entity-one entity-name="AcctgTrans" value-name="acctgTrans" auto-field-map="true"/>
        <if-compare field-name="acctgTrans.isPosted" operator="equals" value="Y">
            <add-error><fail-message message="AcctgTrans [${parameters.acctgTransId}] has already been posted.  Not posting again"/></add-error>
        </if-compare>
        <check-errors/>

        <!-- check trial balance -->
        <set from-field="parameters.acctgTransId" field="trialBalanceCallMap.acctgTransId"/>
        <call-service service-name="calculateAcctgTransTrialBalance" in-map-name="trialBalanceCallMap">
            <results-to-map map-name="trialBalanceResultMap"/>
        </call-service>
        <if-compare field-name="trialBalanceResultMap.debitCreditDifference" operator="greater-equals" value="0.01" type="Double">
            <add-error><fail-message message="Not posting GL Accounting Transaction with ID [${parameters.acctgTransId}] because the trial balance failed: Debit Total=${trialBalanceResultMap.debitTotal} Credit Total=${trialBalanceResultMap.creditTotal} Debit/Credit Difference=${trialBalanceResultMap.debitCreditDifference}"/></add-error>
        </if-compare>
        <if-compare field-name="trialBalanceResultMap.debitCreditDifference" operator="less-equals" value="-0.01" type="Double">
            <add-error><fail-message message="Not posting GL Accounting Transaction with ID [${parameters.acctgTransId}] because the trial balance failed: Debit Total=${trialBalanceResultMap.debitTotal} Credit Total=${trialBalanceResultMap.creditTotal} Debit/Credit Difference=${trialBalanceResultMap.debitCreditDifference}"/></add-error>
        </if-compare>
        <check-errors/>
            
        <entity-condition entity-name="AcctgTransEntry" list-name="acctgTransEntryList">
            <condition-expr field-name="acctgTransId" env-name="parameters.acctgTransId"/>
            <order-by field-name="acctgTransEntrySeqId"/>
        </entity-condition>
        
        <!-- check the scheduled posting date, but only if it's set -->
        <if-not-empty field-name="acctgTrans.scheduledPostingDate">
            <set field="scheduledPostingDate" from-field="acctgTrans.scheduledPostingDate"/>
            <set field="beforeScheduled" value="${bsh: org.ofbiz.base.util.UtilDateTime.nowTimestamp().before(scheduledPostingDate)}"/>
            <if-compare field-name="beforeScheduled" operator="equals" value="true" type="Boolean">
                <add-error><fail-message message="Not posting GL Accounting Transaction with ID [${parameters.acctgTransId}] because it's not scheduled to be posted yet.  The scheduled posting date is [${acctgTrans.scheduledPostingDate}]"/></add-error>
            </if-compare>
        </if-not-empty>

        <!-- setup periodTypeIdList to use for CustomTimePeriod support -->
        <set value="FISCAL_YEAR" field="onlyIncludePeriodTypeIdList[]"/>
        <set value="FISCAL_QUARTER" field="onlyIncludePeriodTypeIdList[]"/>
        <set value="FISCAL_MONTH" field="onlyIncludePeriodTypeIdList[]"/>
        <set value="FISCAL_WEEK" field="onlyIncludePeriodTypeIdList[]"/>
        <set value="FISCAL_BIWEEK" field="onlyIncludePeriodTypeIdList[]"/>
        
        <!-- get current period(s) and check if closed -->
        <iterate entry-name="acctgTransEntry" list-name="acctgTransEntryList">
            <!-- we want to do this for each organizationPartyId, so only do this if we haven't already found the list for the current org -->
            <if-empty field-name="customTimePeriodListByOrganizationPartyIdMap.${acctgTransEntry.organizationPartyId}">
                <clear-field field-name="findCustomTimePeriodCallMap"/>
                <clear-field field-name="customTimePeriodList"/>
    
                <set from-field="acctgTrans.transactionDate" field="findCustomTimePeriodCallMap.findDate"/>
                <set from-field="acctgTransEntry.organizationPartyId" field="findCustomTimePeriodCallMap.organizationPartyId"/>
                <set from-field="onlyIncludePeriodTypeIdList" field="findCustomTimePeriodCallMap.onlyIncludePeriodTypeIdList"/>
                <!-- should we excludeNoOrganizationPeriods? for now, YES, which means to find a CustomTimePeriod one must be setup at least for the top level Organization Party -->
                <set value="Y" field="findCustomTimePeriodCallMap.excludeNoOrganizationPeriods"/>
                <call-service service-name="findCustomTimePeriods" in-map-name="findCustomTimePeriodCallMap">
                    <result-to-field result-name="customTimePeriodList"/>
                </call-service>
                
                <if-empty field-name="customTimePeriodList">
                    <add-error><fail-message message="Could not find a CustomTimePeriod (fiscal period) for the Transaction Date [${acctgTrans.transactionDate}] (is for Organization Party with ID [${acctgTransEntry.organizationPartyId}])"/></add-error>
                </if-empty>
                <!-- now do the actual isClose check -->
                <iterate entry-name="customTimePeriod" list-name="customTimePeriodList">
                    <if-compare field-name="customTimePeriod.isClosed" operator="equals" value="Y">
                        <add-error><fail-message message="CustomTimePeriod (fiscal period) [${customTimePeriod.customTimePeriodId}] is CLOSED, cannot post to it (is for the Transaction Date [${acctgTrans.transactionDate}] and Organization Party with ID [${acctgTransEntry.organizationPartyId}])"/></add-error>
                    </if-compare>
                </iterate>
                
                <!-- save this customTimePeriodList for the current entry for later use -->
                <set from-field="customTimePeriodList" field="customTimePeriodListByOrganizationPartyIdMap.${acctgTransEntry.organizationPartyId}"/>
            </if-empty>
        </iterate>
        
        <!-- DONE with initial tests/checks, see if we are good to go or not... -->
        <check-errors/>

        <!-- TODO: for each entry: lookup GlAccount, update posted balance -->
        <iterate entry-name="acctgTransEntry" list-name="acctgTransEntryList">
            <!-- Get all data to operate on: GlAccount, GlAccountOrganization, GlAccountHistory -->
            <clear-field field-name="glAccount"/>
            <clear-field field-name="glAccountOrganization"/>
            <clear-field field-name="glAccountHistoryList"/>

            <entity-one entity-name="GlAccount" value-name="glAccount">
                <field-map field-name="glAccountId" env-name="acctgTransEntry.glAccountId"/>
            </entity-one>
            <entity-one entity-name="GlAccountOrganization" value-name="glAccountOrganization">
                <field-map field-name="glAccountId" env-name="acctgTransEntry.glAccountId"/>
                <field-map field-name="organizationPartyId" env-name="acctgTransEntry.organizationPartyId"/>
            </entity-one>

            <!-- update the GlAccount's posted balance.  This depends on whether the GlAccount is a debit or credit account and the
                debitCreditFlag of the acctgTransEntry.  Debits add to debit accounts and subtract from credit accounts.  Credits add to
                credit accounts and subtract from debit accounts -->
            <!-- we do this by first calculating a postingAmount (positive or negative) then adding to the postingBalance -->
            <clear-field field-name="postingAmount"/>
            <!-- use the parent of the GlAccountClass, which should either be DEBIT or CREDIT -->
            <get-related-one relation-name="GlAccountClass" value-name="glAccount" to-value-name="glAccountClass"/>
            <get-related-one relation-name="ParentGlAccountClass" value-name="glAccountClass" to-value-name="parentGlAccountClass"/>
            <!-- test if the account is a DEBIT account -->
            <set field="isDebit" value="${bsh:org.ofbiz.accounting.util.UtilAccounting.isDebitAccount(glAccount)}"/>
            <if-compare field-name="isDebit" operator="equals" value="true">
                    <if-compare field-name="debitCreditFlag" map-name="acctgTransEntry" operator="equals" value="D">
                        <set from-field="acctgTransEntry.amount" field="postingAmount"/>
                        <else>
                            <if-compare field-name="acctgTransEntry.debitCreditFlag" operator="equals" value="C">
                                <calculate field-name="postingAmount" type="BigDecimal">
                                    <calcop field-name="acctgTransEntry.amount" operator="negative"/>
                                </calculate>
                            </if-compare>    
                        </else>
                    </if-compare>
                <else>
                    <!-- otherwise, test if the account is credit -->
                    <set field="isCredit" value="${bsh:org.ofbiz.accounting.util.UtilAccounting.isCreditAccount(glAccount)}"/>
                    <if-compare field-name="isCredit" operator="equals" value="true">
                        <if-compare field-name="acctgTransEntry.debitCreditFlag" operator="equals" value="C">
                            <set from-field="acctgTransEntry.amount" field="postingAmount"/>
                            <else>
                                <if-compare field-name="acctgTransEntry.debitCreditFlag" operator="equals" value="D">
                                    <calculate field-name="postingAmount" type="BigDecimal">
                                        <calcop field-name="acctgTransEntry.amount" operator="negative"/>
                                    </calculate>
                                </if-compare>    
                            </else>
                        </if-compare>
                        <else>
                            <log level="warning" message="GL account ${glAccount.glAccountId} is of class ${glAccount.glAccountClassId} which is neither debit nor credit - cannot update posted balance"/>
                        </else>    
                    </if-compare>                    
                </else>
            </if-compare>
            <log level="verbose" message="GL account: [${acctgTransEntry.glAccountId}] initial balance: [${glAccountOrganization.postedBalance}] ${acctgTransEntry.debitCreditFlag} [${acctgTransEntry.amount}]"/>
            <!-- calculate the new posted balance for this gl account -->
            <calculate field-name="postedBalance" type="BigDecimal">
                <calcop operator="get" field-name="glAccountOrganization.postedBalance"/>
                <calcop operator="get" field-name="postingAmount"/>
            </calculate>
            <log level="verbose" message="GL account: [${acctgTransEntry.glAccountId}] final balance: [${postedBalance}]"/>

            <!-- update the gl account's posted balance for this organization -->
            <set from-field="glAccount.glAccountId" field="updateGlAccountParams.glAccountId"/>
            <set from-field="postedBalance" field="updateGlAccountParams.postedBalance" type="Double"/>
            <set from-field="acctgTransEntry.organizationPartyId" field="updateGlAccountParams.organizationPartyId"/>
            <call-service service-name="updateGlAccountOrganization" in-map-name="updateGlAccountParams"/>

            <!-- assemble the glAccountHistoryList, we will update all of these -->
            <set from-field="customTimePeriodListByOrganizationPartyIdMap.${acctgTransEntry.organizationPartyId}" field="customTimePeriodList"/>
            <iterate entry-name="customTimePeriod" list-name="customTimePeriodList">
                <entity-one entity-name="GlAccountHistory" value-name="glAccountHistory">
                    <field-map field-name="glAccountId" env-name="acctgTransEntry.glAccountId"/>
                    <field-map field-name="organizationPartyId" env-name="acctgTransEntry.organizationPartyId"/>
                    <field-map field-name="customTimePeriodId" env-name="customTimePeriod.customTimePeriodId"/>
                </entity-one>
                <!-- if no glAccountHistory create a new empty one -->
                <if-empty field-name="glAccountHistory">
                    <make-value value-name="glAccountHistory" entity-name="GlAccountHistory"/>
                    <set from-field="acctgTransEntry.glAccountId" field="glAccountHistory.glAccountId"/>
                    <set from-field="acctgTransEntry.organizationPartyId" field="glAccountHistory.organizationPartyId"/>
                    <set from-field="customTimePeriod.customTimePeriodId" field="glAccountHistory.customTimePeriodId"/>
                    <set field="glAccountHistory.postedDebits" value="0.0" type="Double"/>
                    <set field="glAccountHistory.postedCredits" value="0.0" type="Double"/>
                    <create-value value-name="glAccountHistory"/>
                </if-empty>
            
                <!-- update GlAccountHistory's debit and credit totals -->
                <if-compare field-name="debitCreditFlag" map-name="acctgTransEntry" operator="equals" value="D">
                    <calculate field-name="postedDebits" map-name="glAccountHistory" type="BigDecimal">
                        <calcop operator="add">
                            <calcop operator="get" field-name="amount" map-name="acctgTransEntry"/>
                            <calcop operator="get" field-name="postedDebits" map-name="glAccountHistory"/>
                        </calcop> 
                    </calculate>
                <else>
                    <if-compare field-name="debitCreditFlag" map-name="acctgTransEntry" operator="equals" value="C">
                        <calculate field-name="postedCredits" map-name="glAccountHistory" type="BigDecimal">
                            <calcop operator="add">
                                <calcop operator="get" field-name="amount" map-name="acctgTransEntry"/>
                                <calcop operator="get" field-name="postedCredits" map-name="glAccountHistory"/>
                            </calcop> 
                        </calculate>
                        <else>
                            <add-error><fail-message message="Bad debitCreditFlag [${acctgTransEntry.debitCreditFlag}] (was not D or C) in Accounting Transaction Entry with acctgTransId=[${acctgTransEntry.acctgTransId}] and acctgTransEntrySeqId=[${acctgTransEntry.acctgTransEntrySeqId}]"/></add-error>
                        </else>
                    </if-compare>    
                </else>
                </if-compare>
                <store-value value-name="glAccountHistory"/>
            </iterate>
        </iterate>
        
        <!-- check-errors just in case we had some bad debitCreditFlags -->
        <check-errors/>

        <!-- for AcctgTrans: set isPosted to Y, postedDate to now -->
        <set from-field="acctgTrans.acctgTransId" field="updateAcctgTransParams.acctgTransId"/>
        <now-timestamp-to-env env-name="updateAcctgTransParams.postedDate"/>
        <set value="Y" field="updateAcctgTransParams.isPosted"/>

        <call-service service-name="updateAcctgTrans" in-map-name="updateAcctgTransParams" include-user-login="true"/>
    </simple-method>
</simple-methods>
