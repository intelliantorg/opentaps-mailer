/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import org.ofbiz.entity.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.base.util.*;
import org.ofbiz.accounting.payment.*;
import org.ofbiz.order.shoppingcart.*;
import org.ofbiz.party.contact.*;

delegator = request.getAttribute("delegator");
dispatcher = request.getAttribute("dispatcher");
cart = session.getAttribute("shoppingCart");
orderPartyId = cart.getPartyId();
currencyUomId = cart.getCurrency();
context.put("cart", cart);
context.put("paymentMethodType", request.getParameter("paymentMethodType"));

// nuke the event messages
request.removeAttribute("_EVENT_MESSAGE_");

// If there's a paymentMethodId request attribute, the user has just created a new payment method,
//  so put the new paymentMethodId in the context for the UI
newPaymentMethodId=request.getAttribute("paymentMethodId");
if(! UtilValidate.isEmpty(newPaymentMethodId)) {
    context.put("checkOutPaymentId", newPaymentMethodId);
}

if (orderPartyId != null && !orderPartyId.equals("_NA_")) {
    orderParty = delegator.findByPrimaryKey("Party", UtilMisc.toMap("partyId", orderPartyId));
    orderPerson = orderParty.getRelatedOne("Person");
    context.put("orderParty", orderParty);
    context.put("orderPerson", orderPerson);
    if (orderParty != null) { 
        context.put("paymentMethodList", EntityUtil.filterByDate(orderParty.getRelated("PaymentMethod"), true));
        
        billingAccountList = BillingAccountWorker.makePartyBillingAccountList(userLogin, currencyUomId, orderPartyId, delegator, dispatcher);
        if (billingAccountList != null && billingAccountList.size() > 0) {
            context.put("selectedBillingAccountId", cart.getBillingAccountId());
            context.put("billingAccountList", billingAccountList);
        }
    }
}

if (request.getParameter("useShipAddr") != null && cart.getShippingContactMechId() != null) {
    shippingContactMech = cart.getShippingContactMechId();
    postalAddress = delegator.findByPrimaryKey("PostalAddress", UtilMisc.toMap("contactMechId", shippingContactMech));    
    context.put("postalFields", postalAddress);
} else {
    context.put("postalFields", UtilHttp.getParameterMap(request));
}

if (cart != null) {
    if (cart.getPaymentMethodIds().size() > 0) {
        checkOutPaymentId = cart.getPaymentMethodIds().get(0);
        context.put("checkOutPaymentId", checkOutPaymentId); 
        if (orderParty == null) {                                
            paymentMethod = delegator.findByPrimaryKey("PaymentMethod", UtilMisc.toMap("paymentMethodId", checkOutPaymentId));           
            if (paymentMethod != null && paymentMethod.getString("paymentMethodTypeId").equals("CREDIT_CARD")) {
                paymentMethodType = "CC";
                account = paymentMethod.getRelatedOne("CreditCard");       
                context.put("creditCard", account); 
                context.put("paymentMethodType", paymentMethodType);                     
            } else if (paymentMethod != null && paymentMethod.getString("paymentMethodTypeId").equals("EFT_ACCOUNT")) {
                paymentMethodType = "EFT";
                account = paymentMethod.getRelatedOne("EftAccount");
                context.put("eftAccount", account);
                context.put("paymentMethodType", paymentMethodType);
            }
            if (account != null) {
                address = account.getRelatedOne("PostalAddress");
                context.put("postalAddress", address);                
            }
        }            
    } else if (cart.getPaymentMethodTypeIds().size() > 0) {
        checkOutPaymentId = cart.getPaymentMethodTypeIds().get(0);
        context.put("checkOutPaymentId", checkOutPaymentId); 
    }
}
