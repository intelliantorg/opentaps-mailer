/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.lang.*;
import java.util.*;
import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.service.*;
import org.ofbiz.product.catalog.*;
import org.ofbiz.product.category.*;
import org.ofbiz.product.product.ProductWorker;

dispatcher = request.getAttribute("dispatcher");
delegator = request.getAttribute("delegator");
contentPathPrefix = CatalogWorker.getContentPathPrefix(request);
catalogName = CatalogWorker.getCatalogName(request);
currentCatalogId = CatalogWorker.getCurrentCatalogId(request);
requestParams = UtilHttp.getParameterMap(request);

detailScreen = "productdetail";
productId = requestParams.get("product_id");

/*
 * NOTE JLR 20070221 this should be done using the same method than in add to cart. I will do it like that and remove all this after.
 *
if (productId != null) {
    previousParams = session.getAttribute("_PREVIOUS_PARAMS_"); 
    if (previousParams != null && previousParams.length() > 0) {
        previousParams = UtilHttp.stripNamedParamsFromQueryString(previousParams, UtilMisc.toList("product_id"));
        previousParams = previousParams + "&product_id=" + productId;
    } else {
        previousParams = "product_id=" + productId;
    }
    session.setAttribute("_PREVIOUS_PARAMS_", previousParams);    // for login
    context.put("previousParams", previousParams);
}*/    

// get the product entity
if (productId != null) {
    product = delegator.findByPrimaryKeyCache("Product", UtilMisc.toMap("productId", productId));
    
    // first make sure this isn't a variant that has an associated virtual product, if it does show that instead of the variant
    virtualProductId = ProductWorker.getVariantVirtualId(product);
    if (virtualProductId != null) {
        productId = virtualProductId;
        product = delegator.findByPrimaryKeyCache("Product", UtilMisc.toMap("productId", productId));
    }
    
    context.put("productId", productId);
    
    // now check to see if there is a view allow category and if this product is in it...
    if (product != null) {
        viewProductCategoryId = CatalogWorker.getCatalogViewAllowCategoryId(delegator, currentCatalogId);
        if (viewProductCategoryId != null) {
            if (!CategoryWorker.isProductInCategory(delegator, productId, viewProductCategoryId)) {
                // a view allow productCategoryId was found, but the product is not in the category, axe it...
                product = null;
            }
        }
    }
    
    if (product != null) {
        context.put("product", product);  
        context.put("title", product.getString("productName"));
        context.put("metaDescription", product.getString("productName"));
        keywords = new ArrayList();
        keywords.add(product.getString("productName"));
        keywords.add(catalogName);
        members = delegator.findByAndCache("ProductCategoryMember", UtilMisc.toMap("productId", productId));
        membersIter = members.iterator();
        while (membersIter.hasNext()) {
            member = membersIter.next();
            category = member.getRelatedOneCache("ProductCategory");
            keywords.add(category.getString("description"));            
        }
        context.put("metaKeywords", StringUtil.join(keywords, ", "));
          
        // Set the default template for aggregated product (product component configurator ui)
        if (product.getString("productTypeId") != null && product.getString("productTypeId").equals("AGGREGATED") && configproductdetailScreen != null) {
            detailScreen = configproductdetailScreen;
        }

        productTemplate = product.getString("detailScreen");
        if (productTemplate != null && productTemplate.length() > 0) {
            detailScreen = productTemplate;
        }

    }
}
       
//  check the catalog's template path and update
templatePathPrefix = CatalogWorker.getTemplatePathPrefix(request);
if (templatePathPrefix != null) {
    detailScreen = templatePathPrefix + detailScreen;
}    
    
// set the template for the view
context.put("detailScreen", detailScreen);

    
