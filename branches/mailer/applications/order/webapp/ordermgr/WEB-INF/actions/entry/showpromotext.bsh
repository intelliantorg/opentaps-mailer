/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.order.shoppingcart.product.ProductPromoWorker;
import org.ofbiz.order.shoppingcart.*;

dispatcher = request.getAttribute("dispatcher");
delegator = request.getAttribute("delegator");
userLogin = session.getAttribute("userLogin");

shoppingCart = ShoppingCartEvents.getCartObject(request);
mode = shoppingCart.getOrderType();

promoShowLimit = 3;

if (mode != null && mode.equals("SALES_ORDER")) {
    //Get Promo Text Data
    productPromosAll = ProductPromoWorker.getStoreProductPromos(delegator, dispatcher, request);
    //Make sure that at least one promo has non-empty promoText
    showPromoText = false;
    promoToShow = 0;
    productPromosAllShowable = new ArrayList(productPromosAll.size());
    productPromoIterator = productPromosAll.iterator();
    while (productPromoIterator.hasNext()) {
        productPromo = productPromoIterator.next();
        promoText = productPromo.get("promoText");
    
        if (promoText != null && promoText.length() > 0 && !"N".equals(productPromo.getString("showToCustomer"))) {
            showPromoText = true;
            promoToShow++;
            productPromosAllShowable.add(productPromo);
        }
    }
    
    // now slim it down to promoShowLimit
    productPromosRandomTemp = new ArrayList(productPromosAllShowable);
    productPromos = null;
    if (productPromosRandomTemp.size() > promoShowLimit) {
        productPromos = new ArrayList(promoShowLimit);
        for (int i=0; i<promoShowLimit; i++) {
            randomIndex = (int) Math.round(java.lang.Math.random() * (productPromosRandomTemp.size() - 1));
            productPromos.add(productPromosRandomTemp.remove(randomIndex));
        }
    } else {
        productPromos = productPromosRandomTemp;
    }
    
    context.put("promoShowLimit", promoShowLimit);
    context.put("productPromosAllShowable", productPromosAllShowable);
    context.put("productPromos", productPromos);
    context.put("showPromoText", showPromoText);
    context.put("promoToShow", promoToShow);
} else {
    context.put("showPromoText", false);
}
