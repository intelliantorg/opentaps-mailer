/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.HashMap;

import org.ofbiz.service.*;
import org.ofbiz.entity.*;
import org.ofbiz.base.util.*;
import org.ofbiz.order.shoppingcart.*;
import org.ofbiz.party.party.PartyWorker;
import org.ofbiz.product.catalog.CatalogWorker;

delegator = request.getAttribute("delegator");
security = request.getAttribute("security");
dispatcher= (LocalDispatcher)request.getAttribute("dispatcher");
userLogin = session.getAttribute("userLogin");

context.put("dispatcher",dispatcher);

// Just in case we are here from the choosecatalog form, the
// following call will save in the session the new catalogId
CatalogWorker.getCurrentCatalogId(request);

// Get the Cart and Prepare Size
shoppingCart = ShoppingCartEvents.getCartObject(request);
context.put("shoppingCartSize", shoppingCart.size());
context.put("shoppingCart", shoppingCart);
context.put("currencyUomId", shoppingCart.getCurrency());

mode = shoppingCart.getOrderType();

// get all the possible gift wrap options
allgiftWraps = delegator.findByAnd("ProductFeature", UtilMisc.toMap("productFeatureTypeId", "GIFT_WRAP"), UtilMisc.toList("defaultSequenceNum"));
context.put("allgiftWraps", allgiftWraps);

context.put("contentPathPrefix", CatalogWorker.getContentPathPrefix(request));

partyId = shoppingCart.getPartyId();
if (partyId != null && partyId.equals("_NA_")) partyId = null;
context.put("partyId", partyId);

defaultDesiredDeliveryDate = shoppingCart.getDefaultItemDeliveryDate();
if (UtilValidate.isEmpty(defaultDesiredDeliveryDate)) {
    defaultDesiredDeliveryDate = (new java.sql.Date(System.currentTimeMillis())).toString();
} else {
    context.put("useAsDefaultDesiredDeliveryDate", "true");
}
context.put("defaultDesiredDeliveryDate", defaultDesiredDeliveryDate);

defaultComment = shoppingCart.getDefaultItemComment();
if (!UtilValidate.isEmpty(defaultComment)) {
    context.put("useAsDefaultComment", "true");
}
context.put("defaultComment", defaultComment);

// get all party shopping lists
if (partyId != null) {
  shoppingLists = delegator.findByAnd("ShoppingList", UtilMisc.toMap("partyId", partyId));
  context.put("shoppingLists", shoppingLists);
}

// get product inventory summary for each shopping cart item
productStore = delegator.findByPrimaryKeyCache("ProductStore", UtilMisc.toMap("productStoreId", shoppingCart.getProductStoreId()));
productStoreFacilityId = null;
if (productStore != null) {
    productStoreFacilityId = productStore.getString("inventoryFacilityId");
}
inventorySummary = dispatcher.runSync("getProductInventorySummaryForItems", UtilMisc.toMap("orderItems", shoppingCart.makeOrderItems(), "facilityId", productStoreFacilityId));
context.put("availableToPromiseMap", inventorySummary.get("availableToPromiseMap"));
context.put("quantityOnHandMap", inventorySummary.get("quantityOnHandMap"));
context.put("mktgPkgATPMap", inventorySummary.get("mktgPkgATPMap"));
context.put("mktgPkgQOHMap", inventorySummary.get("mktgPkgQOHMap"));


// get purchase order item types
purchaseOrderItemTypeList = delegator.findByAndCache("OrderItemType", UtilMisc.toMap("parentTypeId", "PURCHASE_SPECIFIC"));
context.put("purchaseOrderItemTypeList", purchaseOrderItemTypeList);
