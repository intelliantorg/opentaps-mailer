/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.math.BigDecimal;
import org.ofbiz.base.util.UtilValidate;
import org.ofbiz.entity.GenericValue;
import org.ofbiz.order.order.OrderReadHelper;
import org.ofbiz.product.store.ProductStoreWorker;
import org.ofbiz.order.order.OrderListState;

orderHeaderList = context.get("orderHeaderList");
productStore = ProductStoreWorker.getProductStore(request);

List filterInventoryProblems = new ArrayList();

if (state.hasFilter("filterInventoryProblems") && UtilValidate.isNotEmpty(orderHeaderList)) {
    for (ohi = orderHeaderList.iterator(); ohi.hasNext();) {
        orderHeader = (GenericValue) ohi.next();
        orderReadHelper = OrderReadHelper.getHelper(orderHeader);
        backorderQty = orderReadHelper.getOrderBackorderQuantityBd();
        if (backorderQty.compareTo(new BigDecimal("0")) == 1) {
            filterInventoryProblems.add(orderHeader.get("orderId"));
        }
    }
}

List filterPOsOpenPastTheirETA = new ArrayList();
List filterPOsWithRejectedItems = new ArrayList();
List filterPartiallyReceivedPOs = new ArrayList();

state = OrderListState.getInstance(request);
//print("### " + state.toString());

if ((state.hasFilter("filterPartiallyReceivedPOs") ||
        state.hasFilter("filterPOsOpenPastTheirETA") ||
        state.hasFilter("filterPOsWithRejectedItems")) &&
        UtilValidate.isNotEmpty(orderHeaderList)) {    
    for (ohi = orderHeaderList.iterator(); ohi.hasNext();) {
        orderHeader = (GenericValue) ohi.next();
        facilityId = orderHeader.getString("originFacilityId");
        if (facilityId == null) {
        facilityId = productStore.getString("inventoryFacilityId");
        }
        orderReadHelper = OrderReadHelper.getHelper(orderHeader);
        if ("PURCHASE_ORDER".equals(orderHeader.getString("orderTypeId"))) {                
            if (orderReadHelper.getRejectedOrderItems() &&
                    state.hasFilter("filterPOsWithRejectedItems")) {
                filterPOsWithRejectedItems.add(orderHeader.get("orderId"));
                continue;
            }
            if (orderReadHelper.getPastEtaOrderItems(orderHeader.get("orderId")) &&
                    state.hasFilter("filterPOsOpenPastTheirETA")) {
                filterPOsOpenPastTheirETA.add(orderHeader.get("orderId"));
                continue;
            }
            if (orderReadHelper.getPartiallyReceivedItems() &&
                    state.hasFilter("filterPartiallyReceivedPOs")) {
                filterPartiallyReceivedPOs.add(orderHeader.get("orderId"));
                continue;
            }            
        }
    }
}

List filterAuthProblems = new ArrayList();

if (state.hasFilter("filterAuthProblems") && UtilValidate.isNotEmpty(orderHeaderList)) {
    for (ohi = orderHeaderList.iterator(); ohi.hasNext();) {
        orderHeader = (GenericValue) ohi.next();
        orderReadHelper = OrderReadHelper.getHelper(orderHeader);
        List paymentPrefList = orderReadHelper.getPaymentPreferences();
        for (Iterator ppi = paymentPrefList.iterator(); ppi.hasNext();) {
            paymentPref = (GenericValue) ppi.next();
            if ("PAYMENT_NOT_AUTH".equals(paymentPref.getString("statusId"))) {
                filterAuthProblems.add(orderHeader.get("orderId"));
            }
        }        
    }
}
context.put("filterInventoryProblems", filterInventoryProblems);
context.put("filterPOsWithRejectedItems", filterPOsWithRejectedItems);
context.put("filterPOsOpenPastTheirETA", filterPOsOpenPastTheirETA);
context.put("filterPartiallyReceivedPOs", filterPartiallyReceivedPOs);
context.put("filterAuthProblems", filterAuthProblems);