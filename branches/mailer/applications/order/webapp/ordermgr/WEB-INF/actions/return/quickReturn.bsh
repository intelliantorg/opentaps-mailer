/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */

 
import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.order.order.*;
import org.ofbiz.party.contact.*;
import org.ofbiz.product.store.*;

dispatcher = request.getAttribute("dispatcher");
delegator = request.getAttribute("delegator");
orderId = request.getParameter("orderId");
context.put("orderId", orderId);

partyId = request.getParameter("party_id");
context.put("partyId", partyId);

if (partyId != null) {
    party = delegator.findByPrimaryKey("Party", UtilMisc.toMap("partyId", partyId));
    context.put("party", party);
}

returnHeaders = delegator.findByAnd("ReturnHeader", UtilMisc.toMap("statusId", "RETURN_REQUESTED"), UtilMisc.toList("entryDate"));
context.put("returnHeaders", returnHeaders);

// put in the return to party information from the order header
if (orderId != null) {
    order = delegator.findByPrimaryKey("OrderHeader", UtilMisc.toMap("orderId", orderId));
    productStore = order.getRelatedOne("ProductStore");
    if (productStore != null) {
        context.put("destinationFacilityId", ProductStoreWorker.determineSingleFacilityForStore(delegator, productStore.getString("productStoreId")));
    }

    orh = new OrderReadHelper(order);
    context.put("orh", orh);
    context.put("toPartyId", productStore.getString("payToPartyId"));
    context.put("orderHeaderAdjustments", orh.getAvailableOrderHeaderAdjustments());
}

returnTypes = delegator.findAll("ReturnType", UtilMisc.toList("sequenceId"));
context.put("returnTypes", returnTypes);

returnReasons = delegator.findAll("ReturnReason", UtilMisc.toList("sequenceId"));
context.put("returnReasons", returnReasons);

itemStts = delegator.findByAnd("StatusItem", UtilMisc.toMap("statusTypeId", "INV_SERIALIZED_STTS"), UtilMisc.toList("sequenceId"));
context.put("itemStts", itemStts);

returnItemTypeMap = delegator.findByAnd("ReturnItemTypeMap", UtilMisc.toMap("returnHeaderTypeId", "CUSTOMER_RETURN"));
iter = returnItemTypeMap.iterator();
typeMap = new HashMap();
while (iter.hasNext()) {
    value = iter.next();
    typeMap.put(value.getString("returnItemMapKey"), value.getString("returnItemTypeId"));
}
context.put("returnItemTypeMap", typeMap);

if (orderId != null) {
    Map returnRes = dispatcher.runSync("getReturnableItems", UtilMisc.toMap("orderId", orderId));   
    context.put("returnableItems", returnRes.get("returnableItems"));
    orderHeader = delegator.findByPrimaryKeyCache("OrderHeader", UtilMisc.toMap("orderId", orderId));
    context.put("orderHeader", orderHeader);
}

context.put("shippingContactMechList", ContactHelper.getContactMech(party, "SHIPPING_LOCATION", "POSTAL_ADDRESS", false));   


