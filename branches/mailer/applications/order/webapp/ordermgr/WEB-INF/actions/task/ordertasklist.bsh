/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import org.ofbiz.entity.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.base.util.*;
import org.ofbiz.order.task.*;

delegator = request.getAttribute("delegator");
userLogin = session.getAttribute("userLogin");
context.put("userLogin", userLogin);

// create the sort order
sort = request.getParameter("sort");
sortOrder = UtilMisc.toList("currentStatusId", "-priority", "orderDate");
if (sort != null) {
    if (sort.equals("name")) {
        sortOrder.add(0, "firstName");
        sortOrder.add(0, "lastName");
    } else if (sort.equals("grandTotal")) {
        sortOrder.add(0, "-grandTotal");
    } else {
        sortOrder.add(0, sort);
    }
}

partyBase = UtilMisc.toList(new EntityExpr("statusId", EntityOperator.EQUALS, "CAL_ACCEPTED"), new EntityExpr("wepaPartyId", EntityOperator.EQUALS, userLogin.getString("partyId")));
partyRole = UtilMisc.toList(new EntityExpr("orderRoleTypeId", EntityOperator.EQUALS, "PLACING_CUSTOMER"), new EntityExpr("orderRoleTypeId", EntityOperator.EQUALS, "SUPPLIER_AGENT"));
partyExpr = UtilMisc.toList(new EntityConditionList(partyBase, EntityOperator.AND), new EntityConditionList(partyRole, EntityOperator.OR));
partyCond = new EntityConditionList(partyExpr, EntityOperator.AND);
partyTasks = delegator.findByCondition("OrderTaskList", partyCond, null, sortOrder);

if (partyTasks != null) partyTasks = EntityUtil.filterByDate(partyTasks);
context.put("partyTasks", partyTasks);

// Build a map of orderId and currency
orderCurrencyMap = new HashMap();
ptIter = partyTasks.iterator();
while (ptIter.hasNext()) {
    ptItem = ptIter.next();
    orderHeader = delegator.findByPrimaryKey("OrderHeader", UtilMisc.toMap("orderId", ptItem.get("orderId")));
    orderCurrencyMap.put( ptItem.get("orderId"), orderHeader.get("currencyUom") );
}

// get this user's roles
partyRoles = delegator.findByAnd("PartyRole", UtilMisc.toMap("partyId", userLogin.getString("partyId")));  
    
// build the role list
pri = partyRoles.iterator();
pRolesList = new ArrayList();
while (pri.hasNext()) {
    partyRole = (GenericValue) pri.next(); 
    if (!partyRole.getString("roleTypeId").equals("_NA_"))
        pRolesList.add(new EntityExpr("roleTypeId", EntityOperator.EQUALS, partyRole.getString("roleTypeId")));
}

custList = UtilMisc.toList(new EntityExpr("orderRoleTypeId", EntityOperator.EQUALS, "PLACING_CUSTOMER"), new EntityExpr("orderRoleTypeId", EntityOperator.EQUALS, "SUPPLIER_AGENT"));
baseList = UtilMisc.toList(new EntityExpr("statusId", EntityOperator.NOT_EQUAL, "CAL_CANCELLED"), new EntityExpr("statusId", EntityOperator.NOT_EQUAL, "CAL_COMPLETED"), new EntityExpr("statusId", EntityOperator.NOT_EQUAL, "CAL_DELEGATED"));
expressions = new LinkedList();
if (custList.size() > 0) expressions.add(new EntityConditionList(custList, EntityOperator.OR));
if (pRolesList.size() > 0) expressions.add(new EntityConditionList(pRolesList, EntityOperator.OR));
if (baseList.size() > 0) expressions.add(new EntityConditionList(baseList, EntityOperator.AND));
conditions = new EntityConditionList(expressions, EntityOperator.AND);
    
// invoke the query
roleTasks = delegator.findByCondition("OrderTaskList", conditions, null, sortOrder);    
if (roleTasks != null) roleTasks = EntityUtil.filterByAnd(roleTasks, baseList);
if (roleTasks != null) roleTasks = EntityUtil.filterByDate(roleTasks);  
context.put("roleTasks", roleTasks);

// Add to the map of orderId and currency
rtIter = roleTasks.iterator();
while (rtIter.hasNext()) {
    rtItem = rtIter.next();
    orderHeader = delegator.findByPrimaryKey("OrderHeader", UtilMisc.toMap("orderId", rtItem.get("orderId")));
    orderCurrencyMap.put( rtItem.get("orderId"), orderHeader.get("currencyUom") );
}
context.put("orderCurrencyMap", orderCurrencyMap);

context.put("now", UtilDateTime.nowTimestamp());

// purchase order schedule
poList = delegator.findByAnd("OrderHeaderAndRoles", UtilMisc.toMap("partyId", userLogin.get("partyId"), "orderTypeId", "PURCHASE_ORDER"));
poIter = poList.iterator();
listedPoIds = new HashSet();
while (poIter.hasNext()) {
    poGv = poIter.next();
    poOrderId = poGv.get("orderId");
    if (listedPoIds.contains(poOrderId)) {
    	poIter.remove();
    } else {
        listedPoIds.add(poOrderId);
    }
}
context.put("poList", poList);

