/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


// This file has been modified by Open Source Strategies, Inc.

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.order.order.OrderReadHelper;
import java.math.BigDecimal;

dispatcher = request.getAttribute("dispatcher");
delegator = request.getAttribute("delegator");
returnId = request.getParameter("returnId");
if (returnId == null) {
    returnId = request.getAttribute("returnId");
}
context.put("returnId", returnId);

orderId = request.getParameter("orderId");
context.put("orderId", orderId);

returnHeader = delegator.findByPrimaryKey("ReturnHeader", UtilMisc.toMap("returnId", returnId));
context.put("returnHeader", returnHeader);

returnItems = delegator.findByAnd("ReturnItem", UtilMisc.toMap("returnId", returnId));
context.put("returnItems", returnItems);

// these are just the adjustments not associated directly with a return item--the rest are gotten with a .getRelated on the returnItems in the .FTL
returnAdjustments = delegator.findByAnd("ReturnAdjustment", UtilMisc.toMap("returnId", returnId, "returnItemSeqId", "_NA_"), UtilMisc.toList("returnItemSeqId", "returnAdjustmentTypeId"));
context.put("returnAdjustments", returnAdjustments);

returnTypes = delegator.findAll("ReturnType", UtilMisc.toList("sequenceId"));
context.put("returnTypes", returnTypes);

itemStatus = delegator.findByAnd("StatusItem", UtilMisc.toMap("statusTypeId", "INV_SERIALIZED_STTS"),
                       UtilMisc.toList("statusId", "description"));
context.put("itemStatus", itemStatus);

returnReasons = delegator.findAll("ReturnReason", UtilMisc.toList("sequenceId"));
context.put("returnReasons", returnReasons);

itemStts = delegator.findByAnd("StatusItem", UtilMisc.toMap("statusTypeId", "INV_SERIALIZED_STTS"), UtilMisc.toList("sequenceId"));
context.put("itemStts", itemStts);

returnItemTypeMap = delegator.findByAnd("ReturnItemTypeMap", UtilMisc.toMap("returnHeaderTypeId", "CUSTOMER_RETURN"));
iter = returnItemTypeMap.iterator();
typeMap = new HashMap();
while (iter.hasNext()) {
    value = iter.next();
    typeMap.put(value.getString("returnItemMapKey"), value.getString("returnItemTypeId"));
}
context.put("returnItemTypeMap", typeMap);

if (orderId != null) {
    order = delegator.findByPrimaryKey("OrderHeader", UtilMisc.toMap("orderId", orderId));
    Map returnRes = dispatcher.runSync("getReturnableItems", UtilMisc.toMap("orderId", orderId));
    context.put("returnableItems", returnRes.get("returnableItems"));

   orh = new OrderReadHelper(order);
   context.put("orh", orh);
   context.put("orderHeaderAdjustments", orh.getAvailableOrderHeaderAdjustments());

    // get the order shipping amount
    Map shipRes = dispatcher.runSync("getOrderShippingAmount", UtilMisc.toMap("orderId", orderId));
    BigDecimal shippingAmount = shipRes.get("shippingAmount");
    context.put("shippingAmount", shippingAmount);
}

partyOrders = delegator.findByAnd("OrderHeaderAndRoles", UtilMisc.toMap("roleTypeId", "PLACING_CUSTOMER", "partyId", returnHeader.getString("fromPartyId")), UtilMisc.toList("orderId"));
context.put("partyOrders", partyOrders);
