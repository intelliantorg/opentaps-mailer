/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


/*
 * Script to build the open order item report using
 * the OrderItemQuantityReportGroupByItem view.
 */

import javolution.util.FastList;
import javolution.util.FastMap;

import org.ofbiz.base.util.UtilMisc;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.util.*;

productStoreId = parameters.get("productStoreId");
orderTypeId = parameters.get("orderTypeId");
orderStatusId = parameters.get("orderStatusId");

// search by orderTypeId is mandatory
conditions = UtilMisc.toList(new EntityExpr("orderTypeId", EntityOperator.EQUALS, orderTypeId));
if (productStoreId != null && productStoreId.length() > 0) {
    conditions.add(new EntityExpr("productStoreId", EntityOperator.EQUALS, productStoreId));
    // for generating a title (given product store)
    context.put("productStore", delegator.findByPrimaryKeyCache("ProductStore", UtilMisc.toMap("productStoreId", productStoreId)));
} else {
    // for generating a title (all stores)  TODO: use UtilProperties to internationalize
    context.put("productStore", UtilMisc.toMap("storeName", "All Stores")); 
}
if (orderStatusId != null && orderStatusId.length() > 0) {
    conditions.add(new EntityExpr("orderStatusId", EntityOperator.EQUALS, orderStatusId));
} else {
    // search all orders that are not completed, cancelled or rejected
    conditions.add( 
            new EntityConditionList( UtilMisc.toList(
                    new EntityExpr("orderStatusId", EntityOperator.NOT_EQUAL, "ORDER_COMPLETED"),
                    new EntityExpr("orderStatusId", EntityOperator.NOT_EQUAL, "ORDER_CANCELLED"),
                    new EntityExpr("orderStatusId", EntityOperator.NOT_EQUAL, "ORDER_REJECTED")
                    ), EntityOperator.AND)
            );
}

// item conditions
conditions.add(new EntityExpr("orderItemStatusId", EntityOperator.NOT_EQUAL, "ITEM_COMPLETED"));
conditions.add(new EntityExpr("orderItemStatusId", EntityOperator.NOT_EQUAL, "ITEM_CANCELLED"));
conditions.add(new EntityExpr("orderItemStatusId", EntityOperator.NOT_EQUAL, "ITEM_REJECTED"));

// get the results as an entity list iterator
allConditions = new EntityConditionList( conditions, EntityOperator.AND );
fieldsToSelect = UtilMisc.toList("orderId","orderDate","productId","quantityOrdered","quantityIssued","quantityOpen");
fieldsToSelect.add("shipBeforeDate");
fieldsToSelect.add("shipAfterDate");
fieldsToSelect.add("itemDescription");
findOptions = new EntityFindOptions(true, EntityFindOptions.TYPE_SCROLL_INSENSITIVE, EntityFindOptions.CONCUR_READ_ONLY, true);
listIt = delegator.findListIteratorByCondition("OrderItemQuantityReportGroupByItem", allConditions, null, fieldsToSelect, UtilMisc.toList("orderDate DESC"), findOptions);
context.put("listIt", listIt);


