/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */

 
 // this script is used to get the company's logo header information for orders, invoices, and returns.  It can either take order, invoice, returnHeader from
 // parameters or use orderId, invoiceId, or returnId to look them up.  
 // if none of these parameters are available then fromPartyId is used or "Company" as fallback

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.party.contact.*;
import org.ofbiz.order.order.OrderReadHelper;
import java.sql.Timestamp;

orderHeader = (GenericValue) parameters.get("orderHeader");
orderId = parameters.get("orderId");
invoice = (GenericValue) parameters.get("invoice");
invoiceId = parameters.get("invoiceId");
shipmentId = parameters.get("shipmentId");
returnHeader = (GenericValue) parameters.get("returnHeader");
returnId = parameters.get("returnId");
quote = null;
quoteId = parameters.get("quoteId");
nowTimestamp = UtilDateTime.nowTimestamp();
fromPartyId = parameters.get("fromPartyId");

if (orderHeader == null && orderId != null) {
    orderHeader = delegator.findByPrimaryKey("OrderHeader", UtilMisc.toMap("orderId", orderId));
} else if (shipmentId != null) {
    shipment = delegator.findByPrimaryKey("Shipment", UtilMisc.toMap("shipmentId", shipmentId));
    orderHeader = shipment.getRelatedOne("PrimaryOrderHeader");
}

if (invoice == null && invoiceId != null)	{
    invoice = delegator.findByPrimaryKey("Invoice", UtilMisc.toMap("invoiceId", invoiceId));
}

if (returnHeader == null && returnId != null) {
    returnHeader = delegator.findByPrimaryKey("ReturnHeader", UtilMisc.toMap("returnId", returnId));
}

if (quoteId != null) {
    quote = delegator.findByPrimaryKey("Quote", UtilMisc.toMap("quoteId", quoteId));
}

// defaults:
logoImageUrl = null; // "http://localhost:8080/images/ofbiz_powered.gif";
partyId = null;

// get the logo partyId from order or invoice - note that it is better to do comparisons this way in case the there are null values
if (orderHeader != null) {
    orh = new OrderReadHelper(orderHeader);
    // for sales order, the logo party is the "BILL_FROM_VENDOR" of the order.  If that's not available, we'll use the OrderHeader's ProductStore's payToPartyId
    if ("SALES_ORDER".equals(orderHeader.getString("orderTypeId"))) {
        if (orh.getBillToParty() != null) {
            partyId = orh.getBillFromParty().getString("partyId");
        } else {
            productStore = orderHeader.getRelatedOne("ProductStore");
            if (orderHeader.getString("orderTypeId").equals("SALES_ORDER") && productStore != null && productStore.get("payToPartyId") != null) {
                partyId = productStore.getString("payToPartyId");
            }    
        }
    // purchase orders - use the BILL_TO_CUSTOMER of the order
    } else if ("PURCHASE_ORDER".equals(orderHeader.getString("orderTypeId"))) {
        partyId = orh.getBillToParty().getString("partyId");
        GenericValue billToCustomer = EntityUtil.getFirst(orderHeader.getRelatedByAnd("OrderRole", UtilMisc.toMap("roleTypeId", "BILL_TO_CUSTOMER")));
        if (billToCustomer != null) {
            partyId = billToCustomer.getString("partyId");
        }
    }
} else if (invoice != null) {
    if (("SALES_INVOICE".equals(invoice.getString("invoiceTypeId"))) && 
        (invoice.get("partyIdFrom") != null)) {
        partyId = invoice.getString("partyIdFrom");
    }
    if (("PURCHASE_INVOICE".equals(invoice.getString("invoiceTypeId"))) || 
        ("CUST_RTN_INVOICE".equals(invoice.getString("invoiceTypeId"))) && 
        (invoice.get("partyId") != null)) {
        partyId = invoice.getString("partyId");
    }
} else if (returnHeader != null) {
    if (("CUSTOMER_RETURN".equals(returnHeader.getString("returnHeaderTypeId"))) && 
        (returnHeader.get("toPartyId") != null)) {
        partyId = returnHeader.getString("toPartyId");
    }
} else if (quote != null) {
    productStore = quote.getRelatedOne("ProductStore");
    if (productStore != null && productStore.get("payToPartyId") != null) {
        partyId = productStore.getString("payToPartyId");
    }
}

// if partyId wasn't found use fromPartyId-parameter
if (partyId == null) {
    if (fromPartyId != null) {
        partyId = fromPartyId;
    } else {
        partyId = "Company";
    }
}

// the logo
GenericValue partyGroup = delegator.findByPrimaryKey("PartyGroup", UtilMisc.toMap("partyId",partyId));
if (partyGroup != null && UtilValidate.isNotEmpty(partyGroup.getString("logoImageUrl"))) {
    logoImageUrl = partyGroup.getString("logoImageUrl");
}
context.put("logoImageUrl", logoImageUrl);

// the company name
String companyName = "not found";
if (partyGroup != null && UtilValidate.isNotEmpty(partyGroup.get("groupName"))) {
    companyName = partyGroup.getString("groupName");
}
context.put("companyName", companyName);

// the address
List addresses = delegator.findByAnd("PartyContactMechPurpose",
        UtilMisc.toMap("partyId",partyId,"contactMechPurposeTypeId","GENERAL_LOCATION"));
List selAddresses = EntityUtil.filterByDate(addresses, nowTimestamp, "fromDate", "thruDate", true);        
GenericValue address = null;
if (addresses != null && addresses.size() > 0) {
    address = delegator.findByPrimaryKey("PostalAddress",UtilMisc.toMap("contactMechId",selAddresses.iterator().next().getString("contactMechId")));
}
if (address != null)	{
   // get the country name and state/province abbreviation
   country = address.getRelatedOneCache("CountryGeo");
   if (country != null) {
      context.put("countryName", country.getString("geoName"));
   }
   stateProvince = address.getRelatedOneCache("StateProvinceGeo");
   if (stateProvince != null) {
       context.put("stateProvinceAbbr", stateProvince.getString("abbreviation"));
   }
}
context.put("postalAddress", address);

//telephone
List phones = delegator.findByAnd("PartyContactMechPurpose",
        UtilMisc.toMap("partyId",partyId,"contactMechPurposeTypeId","PRIMARY_PHONE"));
List selPhones = EntityUtil.filterByDate(phones, nowTimestamp, "fromDate", "thruDate", true);        
if (phones != null && phones.size() > 0) {
    context.put("phone",delegator.findByPrimaryKey("TelecomNumber",UtilMisc.toMap("contactMechId",selPhones.iterator().next().getString("contactMechId"))));
}

//Email
List emails = delegator.findByAnd("PartyContactMechPurpose",
        UtilMisc.toMap("partyId",partyId,"contactMechPurposeTypeId","PRIMARY_EMAIL"));
List selEmails = EntityUtil.filterByDate(emails, nowTimestamp, "fromDate", "thruDate", true);        
if (emails != null && emails.size() > 0) {
    context.put("email",delegator.findByPrimaryKey("ContactMech",UtilMisc.toMap("contactMechId",selEmails.iterator().next().getString("contactMechId"))));
}
else	{	//get email address from party contact mech
	List contacts = delegator.findByAnd("PartyContactMech",
	        UtilMisc.toMap("partyId",partyId));
	List selContacts = EntityUtil.filterByDate(contacts, nowTimestamp, "fromDate", "thruDate", true);        
	if (selContacts != null && selContacts.size() > 0) {
		Iterator i = selContacts.iterator();
		while (i.hasNext())	{
			email = i.next().getRelatedOne("ContactMech");
			if (email.getString("contactMechTypeId").equals("ELECTRONIC_ADDRESS"))	{
				context.put("email",email);
				break;
			}
		}
	}
}

// website
List contacts = delegator.findByAnd("PartyContactMech",
	        UtilMisc.toMap("partyId",partyId));
List selContacts = EntityUtil.filterByDate(contacts, nowTimestamp, "fromDate", "thruDate", true);        
if (selContacts != null && selContacts.size() > 0) {
	Iterator i = selContacts.iterator();
	while (i.hasNext())	{
		website = i.next().getRelatedOne("ContactMech");
		if (website.getString("contactMechTypeId").equals("WEB_ADDRESS"))	{
			context.put("website",website);
			break;
		}
	}
}

//Bank account
List paymentMethods = delegator.findByAnd("PaymentMethod",UtilMisc.toMap("partyId",partyId,"paymentMethodTypeId", "EFT_ACCOUNT"));
List selPayments = EntityUtil.filterByDate(paymentMethods, nowTimestamp, "fromDate", "thruDate", true);        
if (selPayments != null && selPayments.size() > 0)
    context.put("eftAccount",delegator.findByPrimaryKey("EftAccount",UtilMisc.toMap("paymentMethodId",selPayments.iterator().next().getString("paymentMethodId"))));


