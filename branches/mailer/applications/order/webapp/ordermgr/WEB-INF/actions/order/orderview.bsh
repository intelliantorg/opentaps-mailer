/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


import java.util.*;
import java.sql.Timestamp;
import org.ofbiz.entity.*;
import org.ofbiz.entity.condition.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.base.util.*;
import org.ofbiz.base.util.collections.*;
import org.ofbiz.order.order.*;
import org.ofbiz.party.contact.*;
import org.ofbiz.product.inventory.InventoryWorker;
import org.ofbiz.accounting.payment.*;

orderId = parameters.get("orderId");
context.put("orderId", orderId);

workEffortId = parameters.get("workEffortId");
assignPartyId = parameters.get("partyId");
assignRoleTypeId = parameters.get("roleTypeId");
fromDate = parameters.get("fromDate");
delegate = parameters.get("delegate");
if (delegate != null && parameters.get("toFromDate") != null) {
    fromDate = parameters.get("toFromDate");
}
context.put("workEffortId", workEffortId);
context.put("assignPartyId", assignPartyId);
context.put("assignRoleTypeId", assignRoleTypeId);
context.put("fromDate", fromDate);
context.put("delegate", delegate);
context.put("toDayDate", (new java.sql.Date(System.currentTimeMillis())).toString());

orderHeader = null;
if (orderId != null && orderId.length() > 0) {
    orderHeader = delegator.findByPrimaryKey("OrderHeader", UtilMisc.toMap("orderId", orderId));
}

if (orderHeader != null) {
    // note these are overridden in the orderviewwebsecure.bsh script if run
    context.put("hasPermission", true);
    context.put("canViewInternalDetails", true);

    orderReadHelper = new OrderReadHelper(orderHeader);
    orderItems = orderReadHelper.getOrderItems();
    orderAdjustments = orderReadHelper.getAdjustments();
    orderHeaderAdjustments = orderReadHelper.getOrderHeaderAdjustments();
    orderSubTotal = orderReadHelper.getOrderItemsSubTotal();
    orderTerms = orderHeader.getRelated("OrderTerm");

    context.put("orderHeader", orderHeader);
    context.put("orderReadHelper", orderReadHelper);
    context.put("orderItems", orderItems);
    context.put("orderAdjustments", orderAdjustments);
    context.put("orderHeaderAdjustments", orderHeaderAdjustments);
    context.put("orderSubTotal", orderSubTotal);
    context.put("currencyUomId", orderReadHelper.getCurrency());
    context.put("orderTerms",orderTerms);

    // get the order type
    orderType = orderHeader.getString("orderTypeId");
    context.put("orderType", orderType);

    // get the display party
    displayParty = null;
    if ("PURCHASE_ORDER".equals(orderType)) {
        displayParty = orderReadHelper.getSupplierAgent();
    } else {
        displayParty = orderReadHelper.getPlacingParty();
    }
    if (displayParty != null) {
        partyId = displayParty.getString("partyId");
        context.put("displayParty", displayParty);
        context.put("partyId", partyId);
        
        List paymentMethodValueMaps = PaymentWorker.getPartyPaymentMethodValueMaps(delegator, displayParty.getString("partyId"), false);
        context.put("paymentMethodValueMaps", paymentMethodValueMaps);
    }

    otherAdjAmount = OrderReadHelper.calcOrderAdjustments(orderHeaderAdjustments, orderSubTotal, true, false, false);
    context.put("otherAdjAmount", otherAdjAmount);

    shippingAmount = OrderReadHelper.getAllOrderItemsAdjustmentsTotal(orderItems, orderAdjustments, false, false, true);
    shippingAmount += OrderReadHelper.calcOrderAdjustments(orderHeaderAdjustments, orderSubTotal, false, false, true);
    context.put("shippingAmount", shippingAmount);

    taxAmount = OrderReadHelper.getAllOrderItemsAdjustmentsTotal(orderItems, orderAdjustments, false, true, false);
    taxAmount += OrderReadHelper.calcOrderAdjustments(orderHeaderAdjustments, orderSubTotal, false, true, false);
    context.put("taxAmount", taxAmount);

    grandTotal = OrderReadHelper.getOrderGrandTotal(orderItems, orderAdjustments);
    context.put("grandTotal", grandTotal);

    orderItemList = orderReadHelper.getOrderItems();
    context.put("orderItemList", orderItemList);

    shippingAddress = orderReadHelper.getShippingAddress();
    context.put("shippingAddress", shippingAddress);

    billingAddress = orderReadHelper.getBillingAddress();
    context.put("billingAddress", billingAddress);

    distributorId = orderReadHelper.getDistributorId();
    context.put("distributorId", distributorId);

    affiliateId = orderReadHelper.getAffiliateId();
    context.put("affiliateId", affiliateId);

    billingAccount = orderHeader.getRelatedOne("BillingAccount");
    context.put("billingAccount", billingAccount);
    context.put("billingAccountMaxAmount", orderReadHelper.getBillingAccountMaxAmount()); 

    // get a list of all shipments, and a list of ItemIssuances per order item
    allShipmentsMap = new HashMap();
    primaryShipments = orderHeader.getRelated("PrimaryShipment");
    primaryShipmentIter = primaryShipments.iterator();
    while (primaryShipmentIter.hasNext()) {
        primaryShipment = primaryShipmentIter.next();
        allShipmentsMap.put(primaryShipment.get("shipmentId"), primaryShipment);
    }
    itemIssuancesPerItem = new HashMap();
    itemIssuances = orderHeader.getRelated("ItemIssuance", null, UtilMisc.toList("shipmentId", "shipmentItemSeqId"));
    itemIssuanceIter = itemIssuances.iterator();
    while (itemIssuanceIter.hasNext()) {
        itemIssuance = itemIssuanceIter.next();
        if (!allShipmentsMap.containsKey(itemIssuance.get("shipmentId"))) {
            iiShipment = itemIssuance.getRelatedOne("Shipment");
            if (iiShipment != null) {
                allShipmentsMap.put(iiShipment.get("shipmentId"), iiShipment);
            }
        }

        perItemList = itemIssuancesPerItem.get(itemIssuance.get("orderItemSeqId"));
        if (perItemList == null) {
            perItemList = new LinkedList();
            itemIssuancesPerItem.put(itemIssuance.get("orderItemSeqId"), perItemList);
        }
        perItemList.add(itemIssuance);
    }
    context.put("allShipments", allShipmentsMap.values());
    context.put("itemIssuancesPerItem", itemIssuancesPerItem);

    // get a list of all invoices
    allInvoices = new OrderedSet();
    orderBilling = delegator.findByAnd("OrderItemBilling", UtilMisc.toMap("orderId", orderId), UtilMisc.toList("invoiceId"));
    obIter = orderBilling.iterator();
    while (obIter.hasNext()) {
        billingGv = obIter.next();
        allInvoices.add(billingGv.getString("invoiceId"));
    }
    context.put("invoices", allInvoices);

    oppFields = UtilMisc.toList(new EntityExpr("orderId", EntityOperator.EQUALS, orderId), new EntityExpr("statusId", EntityOperator.NOT_EQUAL, "PAYMENT_CANCELLED"));
    orderPaymentPreferences = delegator.findByAnd("OrderPaymentPreference", oppFields);
    context.put("orderPaymentPreferences", orderPaymentPreferences);

    // ship groups
    shipGroups = delegator.findByAnd("OrderItemShipGroup", UtilMisc.toMap("orderId", orderId), UtilMisc.toList("shipGroupSeqId"));
    context.put("shipGroups", shipGroups);

    // get Shipment tracking info
    osisCond = new EntityFieldMap(UtilMisc.toMap("orderId", orderId), EntityOperator.AND);
    osisOrder = UtilMisc.toList("shipmentId", "shipmentRouteSegmentId", "shipmentPackageSeqId");
    osisFields = UtilMisc.toList("shipGroupSeqId", "shipmentId", "shipmentRouteSegmentId", "carrierPartyId", "shipmentMethodTypeId");
    osisFields.add("shipmentPackageSeqId"); osisFields.add("trackingCode"); osisFields.add("boxNumber");
    osisFindOptions = new EntityFindOptions(); osisFindOptions.setDistinct(true);
    orderShipmentInfoSummaryList = delegator.findByCondition("OrderShipmentInfoSummary", osisCond, null, osisFields, osisOrder, osisFindOptions);
    context.put("orderShipmentInfoSummaryList", orderShipmentInfoSummaryList);

    customerPoNumber = null;
    orderItemPOIter = UtilMisc.toIterator(orderItemList);
    if (orderItemPOIter != null && orderItemPOIter.hasNext()) {
        customerPoNumber = ((GenericValue)orderItemPOIter.next()).getString("correspondingPoId");
    }
    context.put("customerPoNumber", customerPoNumber);

    statusChange = delegator.findByAnd("StatusValidChange",UtilMisc.toMap("statusId",orderHeader.getString("statusId")));
    context.put("statusChange", statusChange);

    currentStatus = orderHeader.getRelatedOne("StatusItem");
    context.put("currentStatus", currentStatus);

    orderHeaderStatuses = orderReadHelper.getOrderHeaderStatuses();
    context.put("orderHeaderStatuses", orderHeaderStatuses);

    adjustmentTypes = delegator.findAll("OrderAdjustmentType", UtilMisc.toList("description"));
    context.put("orderAdjustmentTypes", adjustmentTypes);

    notes = delegator.findByAnd("OrderHeaderNoteView", UtilMisc.toMap("orderId", orderId), UtilMisc.toList("-noteDateTime"));
    context.put("orderNotes", notes);

    cmvm = ContactMechWorker.getOrderContactMechValueMaps(delegator, orderId);
    context.put("orderContactMechValueMaps", cmvm);

    if ("PURCHASE_ORDER".equals(orderType)) {
        // for purchase orders, we need also the supplier's postal address
        GenericValue supplier = orderReadHelper.getBillFromParty();
        if (supplier != null) {
            List supplierContactMechValueMaps = ContactMechWorker.getPartyContactMechValueMaps(delegator, supplier.getString("partyId"), false, "POSTAL_ADDRESS");
            context.put("supplierContactMechValueMaps", supplierContactMechValueMaps);
            Iterator supplierContactMechValueMapsIt = supplierContactMechValueMaps.iterator();
            while (supplierContactMechValueMapsIt.hasNext()) {
                Map supplierContactMechValueMap = (Map)supplierContactMechValueMapsIt.next();
                List contactMechPurposes = supplierContactMechValueMap.get("partyContactMechPurposes");
                Iterator contactMechPurposesIt = contactMechPurposes.iterator();
                while (contactMechPurposesIt.hasNext()) {
                    GenericValue contactMechPurpose = (GenericValue)contactMechPurposesIt.next();
                    if (contactMechPurpose.getString("contactMechPurposeTypeId").equals("GENERAL_LOCATION")) {
                        context.put("supplierGeneralContactMechValueMap", supplierContactMechValueMap);
                    } else if (contactMechPurpose.getString("contactMechPurposeTypeId").equals("SHIPPING_LOCATION")) {
                        context.put("supplierShippingContactMechValueMap", supplierContactMechValueMap);
                    } else if (contactMechPurpose.getString("contactMechPurposeTypeId").equals("BILLING_LOCATION")) {
                        context.put("supplierBillingContactMechValueMap", supplierContactMechValueMap);
                    } else if (contactMechPurpose.getString("contactMechPurposeTypeId").equals("PAYMENT_LOCATION")) {
                        context.put("supplierPaymentContactMechValueMap", supplierContactMechValueMap);
                    }
                }
            }
        }
    }

    // see if an approved order with all items completed exists
    context.put("setOrderCompleteOption", false);
    if ("ORDER_APPROVED".equals(orderHeader.getString("statusId"))) {
        expr = new EntityExpr("statusId", EntityOperator.NOT_EQUAL, "ITEM_COMPLETED");
        notCreatedItems = orderReadHelper.getOrderItemsByCondition(expr);
        if (notCreatedItems.size() == 0) {
            context.put("setOrderCompleteOption", true);
        }
    }

    // get inventory summary for each shopping cart product item
    inventorySummary = dispatcher.runSync("getProductInventorySummaryForItems", UtilMisc.toMap("orderItems", orderItems));
    context.put("availableToPromiseMap", inventorySummary.get("availableToPromiseMap"));
    context.put("quantityOnHandMap", inventorySummary.get("quantityOnHandMap"));
    context.put("mktgPkgATPMap", inventorySummary.get("mktgPkgATPMap"));
    context.put("mktgPkgQOHMap", inventorySummary.get("mktgPkgQOHMap"));

    // Get a list of facilities for purchase orders to receive against.
    // These facilities must be owned by the bill-to party of the purchase order.
    // For a given ship group, the allowed facilities are the ones associated
    // to the same contact mech of the ship group.
    if ("PURCHASE_ORDER".equals(orderType)) {
        Map facilitiesForShipGroup = new HashMap();
        String ownerPartyId = orderReadHelper.getBillToParty().getString("partyId");
        for (int i = 0; i < shipGroups.size(); i++) {
            GenericValue shipGroup = (GenericValue)shipGroups.get(i);
            Map lookupMap = UtilMisc.toMap("ownerPartyId", ownerPartyId);
            if (shipGroup.get("contactMechId") != null) {
                lookupMap.put("contactMechId", shipGroup.getString("contactMechId"));
            }
            List facilities = delegator.findByAndCache("FacilityAndContactMech", lookupMap);
            facilitiesForShipGroup.put(shipGroup.getString("shipGroupSeqId"), facilities);
        }
        context.put("facilitiesForShipGroup", facilitiesForShipGroup);
    }

    // set the type of return based on type of order
    if ("SALES_ORDER".equals(orderType)) {
        context.put("returnHeaderTypeId", "CUSTOMER_RETURN");
        // also set the product store facility Id for sales orders
        context.put("storeFacilityId", orderHeader.getRelatedOne("ProductStore").getString("inventoryFacilityId"));
    } else {
        context.put("returnHeaderTypeId", "VENDOR_RETURN");
    }

    // QUANTITY: get the returned quantity by order item map
    context.put("returnQuantityMap", orderReadHelper.getOrderItemReturnedQuantities());

    // INVENTORY: construct a Set of productIds in the order for use in querying for inventory, otherwise these queries can get expensive
    productIds = orderReadHelper.getOrderProductIds();

    // INVENTORY: get the production quantity for each product and store the results in a map of productId -> quantity
    productionMap = new HashMap();
    for (iter = productIds.iterator(); iter.hasNext(); ) {
        productId = iter.next();
        if (productId == null) continue;  // avoid order items without productIds, such as bulk order items
        contextInput = UtilMisc.toMap("productId", productId, "userLogin", userLogin);
        resultOutput = dispatcher.runSync("getProductManufacturingSummaryByFacility", contextInput);
        manufacturingInQuantitySummaryByFacility = resultOutput.get("summaryInByFacility");
        Double productionQuantity = (Double) manufacturingInQuantitySummaryByFacility.get("estimatedQuantityTotal");
        productionMap.put(productId, productionQuantity);
    }
    context.put("productionProductQuantityMap", productionMap);

    // INVENTORY: find the number of products in outstanding sales orders for the same product store
    requiredMap = InventoryWorker.getOutstandingProductQuantitiesForSalesOrders(productIds, delegator);
    context.put("requiredProductQuantityMap", requiredMap);

    // INVENTORY: find the quantity of each product in outstanding purchase orders
    onOrderMap = InventoryWorker.getOutstandingProductQuantitiesForPurchaseOrders(productIds, delegator);
    context.put("onOrderProductQuantityMap", onOrderMap);
}

paramString = "";
if (orderId != null) paramString = paramString + "orderId=" + orderId;
if (workEffortId != null) paramString = paramString + "&workEffortId=" + workEffortId;
if (assignPartyId != null) paramString = paramString + "&partyId=" + assignPartyId;
if (assignRoleTypeId != null) paramString = paramString + "&roleTypeId=" + assignRoleTypeId;
if (fromDate != null) paramString = paramString + "&fromDate=" + fromDate;
context.put("paramString", paramString);

workEffortStatus = null;
if (workEffortId != null && assignPartyId != null && assignRoleTypeId != null && fromDate != null) {
    fields = UtilMisc.toMap("workEffortId", workEffortId, "partyId", assignPartyId, "roleTypeId", assignRoleTypeId, "fromDate", fromDate);
    wepa = delegator.findByPrimaryKey("WorkEffortPartyAssignment", fields);

    if (wepa != null && wepa.get("statusId") != null && wepa.getString("statusId").equals("CAL_ACCEPTED")) {
        workEffort = delegator.findByPrimaryKey("WorkEffort", UtilMisc.toMap("workEffortId", workEffortId));
        workEffortStatus = workEffort.getString("currentStatusId");
        if (workEffortStatus != null) {
            context.put("workEffortStatus", workEffortStatus);
            if (workEffortStatus.equals("WF_RUNNING") || workEffortStatus.equals("WF_SUSPENDED"))
                context.put("inProcess", new Boolean(true));
        }

        if (workEffort != null) {
            if ((delegate != null && delegate.equals("true")) || (workEffortStatus != null && workEffortStatus.equals("WF_RUNNING"))) {
                actFields = UtilMisc.toMap("packageId", workEffort.getString("workflowPackageId"), "packageVersion", workEffort.getString("workflowPackageVersion"), "processId", workEffort.getString("workflowProcessId"), "processVersion", workEffort.getString("workflowProcessVersion"), "activityId", workEffort.getString("workflowActivityId"));
                activity = delegator.findByPrimaryKey("WorkflowActivity", actFields);
                if (activity != null) {
                    transitions = activity.getRelated("FromWorkflowTransition", null, UtilMisc.toList("-transitionId"));
                    context.put("wfTransitions", transitions);
                }
            }
        }
    }
}

if (orderHeader != null) {
    // list to find all the POSTAL_ADDRESS for the shipment party. 
    orderParty = delegator.findByPrimaryKey("Party", UtilMisc.toMap("partyId", partyId));
    shippingContactMechList = ContactHelper.getContactMech(orderParty, "SHIPPING_LOCATION", "POSTAL_ADDRESS", false);
    context.put("shippingContactMechList",shippingContactMechList);

    // list to find all the shipmentMethods from the view named "ProductStoreShipmentMethView".
    productStoreId = orderHeader.getRelatedOne("ProductStore").getString("productStoreId");
    productStoreShipmentMethList = delegator.findByAndCache("ProductStoreShipmentMethView", UtilMisc.toMap("productStoreId", productStoreId), UtilMisc.toList("sequenceNumber"));
    context.put("productStoreShipmentMethList",productStoreShipmentMethList);

    // Get a map of returnable items
    returnableItems = new HashMap();
    returnableItemServiceMap = dispatcher.runSync("getReturnableItems", UtilMisc.toMap("orderId", orderId));
    if (returnableItemServiceMap.get("returnableItems") != null) {
        returnableItems = returnableItemServiceMap.get("returnableItems");
    }
    context.put("returnableItems", returnableItems);
}

if (orderHeader != null) {
   // list to find all the POSTAL_ADDRESS for the party. 
   orderParty = delegator.findByPrimaryKey("Party", UtilMisc.toMap("partyId", partyId));
   postalContactMechList = ContactHelper.getContactMechByType(orderParty,"POSTAL_ADDRESS", false);
   context.put("postalContactMechList",postalContactMechList);
}
