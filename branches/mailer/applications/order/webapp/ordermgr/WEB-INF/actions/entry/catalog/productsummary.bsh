/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 * 
 * http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/* This file has been modified by Open Source Strategies, Inc. */


/*
 * This script is also referenced by the ecommerce's screens and
 * should not contain order component's specific code.
 */

import org.ofbiz.base.util.*;
import org.ofbiz.entity.*;
import org.ofbiz.entity.util.*;
import org.ofbiz.service.*;
import org.ofbiz.product.product.ProductContentWrapper;
import org.ofbiz.product.catalog.*;
import org.ofbiz.product.store.*;
import org.ofbiz.order.shoppingcart.*;


//either optProduct, optProductId or productId must be specified
product = request.getAttribute("optProduct");
optProductId = request.getAttribute("optProductId");
productId = request.getAttribute("productId");

webSiteId = CatalogWorker.getWebSiteId(request);
catalogId = CatalogWorker.getCurrentCatalogId(request);
productStore = ProductStoreWorker.getProductStore(request);
facilityId = productStore.getString("inventoryFacilityId");
productStoreId = productStore.getString("productStoreId");
autoUserLogin = session.getAttribute("autoUserLogin");
userLogin = session.getAttribute("userLogin");
cart = ShoppingCartEvents.getCartObject(request);

context.put("nowTimestamp", UtilDateTime.nowTimestamp());
context.remove("daysToShip");
context.remove("averageRating");
context.remove("numRatings");

if (product != null) {
    productId = product.get("productId");
}
if (optProductId != null) {
    productId = optProductId;
}

// get the product entity
if (product == null && productId != null) {
    product = delegator.findByPrimaryKeyCache("Product", UtilMisc.toMap("productId", productId));
}
if (product != null) {    
    resultOutput = dispatcher.runSync("getInventoryAvailableByFacility", UtilMisc.toMap("productId",product.get("productId"), "facilityId", facilityId, "useCache", true));
    totalAvailableToPromise = resultOutput.get("availableToPromiseTotal");    
    if(totalAvailableToPromise != null && totalAvailableToPromise.doubleValue() > 0) {
        productFacility = delegator.findByPrimaryKeyCache("ProductFacility", UtilMisc.toMap("productId", product.get("productId"), "facilityId", facilityId));
        if (productFacility != null && productFacility.get("daysToShip") != null) {
            context.put("daysToShip", productFacility.get("daysToShip"));
        }    
    } else {
       supplierProducts=delegator.findByAndCache("SupplierProduct", UtilMisc.toMap("productId", product.get("productId")),UtilMisc.toList("-availableFromDate"));
       supplierProduct = EntityUtil.getFirst(supplierProducts);
       if (supplierProduct != null && supplierProduct.get("standardLeadTimeDays") != null) {
           Double standardLeadTimeDays = supplierProduct.get("standardLeadTimeDays");
           double daysToShip = standardLeadTimeDays.doubleValue()+1;
           context.put("daysToShip", new Double(daysToShip));
       }
    }
    // make the productContentWrapper
    ProductContentWrapper productContentWrapper = new ProductContentWrapper(product, request);
    context.put("productContentWrapper", productContentWrapper);
}

categoryId = null;
reviews = null;
if (product != null) {
    categoryId = parameters.get("category_id");
    if (categoryId == null) {
        categoryId = request.getAttribute("productCategoryId");
    }

    // get the product price
    if (cart.isSalesOrder()) {
        // sales order: run the "calculateProductPrice" service
        priceContext = UtilMisc.toMap("product", product, "currencyUomId", cart.getCurrency(), 
                "autoUserLogin", autoUserLogin, "userLogin", userLogin);
        priceContext.put("webSiteId", webSiteId);
        priceContext.put("prodCatalogId", catalogId);
        priceContext.put("productStoreId", productStoreId);
        priceContext.put("agreementId", cart.getAgreementId());
        priceContext.put("partyId", cart.getPartyId());  // IMPORTANT: otherwise it'll be calculating prices using the logged in user which could be a CSR instead of the customer 
        priceContext.put("checkIncludeVat", "Y");
        priceMap = dispatcher.runSync("calculateProductPrice", priceContext);

        context.put("price", priceMap);
    } else {
        // purchase order: run the "calculatePurchasePrice" service
        priceContext = UtilMisc.toMap("product", product, "currencyUomId", cart.getCurrency(), 
                "partyId", cart.getPartyId(), "userLogin", userLogin);
        priceMap = dispatcher.runSync("calculatePurchasePrice", priceContext);

        context.put("price", priceMap);
    }
    // get the product review(s)
    reviews = product.getRelatedCache("ProductReview", null, UtilMisc.toList("-postedDateTime"));
}

// get the average rating
if (reviews != null && reviews.size() > 0) {
    reviewIter = reviews.iterator();
    double totalProductRating = 0;
    long numRatings = 0;
    while (reviewIter.hasNext()) {
        productReview = reviewIter.next();
        productRating = productReview.get("productRating");
        if (productRating != null) {
            totalProductRating += productRating;
            numRatings++;
        }
    }
    if (numRatings > 0) {
        context.put("averageRating", totalProductRating/numRatings);
        context.put("numRatings", numRatings);
    }
}

// an example of getting features of a certain type to show
sizeProductFeatureAndAppls = delegator.findByAnd("ProductFeatureAndAppl", UtilMisc.toMap("productId", productId, "productFeatureTypeId", "SIZE"), UtilMisc.toList("sequenceNum", "defaultSequenceNum"));

context.put("product", product);
context.put("productStoreId", productStoreId);
context.put("categoryId", categoryId);
context.put("productReviews", reviews);
context.put("sizeProductFeatureAndAppls", sizeProductFeatureAndAppls);
    
